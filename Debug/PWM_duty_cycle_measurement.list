
PWM_duty_cycle_measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08007ac8  08007ac8  00008ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e84  08007e84  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e84  08007e84  00008e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e8c  08007e8c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e8c  08007e8c  00008e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e90  08007e90  00008e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007e94  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001d4  08008068  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08008068  00009470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d815  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1f  00000000  00000000  00016a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00018838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a17  00000000  00000000  00019520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229ee  00000000  00000000  00019f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eecd  00000000  00000000  0003c925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a81  00000000  00000000  0004b7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b4  00000000  00000000  0011e2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00122a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ab0 	.word	0x08007ab0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007ab0 	.word	0x08007ab0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1a:	f000 fd1b 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f849 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 fa01 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f26:	f000 f9d5 	bl	80012d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f2a:	f000 f8b1 	bl	8001090 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f2e:	f000 f935 	bl	800119c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // starting IC in interrupt mode for ch1
 8000f32:	2100      	movs	r1, #0
 8000f34:	4817      	ldr	r0, [pc, #92]	@ (8000f94 <main+0x80>)
 8000f36:	f002 f8c3 	bl	80030c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2); // starting IC for ch2
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4815      	ldr	r0, [pc, #84]	@ (8000f94 <main+0x80>)
 8000f3e:	f001 ffe3 	bl	8002f08 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // generating PWM signal
 8000f42:	2100      	movs	r1, #0
 8000f44:	4814      	ldr	r0, [pc, #80]	@ (8000f98 <main+0x84>)
 8000f46:	f001 febd 	bl	8002cc4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  len = sprintf(buffer, "Duty Cycle: %.2f (%%)\n\r"
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <main+0x88>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb1a 	bl	8000588 <__aeabi_f2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <main+0x8c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fb13 	bl	8000588 <__aeabi_f2d>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	e9cd 2300 	strd	r2, r3, [sp]
 8000f6a:	4622      	mov	r2, r4
 8000f6c:	462b      	mov	r3, r5
 8000f6e:	490d      	ldr	r1, [pc, #52]	@ (8000fa4 <main+0x90>)
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <main+0x94>)
 8000f72:	f004 fc69 	bl	8005848 <siprintf>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <main+0x98>)
 8000f7a:	6013      	str	r3, [r2, #0]
			  "Frequency: %.2f (Hz)\n\r", duty_cycle, Frequency);
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <main+0x98>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <main+0x94>)
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <main+0x9c>)
 8000f8a:	f003 fb89 	bl	80046a0 <HAL_UART_Transmit>
	  len = sprintf(buffer, "Duty Cycle: %.2f (%%)\n\r"
 8000f8e:	bf00      	nop
 8000f90:	e7db      	b.n	8000f4a <main+0x36>
 8000f92:	bf00      	nop
 8000f94:	20000238 	.word	0x20000238
 8000f98:	200001f0 	.word	0x200001f0
 8000f9c:	200002d0 	.word	0x200002d0
 8000fa0:	200002d4 	.word	0x200002d4
 8000fa4:	08007ac8 	.word	0x08007ac8
 8000fa8:	200002dc 	.word	0x200002dc
 8000fac:	200002d8 	.word	0x200002d8
 8000fb0:	20000280 	.word	0x20000280

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	@ 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2234      	movs	r2, #52	@ 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 fca5 	bl	8005912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <SystemClock_Config+0xd4>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	4a29      	ldr	r2, [pc, #164]	@ (8001088 <SystemClock_Config+0xd4>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <SystemClock_Config+0xd4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <SystemClock_Config+0xd8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001000:	4a22      	ldr	r2, [pc, #136]	@ (800108c <SystemClock_Config+0xd8>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <SystemClock_Config+0xd8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001014:	2302      	movs	r3, #2
 8001016:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101c:	2310      	movs	r3, #16
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001024:	2300      	movs	r3, #0
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001028:	2310      	movs	r3, #16
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800102c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001030:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001032:	2304      	movs	r3, #4
 8001034:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800103a:	2302      	movs	r3, #2
 800103c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fb02 	bl	800264c <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800104e:	f000 fa25 	bl	800149c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2302      	movs	r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 ffa2 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800107a:	f000 fa0f 	bl	800149c <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	@ 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b092      	sub	sp, #72	@ 0x48
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001096:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2220      	movs	r2, #32
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 fc29 	bl	8005912 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010c2:	4a35      	ldr	r2, [pc, #212]	@ (8001198 <MX_TIM1_Init+0x108>)
 80010c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 80010c6:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010d6:	f240 3247 	movw	r2, #839	@ 0x347
 80010da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ee:	4829      	ldr	r0, [pc, #164]	@ (8001194 <MX_TIM1_Init+0x104>)
 80010f0:	f001 fd99 	bl	8002c26 <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 f9cf 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001106:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800110a:	4619      	mov	r1, r3
 800110c:	4821      	ldr	r0, [pc, #132]	@ (8001194 <MX_TIM1_Init+0x104>)
 800110e:	f003 f995 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 f9c0 	bl	800149c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	2360      	movs	r3, #96	@ 0x60
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 420;
 8001120:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4814      	ldr	r0, [pc, #80]	@ (8001194 <MX_TIM1_Init+0x104>)
 8001144:	f002 fa70 	bl	8003628 <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800114e:	f000 f9a5 	bl	800149c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800116a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM1_Init+0x104>)
 8001176:	f003 f9dd 	bl	8004534 <HAL_TIMEx_ConfigBreakDeadTime>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001180:	f000 f98c 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM1_Init+0x104>)
 8001186:	f000 fa27 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3748      	adds	r7, #72	@ 0x48
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001f0 	.word	0x200001f0
 8001198:	40010000 	.word	0x40010000

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b090      	sub	sp, #64	@ 0x40
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d6:	4b3e      	ldr	r3, [pc, #248]	@ (80012d0 <MX_TIM2_Init+0x134>)
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011de:	4b3c      	ldr	r3, [pc, #240]	@ (80012d0 <MX_TIM2_Init+0x134>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <MX_TIM2_Init+0x134>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011ea:	4b39      	ldr	r3, [pc, #228]	@ (80012d0 <MX_TIM2_Init+0x134>)
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <MX_TIM2_Init+0x134>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <MX_TIM2_Init+0x134>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fe:	4834      	ldr	r0, [pc, #208]	@ (80012d0 <MX_TIM2_Init+0x134>)
 8001200:	f001 fcc2 	bl	8002b88 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800120a:	f000 f947 	bl	800149c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001218:	4619      	mov	r1, r3
 800121a:	482d      	ldr	r0, [pc, #180]	@ (80012d0 <MX_TIM2_Init+0x134>)
 800121c:	f002 fac6 	bl	80037ac <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001226:	f000 f939 	bl	800149c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800122a:	4829      	ldr	r0, [pc, #164]	@ (80012d0 <MX_TIM2_Init+0x134>)
 800122c:	f001 fe12 	bl	8002e54 <HAL_TIM_IC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001236:	f000 f931 	bl	800149c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800123a:	2304      	movs	r3, #4
 800123c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800123e:	2350      	movs	r3, #80	@ 0x50
 8001240:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	481e      	ldr	r0, [pc, #120]	@ (80012d0 <MX_TIM2_Init+0x134>)
 8001256:	f002 fb70 	bl	800393a <HAL_TIM_SlaveConfigSynchro>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001260:	f000 f91c 	bl	800149c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4814      	ldr	r0, [pc, #80]	@ (80012d0 <MX_TIM2_Init+0x134>)
 800127e:	f002 f937 	bl	80034f0 <HAL_TIM_IC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001288:	f000 f908 	bl	800149c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800128c:	2302      	movs	r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2204      	movs	r2, #4
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM2_Init+0x134>)
 800129e:	f002 f927 	bl	80034f0 <HAL_TIM_IC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80012a8:	f000 f8f8 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM2_Init+0x134>)
 80012ba:	f003 f8bf 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80012c4:	f000 f8ea 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3740      	adds	r7, #64	@ 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000238 	.word	0x20000238

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f003 f978 	bl	8004600 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f8c1 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000280 	.word	0x20000280
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a2c      	ldr	r2, [pc, #176]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a25      	ldr	r2, [pc, #148]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	4812      	ldr	r0, [pc, #72]	@ (80013fc <MX_GPIO_Init+0xd4>)
 80013b4:	f000 fde6 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	480c      	ldr	r0, [pc, #48]	@ (8001400 <MX_GPIO_Init+0xd8>)
 80013d0:	f000 fc44 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013d4:	2320      	movs	r3, #32
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_GPIO_Init+0xd4>)
 80013ec:	f000 fc36 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020800 	.word	0x40020800

08001404 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // If the interrupt is triggered by channel 1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7f1b      	ldrb	r3, [r3, #28]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d133      	bne.n	800147c <HAL_TIM_IC_CaptureCallback+0x78>
	{
		// Read the IC value
		IC_ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f002 fad2 	bl	80039c0 <HAL_TIM_ReadCapturedValue>
 800141c:	4603      	mov	r3, r0
 800141e:	4a19      	ldr	r2, [pc, #100]	@ (8001484 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001420:	6013      	str	r3, [r2, #0]

		if (IC_ch1 != 0)
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d028      	beq.n	800147c <HAL_TIM_IC_CaptureCallback+0x78>
		{
			IC_ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800142a:	2104      	movs	r1, #4
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f002 fac7 	bl	80039c0 <HAL_TIM_ReadCapturedValue>
 8001432:	4603      	mov	r3, r0
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001436:	6013      	str	r3, [r2, #0]
			duty_cycle = ((float)IC_ch2/(float)IC_ch1)*100;
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_TIM_IC_CaptureCallback+0x84>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001454:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800148c <HAL_TIM_IC_CaptureCallback+0x88>
 8001458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800145e:	edc3 7a00 	vstr	s15, [r3]
			Frequency = 84000000.0/(float)IC_ch1;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800146e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001494 <HAL_TIM_IC_CaptureCallback+0x90>
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001478:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002c8 	.word	0x200002c8
 8001488:	200002cc 	.word	0x200002cc
 800148c:	42c80000 	.word	0x42c80000
 8001490:	200002d0 	.word	0x200002d0
 8001494:	4ca037a0 	.word	0x4ca037a0
 8001498:	200002d4 	.word	0x200002d4

0800149c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a0:	b672      	cpsid	i
}
 80014a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <Error_Handler+0x8>

080014a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014e6:	2007      	movs	r0, #7
 80014e8:	f000 fb76 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <HAL_TIM_PWM_MspInit+0x3c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10d      	bne.n	8001526 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_TIM_PWM_MspInit+0x40>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_TIM_PWM_MspInit+0x40>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6453      	str	r3, [r2, #68]	@ 0x44
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <HAL_TIM_PWM_MspInit+0x40>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40010000 	.word	0x40010000
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800155c:	d133      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_TIM_Base_MspInit+0x94>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a1a      	ldr	r2, [pc, #104]	@ (80015d0 <HAL_TIM_Base_MspInit+0x94>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <HAL_TIM_Base_MspInit+0x94>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_TIM_Base_MspInit+0x94>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <HAL_TIM_Base_MspInit+0x94>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_TIM_Base_MspInit+0x94>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a6:	2301      	movs	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <HAL_TIM_Base_MspInit+0x98>)
 80015b2:	f000 fb53 	bl	8001c5c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201c      	movs	r0, #28
 80015bc:	f000 fb17 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c0:	201c      	movs	r0, #28
 80015c2:	f000 fb30 	bl	8001c26 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <HAL_TIM_MspPostInit+0x68>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d11e      	bne.n	8001638 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_TIM_MspPostInit+0x6c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <HAL_TIM_MspPostInit+0x6c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_TIM_MspPostInit+0x6c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001628:	2301      	movs	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <HAL_TIM_MspPostInit+0x70>)
 8001634:	f000 fb12 	bl	8001c5c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40010000 	.word	0x40010000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <HAL_UART_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_UART_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <HAL_UART_MspInit+0x8c>)
 80016c2:	f000 facb 	bl	8001c5c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	@ 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f000 f961 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <TIM2_IRQHandler+0x10>)
 8001742:	f001 fde5 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000238 	.word	0x20000238

08001750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_kill>:

int _kill(int pid, int sig)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176a:	f004 f925 	bl	80059b8 <__errno>
 800176e:	4603      	mov	r3, r0
 8001770:	2216      	movs	r2, #22
 8001772:	601a      	str	r2, [r3, #0]
  return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_exit>:

void _exit (int status)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe7 	bl	8001760 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001792:	bf00      	nop
 8001794:	e7fd      	b.n	8001792 <_exit+0x12>

08001796 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e00a      	b.n	80017be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a8:	f3af 8000 	nop.w
 80017ac:	4601      	mov	r1, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	b2ca      	uxtb	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbf0      	blt.n	80017a8 <_read+0x12>
  }

  return len;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e009      	b.n	80017f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dbf1      	blt.n	80017e2 <_write+0x12>
  }
  return len;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_close>:

int _close(int file)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001830:	605a      	str	r2, [r3, #4]
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_isatty>:

int _isatty(int file)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f004 f88a 	bl	80059b8 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20020000 	.word	0x20020000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	2000031c 	.word	0x2000031c
 80018d8:	20000470 	.word	0x20000470

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001938 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001904:	f7ff ffea 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	@ (800193c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	@ (8001940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	@ (800194c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800192e:	f004 f849 	bl	80059c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff faef 	bl	8000f14 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001944:	08007e94 	.word	0x08007e94
  ldr r2, =_sbss
 8001948:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800194c:	20000470 	.word	0x20000470

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_Init+0x40>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_Init+0x40>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800196e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <HAL_Init+0x40>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f92b 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fd8e 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f943 	bl	8001c42 <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 f90b 	bl	8001bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	@ (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000320 	.word	0x20000320

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000320 	.word	0x20000320

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4907      	ldr	r1, [pc, #28]	@ (8001ad4 <__NVIC_EnableIRQ+0x38>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	@ (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	@ (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	@ 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff8e 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff29 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff3e 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff8e 	bl	8001b2c <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5d 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff31 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa2 	bl	8001b94 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e165      	b.n	8001f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8154 	bne.w	8001f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d005      	beq.n	8001cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d017      	beq.n	8001d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d123      	bne.n	8001da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80ae 	beq.w	8001f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a5c      	ldr	r2, [pc, #368]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a58      	ldr	r2, [pc, #352]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4f      	ldr	r2, [pc, #316]	@ (8001f64 <HAL_GPIO_Init+0x308>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x21a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f68 <HAL_GPIO_Init+0x30c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x216>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4d      	ldr	r2, [pc, #308]	@ (8001f6c <HAL_GPIO_Init+0x310>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x212>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <HAL_GPIO_Init+0x314>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <HAL_GPIO_Init+0x318>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x20a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_GPIO_Init+0x31c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x206>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a49      	ldr	r2, [pc, #292]	@ (8001f7c <HAL_GPIO_Init+0x320>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x202>
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e00c      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e00a      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e62:	2305      	movs	r3, #5
 8001e64:	e008      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e66:	2304      	movs	r3, #4
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e004      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e76:	2300      	movs	r3, #0
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	f002 0203 	and.w	r2, r2, #3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4093      	lsls	r3, r2
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e88:	4935      	ldr	r1, [pc, #212]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e96:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eba:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee4:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eea:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f38:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	f67f ae96 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3724      	adds	r7, #36	@ 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40021800 	.word	0x40021800
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0cc      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b68      	ldr	r3, [pc, #416]	@ (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d90c      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b65      	ldr	r3, [pc, #404]	@ (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b63      	ldr	r3, [pc, #396]	@ (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b8      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b59      	ldr	r3, [pc, #356]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a58      	ldr	r2, [pc, #352]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a52      	ldr	r2, [pc, #328]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800202e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b50      	ldr	r3, [pc, #320]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	494d      	ldr	r1, [pc, #308]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d044      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b47      	ldr	r3, [pc, #284]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d119      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d003      	beq.n	8002076 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002072:	2b03      	cmp	r3, #3
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3b      	ldr	r3, [pc, #236]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e067      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4934      	ldr	r1, [pc, #208]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff fcba 	bl	8001a20 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7ff fcb6 	bl	8001a20 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e04f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d20c      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e032      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4916      	ldr	r1, [pc, #88]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212a:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	490e      	ldr	r1, [pc, #56]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f855 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002142:	4602      	mov	r2, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	490a      	ldr	r1, [pc, #40]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	5ccb      	ldrb	r3, [r1, r3]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	4a09      	ldr	r2, [pc, #36]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fc1a 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00
 8002174:	40023800 	.word	0x40023800
 8002178:	08007af8 	.word	0x08007af8
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_RCC_GetHCLKFreq+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000000 	.word	0x20000000

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff0 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0a9b      	lsrs	r3, r3, #10
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	@ (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	08007b08 	.word	0x08007b08

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c8:	f7ff ffdc 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0b5b      	lsrs	r3, r3, #13
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	@ (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	08007b08 	.word	0x08007b08

080021ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f0:	b0ae      	sub	sp, #184	@ 0xb8
 80021f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002212:	4bcb      	ldr	r3, [pc, #812]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b0c      	cmp	r3, #12
 800221c:	f200 8206 	bhi.w	800262c <HAL_RCC_GetSysClockFreq+0x440>
 8002220:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	0800225d 	.word	0x0800225d
 800222c:	0800262d 	.word	0x0800262d
 8002230:	0800262d 	.word	0x0800262d
 8002234:	0800262d 	.word	0x0800262d
 8002238:	08002265 	.word	0x08002265
 800223c:	0800262d 	.word	0x0800262d
 8002240:	0800262d 	.word	0x0800262d
 8002244:	0800262d 	.word	0x0800262d
 8002248:	0800226d 	.word	0x0800226d
 800224c:	0800262d 	.word	0x0800262d
 8002250:	0800262d 	.word	0x0800262d
 8002254:	0800262d 	.word	0x0800262d
 8002258:	0800245d 	.word	0x0800245d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4bb9      	ldr	r3, [pc, #740]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x358>)
 800225e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002262:	e1e7      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002264:	4bb8      	ldr	r3, [pc, #736]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002266:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800226a:	e1e3      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226c:	4bb4      	ldr	r3, [pc, #720]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002278:	4bb1      	ldr	r3, [pc, #708]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d071      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002284:	4bae      	ldr	r3, [pc, #696]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	2200      	movs	r2, #0
 800228c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002290:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002294:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022bc:	0150      	lsls	r0, r2, #5
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4621      	mov	r1, r4
 80022c4:	1a51      	subs	r1, r2, r1
 80022c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80022c8:	4629      	mov	r1, r5
 80022ca:	eb63 0301 	sbc.w	r3, r3, r1
 80022ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80022dc:	4649      	mov	r1, r9
 80022de:	018b      	lsls	r3, r1, #6
 80022e0:	4641      	mov	r1, r8
 80022e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e6:	4641      	mov	r1, r8
 80022e8:	018a      	lsls	r2, r1, #6
 80022ea:	4641      	mov	r1, r8
 80022ec:	1a51      	subs	r1, r2, r1
 80022ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022f0:	4649      	mov	r1, r9
 80022f2:	eb63 0301 	sbc.w	r3, r3, r1
 80022f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002304:	4649      	mov	r1, r9
 8002306:	00cb      	lsls	r3, r1, #3
 8002308:	4641      	mov	r1, r8
 800230a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800230e:	4641      	mov	r1, r8
 8002310:	00ca      	lsls	r2, r1, #3
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4603      	mov	r3, r0
 8002318:	4622      	mov	r2, r4
 800231a:	189b      	adds	r3, r3, r2
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
 800231e:	462b      	mov	r3, r5
 8002320:	460a      	mov	r2, r1
 8002322:	eb42 0303 	adc.w	r3, r2, r3
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002334:	4629      	mov	r1, r5
 8002336:	024b      	lsls	r3, r1, #9
 8002338:	4621      	mov	r1, r4
 800233a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800233e:	4621      	mov	r1, r4
 8002340:	024a      	lsls	r2, r1, #9
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800234a:	2200      	movs	r2, #0
 800234c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002354:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002358:	f7fe fc46 	bl	8000be8 <__aeabi_uldivmod>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4613      	mov	r3, r2
 8002362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002366:	e067      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002368:	4b75      	ldr	r3, [pc, #468]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	2200      	movs	r2, #0
 8002370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002374:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002378:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800237c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002380:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002382:	2300      	movs	r3, #0
 8002384:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002386:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800238a:	4622      	mov	r2, r4
 800238c:	462b      	mov	r3, r5
 800238e:	f04f 0000 	mov.w	r0, #0
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	0159      	lsls	r1, r3, #5
 8002398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800239c:	0150      	lsls	r0, r2, #5
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4621      	mov	r1, r4
 80023a4:	1a51      	subs	r1, r2, r1
 80023a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023a8:	4629      	mov	r1, r5
 80023aa:	eb63 0301 	sbc.w	r3, r3, r1
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80023bc:	4649      	mov	r1, r9
 80023be:	018b      	lsls	r3, r1, #6
 80023c0:	4641      	mov	r1, r8
 80023c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023c6:	4641      	mov	r1, r8
 80023c8:	018a      	lsls	r2, r1, #6
 80023ca:	4641      	mov	r1, r8
 80023cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80023d0:	4649      	mov	r1, r9
 80023d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ea:	4692      	mov	sl, r2
 80023ec:	469b      	mov	fp, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	eb1a 0303 	adds.w	r3, sl, r3
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	462b      	mov	r3, r5
 80023f8:	eb4b 0303 	adc.w	r3, fp, r3
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800240a:	4629      	mov	r1, r5
 800240c:	028b      	lsls	r3, r1, #10
 800240e:	4621      	mov	r1, r4
 8002410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002414:	4621      	mov	r1, r4
 8002416:	028a      	lsls	r2, r1, #10
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002420:	2200      	movs	r2, #0
 8002422:	673b      	str	r3, [r7, #112]	@ 0x70
 8002424:	677a      	str	r2, [r7, #116]	@ 0x74
 8002426:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800242a:	f7fe fbdd 	bl	8000be8 <__aeabi_uldivmod>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4613      	mov	r3, r2
 8002434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002438:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	3301      	adds	r3, #1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800244a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800244e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800245a:	e0eb      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800245c:	4b38      	ldr	r3, [pc, #224]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002468:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d06b      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002474:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x354>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	2200      	movs	r2, #0
 800247c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800247e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002486:	663b      	str	r3, [r7, #96]	@ 0x60
 8002488:	2300      	movs	r3, #0
 800248a:	667b      	str	r3, [r7, #100]	@ 0x64
 800248c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002490:	4622      	mov	r2, r4
 8002492:	462b      	mov	r3, r5
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	0159      	lsls	r1, r3, #5
 800249e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a2:	0150      	lsls	r0, r2, #5
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4621      	mov	r1, r4
 80024aa:	1a51      	subs	r1, r2, r1
 80024ac:	61b9      	str	r1, [r7, #24]
 80024ae:	4629      	mov	r1, r5
 80024b0:	eb63 0301 	sbc.w	r3, r3, r1
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024c2:	4659      	mov	r1, fp
 80024c4:	018b      	lsls	r3, r1, #6
 80024c6:	4651      	mov	r1, sl
 80024c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024cc:	4651      	mov	r1, sl
 80024ce:	018a      	lsls	r2, r1, #6
 80024d0:	4651      	mov	r1, sl
 80024d2:	ebb2 0801 	subs.w	r8, r2, r1
 80024d6:	4659      	mov	r1, fp
 80024d8:	eb63 0901 	sbc.w	r9, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f0:	4690      	mov	r8, r2
 80024f2:	4699      	mov	r9, r3
 80024f4:	4623      	mov	r3, r4
 80024f6:	eb18 0303 	adds.w	r3, r8, r3
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	462b      	mov	r3, r5
 80024fe:	eb49 0303 	adc.w	r3, r9, r3
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002510:	4629      	mov	r1, r5
 8002512:	024b      	lsls	r3, r1, #9
 8002514:	4621      	mov	r1, r4
 8002516:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800251a:	4621      	mov	r1, r4
 800251c:	024a      	lsls	r2, r1, #9
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002526:	2200      	movs	r2, #0
 8002528:	65bb      	str	r3, [r7, #88]	@ 0x58
 800252a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800252c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002530:	f7fe fb5a 	bl	8000be8 <__aeabi_uldivmod>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4613      	mov	r3, r2
 800253a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800253e:	e065      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x420>
 8002540:	40023800 	.word	0x40023800
 8002544:	00f42400 	.word	0x00f42400
 8002548:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254c:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x458>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	2200      	movs	r2, #0
 8002554:	4618      	mov	r0, r3
 8002556:	4611      	mov	r1, r2
 8002558:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800255c:	653b      	str	r3, [r7, #80]	@ 0x50
 800255e:	2300      	movs	r3, #0
 8002560:	657b      	str	r3, [r7, #84]	@ 0x54
 8002562:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002566:	4642      	mov	r2, r8
 8002568:	464b      	mov	r3, r9
 800256a:	f04f 0000 	mov.w	r0, #0
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	0159      	lsls	r1, r3, #5
 8002574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002578:	0150      	lsls	r0, r2, #5
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4641      	mov	r1, r8
 8002580:	1a51      	subs	r1, r2, r1
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	4649      	mov	r1, r9
 8002586:	eb63 0301 	sbc.w	r3, r3, r1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002598:	4659      	mov	r1, fp
 800259a:	018b      	lsls	r3, r1, #6
 800259c:	4651      	mov	r1, sl
 800259e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a2:	4651      	mov	r1, sl
 80025a4:	018a      	lsls	r2, r1, #6
 80025a6:	4651      	mov	r1, sl
 80025a8:	1a54      	subs	r4, r2, r1
 80025aa:	4659      	mov	r1, fp
 80025ac:	eb63 0501 	sbc.w	r5, r3, r1
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	00eb      	lsls	r3, r5, #3
 80025ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025be:	00e2      	lsls	r2, r4, #3
 80025c0:	4614      	mov	r4, r2
 80025c2:	461d      	mov	r5, r3
 80025c4:	4643      	mov	r3, r8
 80025c6:	18e3      	adds	r3, r4, r3
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	464b      	mov	r3, r9
 80025cc:	eb45 0303 	adc.w	r3, r5, r3
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025de:	4629      	mov	r1, r5
 80025e0:	028b      	lsls	r3, r1, #10
 80025e2:	4621      	mov	r1, r4
 80025e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025e8:	4621      	mov	r1, r4
 80025ea:	028a      	lsls	r2, r1, #10
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025f4:	2200      	movs	r2, #0
 80025f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025fe:	f7fe faf3 	bl	8000be8 <__aeabi_uldivmod>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4613      	mov	r3, r2
 8002608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800260c:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x458>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0f1b      	lsrs	r3, r3, #28
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800261a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800261e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800262a:	e003      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x45c>)
 800262e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002638:	4618      	mov	r0, r3
 800263a:	37b8      	adds	r7, #184	@ 0xb8
 800263c:	46bd      	mov	sp, r7
 800263e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	00f42400 	.word	0x00f42400

0800264c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e28d      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8083 	beq.w	8002772 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800266c:	4b94      	ldr	r3, [pc, #592]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d019      	beq.n	80026ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002678:	4b91      	ldr	r3, [pc, #580]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002680:	2b08      	cmp	r3, #8
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002684:	4b8e      	ldr	r3, [pc, #568]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002690:	d00c      	beq.n	80026ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b8b      	ldr	r3, [pc, #556]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d112      	bne.n	80026c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026aa:	d10b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b84      	ldr	r3, [pc, #528]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05b      	beq.n	8002770 <HAL_RCC_OscConfig+0x124>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d157      	bne.n	8002770 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e25a      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x90>
 80026ce:	4b7c      	ldr	r3, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a7b      	ldr	r2, [pc, #492]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xcc>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0xb4>
 80026e6:	4b76      	ldr	r3, [pc, #472]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a75      	ldr	r2, [pc, #468]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a72      	ldr	r2, [pc, #456]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xcc>
 8002700:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6e      	ldr	r2, [pc, #440]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b6c      	ldr	r3, [pc, #432]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6b      	ldr	r2, [pc, #428]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7ff f97e 	bl	8001a20 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff f97a 	bl	8001a20 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e21f      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b61      	ldr	r3, [pc, #388]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xdc>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff f96a 	bl	8001a20 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff f966 	bl	8001a20 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	@ 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e20b      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	4b57      	ldr	r3, [pc, #348]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x104>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d06f      	beq.n	800285e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800277e:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d017      	beq.n	80027ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800278a:	4b4d      	ldr	r3, [pc, #308]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002792:	2b08      	cmp	r3, #8
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002796:	4b4a      	ldr	r3, [pc, #296]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b44      	ldr	r3, [pc, #272]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x186>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1d3      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4937      	ldr	r1, [pc, #220]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <HAL_RCC_OscConfig+0x278>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7ff f913 	bl	8001a20 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f90f 	bl	8001a20 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1b4      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4925      	ldr	r1, [pc, #148]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_RCC_OscConfig+0x278>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7ff f8f2 	bl	8001a20 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff f8ee 	bl	8001a20 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e193      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff f8d2 	bl	8001a20 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f8ce 	bl	8001a20 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e173      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x234>
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7ff f8bb 	bl	8001a20 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e00e      	b.n	80028cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ae:	f7ff f8b7 	bl	8001a20 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d907      	bls.n	80028cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e15c      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b8a      	ldr	r3, [pc, #552]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ea      	bne.n	80028ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8097 	beq.w	8002a14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b83      	ldr	r3, [pc, #524]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	4b7f      	ldr	r3, [pc, #508]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	4a7e      	ldr	r2, [pc, #504]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	@ 0x40
 8002906:	4b7c      	ldr	r3, [pc, #496]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b79      	ldr	r3, [pc, #484]	@ (8002afc <HAL_RCC_OscConfig+0x4b0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b76      	ldr	r3, [pc, #472]	@ (8002afc <HAL_RCC_OscConfig+0x4b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a75      	ldr	r2, [pc, #468]	@ (8002afc <HAL_RCC_OscConfig+0x4b0>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7ff f877 	bl	8001a20 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7ff f873 	bl	8001a20 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e118      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b6c      	ldr	r3, [pc, #432]	@ (8002afc <HAL_RCC_OscConfig+0x4b0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x31e>
 800295c:	4b66      	ldr	r3, [pc, #408]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a65      	ldr	r2, [pc, #404]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x358>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x340>
 8002972:	4b61      	ldr	r3, [pc, #388]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	4a60      	ldr	r2, [pc, #384]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	@ 0x70
 800297e:	4b5e      	ldr	r3, [pc, #376]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a5d      	ldr	r2, [pc, #372]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0x358>
 800298c:	4b5a      	ldr	r3, [pc, #360]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	4a59      	ldr	r2, [pc, #356]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	@ 0x70
 8002998:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a56      	ldr	r2, [pc, #344]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7ff f838 	bl	8001a20 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7ff f834 	bl	8001a20 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0d7      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	4b4b      	ldr	r3, [pc, #300]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x368>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7ff f822 	bl	8001a20 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7ff f81e 	bl	8001a20 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0c1      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f6:	4b40      	ldr	r3, [pc, #256]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80ad 	beq.w	8002b78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1e:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d060      	beq.n	8002aec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d145      	bne.n	8002abe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b33      	ldr	r3, [pc, #204]	@ (8002b00 <HAL_RCC_OscConfig+0x4b4>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fff2 	bl	8001a20 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe ffee 	bl	8001a20 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e093      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	071b      	lsls	r3, r3, #28
 8002a8a:	491b      	ldr	r1, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	4b1b      	ldr	r3, [pc, #108]	@ (8002b00 <HAL_RCC_OscConfig+0x4b4>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe ffc3 	bl	8001a20 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe ffbf 	bl	8001a20 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e064      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x452>
 8002abc:	e05c      	b.n	8002b78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <HAL_RCC_OscConfig+0x4b4>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe ffac 	bl	8001a20 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe ffa8 	bl	8001a20 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04d      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x480>
 8002aea:	e045      	b.n	8002b78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e040      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <HAL_RCC_OscConfig+0x538>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d030      	beq.n	8002b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d129      	bne.n	8002b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d122      	bne.n	8002b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d119      	bne.n	8002b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10f      	bne.n	8002b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800

08002b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e041      	b.n	8002c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fcc4 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f000 ff66 	bl	8003a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e041      	b.n	8002cbc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fe fc53 	bl	80014f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f000 ff17 	bl	8003a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_TIM_PWM_Start+0x24>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e022      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d109      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x3e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e015      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d109      	bne.n	8002d1c <HAL_TIM_PWM_Start+0x58>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e008      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07c      	b.n	8002e30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x82>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d44:	e013      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x92>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_PWM_Start+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d64:	e003      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fb3a 	bl	80043f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2d      	ldr	r2, [pc, #180]	@ (8002e38 <HAL_TIM_PWM_Start+0x174>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_PWM_Start+0xcc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002e3c <HAL_TIM_PWM_Start+0x178>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_PWM_Start+0xd0>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_TIM_PWM_Start+0xd2>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <HAL_TIM_PWM_Start+0x174>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dbc:	d01d      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e40 <HAL_TIM_PWM_Start+0x17c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <HAL_TIM_PWM_Start+0x180>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <HAL_TIM_PWM_Start+0x184>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a16      	ldr	r2, [pc, #88]	@ (8002e3c <HAL_TIM_PWM_Start+0x178>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <HAL_TIM_PWM_Start+0x188>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_TIM_PWM_Start+0x18c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d111      	bne.n	8002e1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d010      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1c:	e007      	b.n	8002e2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40000c00 	.word	0x40000c00
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40001800 	.word	0x40001800

08002e54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e041      	b.n	8002eea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f839 	bl	8002ef2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 fe00 	bl	8003a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_IC_Start+0x1a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e013      	b.n	8002f4a <HAL_TIM_IC_Start+0x42>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_IC_Start+0x2a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e00b      	b.n	8002f4a <HAL_TIM_IC_Start+0x42>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_IC_Start+0x3a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e003      	b.n	8002f4a <HAL_TIM_IC_Start+0x42>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d104      	bne.n	8002f5c <HAL_TIM_IC_Start+0x54>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e013      	b.n	8002f84 <HAL_TIM_IC_Start+0x7c>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d104      	bne.n	8002f6c <HAL_TIM_IC_Start+0x64>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e00b      	b.n	8002f84 <HAL_TIM_IC_Start+0x7c>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d104      	bne.n	8002f7c <HAL_TIM_IC_Start+0x74>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e003      	b.n	8002f84 <HAL_TIM_IC_Start+0x7c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f8c:	7bbb      	ldrb	r3, [r7, #14]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d001      	beq.n	8002f96 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e081      	b.n	800309a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Start+0x9e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_IC_Start+0xc6>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start+0xae>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_IC_Start+0xc6>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start+0xbe>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_IC_Start+0xc6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_TIM_IC_Start+0xd6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fdc:	e013      	b.n	8003006 <HAL_TIM_IC_Start+0xfe>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_IC_Start+0xe6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fec:	e00b      	b.n	8003006 <HAL_TIM_IC_Start+0xfe>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_IC_Start+0xf6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ffc:	e003      	b.n	8003006 <HAL_TIM_IC_Start+0xfe>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f001 f9ee 	bl	80043f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <HAL_TIM_IC_Start+0x19c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d022      	beq.n	8003064 <HAL_TIM_IC_Start+0x15c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003026:	d01d      	beq.n	8003064 <HAL_TIM_IC_Start+0x15c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <HAL_TIM_IC_Start+0x1a0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_TIM_IC_Start+0x15c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <HAL_TIM_IC_Start+0x1a4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_TIM_IC_Start+0x15c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1b      	ldr	r2, [pc, #108]	@ (80030b0 <HAL_TIM_IC_Start+0x1a8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_TIM_IC_Start+0x15c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1a      	ldr	r2, [pc, #104]	@ (80030b4 <HAL_TIM_IC_Start+0x1ac>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_TIM_IC_Start+0x15c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a18      	ldr	r2, [pc, #96]	@ (80030b8 <HAL_TIM_IC_Start+0x1b0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_TIM_IC_Start+0x15c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_TIM_IC_Start+0x1b4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d111      	bne.n	8003088 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b06      	cmp	r3, #6
 8003074:	d010      	beq.n	8003098 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003086:	e007      	b.n	8003098 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800
 80030b0:	40000c00 	.word	0x40000c00
 80030b4:	40010400 	.word	0x40010400
 80030b8:	40014000 	.word	0x40014000
 80030bc:	40001800 	.word	0x40001800

080030c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <HAL_TIM_IC_Start_IT+0x1e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e013      	b.n	8003106 <HAL_TIM_IC_Start_IT+0x46>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_IC_Start_IT+0x2e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e00b      	b.n	8003106 <HAL_TIM_IC_Start_IT+0x46>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_IC_Start_IT+0x3e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e003      	b.n	8003106 <HAL_TIM_IC_Start_IT+0x46>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <HAL_TIM_IC_Start_IT+0x58>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e013      	b.n	8003140 <HAL_TIM_IC_Start_IT+0x80>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d104      	bne.n	8003128 <HAL_TIM_IC_Start_IT+0x68>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e00b      	b.n	8003140 <HAL_TIM_IC_Start_IT+0x80>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b08      	cmp	r3, #8
 800312c:	d104      	bne.n	8003138 <HAL_TIM_IC_Start_IT+0x78>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e003      	b.n	8003140 <HAL_TIM_IC_Start_IT+0x80>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800313e:	b2db      	uxtb	r3, r3
 8003140:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003142:	7bbb      	ldrb	r3, [r7, #14]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003148:	7b7b      	ldrb	r3, [r7, #13]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0cc      	b.n	80032ec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_TIM_IC_Start_IT+0xa2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003160:	e013      	b.n	800318a <HAL_TIM_IC_Start_IT+0xca>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d104      	bne.n	8003172 <HAL_TIM_IC_Start_IT+0xb2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003170:	e00b      	b.n	800318a <HAL_TIM_IC_Start_IT+0xca>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d104      	bne.n	8003182 <HAL_TIM_IC_Start_IT+0xc2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003180:	e003      	b.n	800318a <HAL_TIM_IC_Start_IT+0xca>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_TIM_IC_Start_IT+0xda>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003198:	e013      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x102>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d104      	bne.n	80031aa <HAL_TIM_IC_Start_IT+0xea>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031a8:	e00b      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x102>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_IC_Start_IT+0xfa>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b8:	e003      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x102>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d841      	bhi.n	800324c <HAL_TIM_IC_Start_IT+0x18c>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <HAL_TIM_IC_Start_IT+0x110>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	08003205 	.word	0x08003205
 80031d4:	0800324d 	.word	0x0800324d
 80031d8:	0800324d 	.word	0x0800324d
 80031dc:	0800324d 	.word	0x0800324d
 80031e0:	08003217 	.word	0x08003217
 80031e4:	0800324d 	.word	0x0800324d
 80031e8:	0800324d 	.word	0x0800324d
 80031ec:	0800324d 	.word	0x0800324d
 80031f0:	08003229 	.word	0x08003229
 80031f4:	0800324d 	.word	0x0800324d
 80031f8:	0800324d 	.word	0x0800324d
 80031fc:	0800324d 	.word	0x0800324d
 8003200:	0800323b 	.word	0x0800323b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0202 	orr.w	r2, r2, #2
 8003212:	60da      	str	r2, [r3, #12]
      break;
 8003214:	e01d      	b.n	8003252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0204 	orr.w	r2, r2, #4
 8003224:	60da      	str	r2, [r3, #12]
      break;
 8003226:	e014      	b.n	8003252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	60da      	str	r2, [r3, #12]
      break;
 8003238:	e00b      	b.n	8003252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0210 	orr.w	r2, r2, #16
 8003248:	60da      	str	r2, [r3, #12]
      break;
 800324a:	e002      	b.n	8003252 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	bf00      	nop
  }

  if (status == HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d148      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2201      	movs	r2, #1
 800325e:	6839      	ldr	r1, [r7, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f001 f8c5 	bl	80043f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a22      	ldr	r2, [pc, #136]	@ (80032f4 <HAL_TIM_IC_Start_IT+0x234>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003278:	d01d      	beq.n	80032b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <HAL_TIM_IC_Start_IT+0x238>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_TIM_IC_Start_IT+0x23c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <HAL_TIM_IC_Start_IT+0x240>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <HAL_TIM_IC_Start_IT+0x244>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_TIM_IC_Start_IT+0x1f6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <HAL_TIM_IC_Start_IT+0x248>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIM_IC_Start_IT+0x1f6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a16      	ldr	r2, [pc, #88]	@ (800330c <HAL_TIM_IC_Start_IT+0x24c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d111      	bne.n	80032da <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d010      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d8:	e007      	b.n	80032ea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40010400 	.word	0x40010400
 8003308:	40014000 	.word	0x40014000
 800330c:	40001800 	.word	0x40001800

08003310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0202 	mvn.w	r2, #2
 8003344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe f852 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb7a 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fb81 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0204 	mvn.w	r2, #4
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f82c 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fb54 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fb5b 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0208 	mvn.w	r2, #8
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe f806 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fb2e 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb35 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0210 	mvn.w	r2, #16
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2208      	movs	r2, #8
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd ffe0 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fb08 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb0f 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0201 	mvn.w	r2, #1
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fae6 	bl	8003a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 f8a6 	bl	80045ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fae0 	bl	8003a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0220 	mvn.w	r2, #32
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f001 f878 	bl	80045d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_TIM_IC_ConfigChannel+0x1e>
 800350a:	2302      	movs	r3, #2
 800350c:	e088      	b.n	8003620 <HAL_TIM_IC_ConfigChannel+0x130>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800352c:	f000 fd9c 	bl	8004068 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 020c 	bic.w	r2, r2, #12
 800353e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6999      	ldr	r1, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	619a      	str	r2, [r3, #24]
 8003552:	e060      	b.n	8003616 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d11c      	bne.n	8003594 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800356a:	f000 fe20 	bl	80041ae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800357c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6999      	ldr	r1, [r3, #24]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	021a      	lsls	r2, r3, #8
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	619a      	str	r2, [r3, #24]
 8003592:	e040      	b.n	8003616 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11b      	bne.n	80035d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80035aa:	f000 fe6d 	bl	8004288 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 020c 	bic.w	r2, r2, #12
 80035bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69d9      	ldr	r1, [r3, #28]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	61da      	str	r2, [r3, #28]
 80035d0:	e021      	b.n	8003616 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d11c      	bne.n	8003612 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80035e8:	f000 fe8a 	bl	8004300 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80035fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69d9      	ldr	r1, [r3, #28]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	61da      	str	r2, [r3, #28]
 8003610:	e001      	b.n	8003616 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800361e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003642:	2302      	movs	r3, #2
 8003644:	e0ae      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	f200 809f 	bhi.w	8003794 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003656:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	08003691 	.word	0x08003691
 8003660:	08003795 	.word	0x08003795
 8003664:	08003795 	.word	0x08003795
 8003668:	08003795 	.word	0x08003795
 800366c:	080036d1 	.word	0x080036d1
 8003670:	08003795 	.word	0x08003795
 8003674:	08003795 	.word	0x08003795
 8003678:	08003795 	.word	0x08003795
 800367c:	08003713 	.word	0x08003713
 8003680:	08003795 	.word	0x08003795
 8003684:	08003795 	.word	0x08003795
 8003688:	08003795 	.word	0x08003795
 800368c:	08003753 	.word	0x08003753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 faa4 	bl	8003be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0208 	orr.w	r2, r2, #8
 80036aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6999      	ldr	r1, [r3, #24]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
      break;
 80036ce:	e064      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 faf4 	bl	8003cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
      break;
 8003710:	e043      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fb49 	bl	8003db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0208 	orr.w	r2, r2, #8
 800372c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0204 	bic.w	r2, r2, #4
 800373c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69d9      	ldr	r1, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
      break;
 8003750:	e023      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fb9d 	bl	8003e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69d9      	ldr	r1, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	021a      	lsls	r2, r3, #8
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	61da      	str	r2, [r3, #28]
      break;
 8003792:	e002      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
      break;
 8003798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e0b4      	b.n	8003932 <HAL_TIM_ConfigClockSource+0x186>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d03e      	beq.n	8003880 <HAL_TIM_ConfigClockSource+0xd4>
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003806:	f200 8087 	bhi.w	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380e:	f000 8086 	beq.w	800391e <HAL_TIM_ConfigClockSource+0x172>
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003816:	d87f      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b70      	cmp	r3, #112	@ 0x70
 800381a:	d01a      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xa6>
 800381c:	2b70      	cmp	r3, #112	@ 0x70
 800381e:	d87b      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b60      	cmp	r3, #96	@ 0x60
 8003822:	d050      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003824:	2b60      	cmp	r3, #96	@ 0x60
 8003826:	d877      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b50      	cmp	r3, #80	@ 0x50
 800382a:	d03c      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xfa>
 800382c:	2b50      	cmp	r3, #80	@ 0x50
 800382e:	d873      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d058      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d86f      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b30      	cmp	r3, #48	@ 0x30
 800383a:	d064      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b30      	cmp	r3, #48	@ 0x30
 800383e:	d86b      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d060      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d867      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05c      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 800384c:	2b10      	cmp	r3, #16
 800384e:	d05a      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 8003850:	e062      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003862:	f000 fda5 	bl	80043b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	609a      	str	r2, [r3, #8]
      break;
 800387e:	e04f      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003890:	f000 fd8e 	bl	80043b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a2:	609a      	str	r2, [r3, #8]
      break;
 80038a4:	e03c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	461a      	mov	r2, r3
 80038b4:	f000 fc4c 	bl	8004150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2150      	movs	r1, #80	@ 0x50
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fd5b 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 80038c4:	e02c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d2:	461a      	mov	r2, r3
 80038d4:	f000 fca8 	bl	8004228 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2160      	movs	r1, #96	@ 0x60
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fd4b 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 80038e4:	e01c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f2:	461a      	mov	r2, r3
 80038f4:	f000 fc2c 	bl	8004150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2140      	movs	r1, #64	@ 0x40
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fd3b 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003904:	e00c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f000 fd32 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003916:	e003      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e000      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800391e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_TIM_SlaveConfigSynchro+0x18>
 800394e:	2302      	movs	r3, #2
 8003950:	e031      	b.n	80039b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003962:	6839      	ldr	r1, [r7, #0]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 faed 	bl	8003f44 <TIM_SlaveTimer_SetConfig>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e018      	b.n	80039b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003992:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d831      	bhi.n	8003a38 <HAL_TIM_ReadCapturedValue+0x78>
 80039d4:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a39 	.word	0x08003a39
 80039e4:	08003a39 	.word	0x08003a39
 80039e8:	08003a39 	.word	0x08003a39
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a39 	.word	0x08003a39
 80039f4:	08003a39 	.word	0x08003a39
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a39 	.word	0x08003a39
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a2f 	.word	0x08003a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a16:	60fb      	str	r3, [r7, #12]

      break;
 8003a18:	e00f      	b.n	8003a3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a20:	60fb      	str	r3, [r7, #12]

      break;
 8003a22:	e00a      	b.n	8003a3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	60fb      	str	r3, [r7, #12]

      break;
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	60fb      	str	r3, [r7, #12]

      break;
 8003a36:	e000      	b.n	8003a3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a38:	bf00      	nop
  }

  return tmpreg;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a43      	ldr	r2, [pc, #268]	@ (8003bb8 <TIM_Base_SetConfig+0x120>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab6:	d00f      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a40      	ldr	r2, [pc, #256]	@ (8003bbc <TIM_Base_SetConfig+0x124>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc0 <TIM_Base_SetConfig+0x128>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc4 <TIM_Base_SetConfig+0x12c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8003bc8 <TIM_Base_SetConfig+0x130>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d108      	bne.n	8003aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a32      	ldr	r2, [pc, #200]	@ (8003bb8 <TIM_Base_SetConfig+0x120>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02b      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af8:	d027      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	@ (8003bbc <TIM_Base_SetConfig+0x124>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d023      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc0 <TIM_Base_SetConfig+0x128>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01f      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <TIM_Base_SetConfig+0x12c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01b      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <TIM_Base_SetConfig+0x130>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d017      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <TIM_Base_SetConfig+0x134>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd0 <TIM_Base_SetConfig+0x138>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00f      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a29      	ldr	r2, [pc, #164]	@ (8003bd4 <TIM_Base_SetConfig+0x13c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00b      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a28      	ldr	r2, [pc, #160]	@ (8003bd8 <TIM_Base_SetConfig+0x140>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a27      	ldr	r2, [pc, #156]	@ (8003bdc <TIM_Base_SetConfig+0x144>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a26      	ldr	r2, [pc, #152]	@ (8003be0 <TIM_Base_SetConfig+0x148>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb8 <TIM_Base_SetConfig+0x120>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_Base_SetConfig+0xf2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a10      	ldr	r2, [pc, #64]	@ (8003bc8 <TIM_Base_SetConfig+0x130>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d103      	bne.n	8003b92 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40010400 	.word	0x40010400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800
 8003bd8:	40001800 	.word	0x40001800
 8003bdc:	40001c00 	.word	0x40001c00
 8003be0:	40002000 	.word	0x40002000

08003be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f023 0201 	bic.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a20      	ldr	r2, [pc, #128]	@ (8003cbc <TIM_OC1_SetConfig+0xd8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_OC1_SetConfig+0x64>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <TIM_OC1_SetConfig+0xdc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10c      	bne.n	8003c62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0308 	bic.w	r3, r3, #8
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <TIM_OC1_SetConfig+0xd8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_OC1_SetConfig+0x8e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a14      	ldr	r2, [pc, #80]	@ (8003cc0 <TIM_OC1_SetConfig+0xdc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d111      	bne.n	8003c96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f023 0210 	bic.w	r2, r3, #16
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0320 	bic.w	r3, r3, #32
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a22      	ldr	r2, [pc, #136]	@ (8003da8 <TIM_OC2_SetConfig+0xe4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC2_SetConfig+0x68>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a21      	ldr	r2, [pc, #132]	@ (8003dac <TIM_OC2_SetConfig+0xe8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	@ (8003da8 <TIM_OC2_SetConfig+0xe4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_OC2_SetConfig+0x94>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <TIM_OC2_SetConfig+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d113      	bne.n	8003d80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40010400 	.word	0x40010400

08003db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a21      	ldr	r2, [pc, #132]	@ (8003e90 <TIM_OC3_SetConfig+0xe0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC3_SetConfig+0x66>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a20      	ldr	r2, [pc, #128]	@ (8003e94 <TIM_OC3_SetConfig+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <TIM_OC3_SetConfig+0xe0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x92>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	@ (8003e94 <TIM_OC3_SetConfig+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40010400 	.word	0x40010400

08003e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <TIM_OC4_SetConfig+0xa4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC4_SetConfig+0x68>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a11      	ldr	r2, [pc, #68]	@ (8003f40 <TIM_OC4_SetConfig+0xa8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d109      	bne.n	8003f14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400

08003f44 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f60:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b70      	cmp	r3, #112	@ 0x70
 8003f8c:	d01a      	beq.n	8003fc4 <TIM_SlaveTimer_SetConfig+0x80>
 8003f8e:	2b70      	cmp	r3, #112	@ 0x70
 8003f90:	d860      	bhi.n	8004054 <TIM_SlaveTimer_SetConfig+0x110>
 8003f92:	2b60      	cmp	r3, #96	@ 0x60
 8003f94:	d054      	beq.n	8004040 <TIM_SlaveTimer_SetConfig+0xfc>
 8003f96:	2b60      	cmp	r3, #96	@ 0x60
 8003f98:	d85c      	bhi.n	8004054 <TIM_SlaveTimer_SetConfig+0x110>
 8003f9a:	2b50      	cmp	r3, #80	@ 0x50
 8003f9c:	d046      	beq.n	800402c <TIM_SlaveTimer_SetConfig+0xe8>
 8003f9e:	2b50      	cmp	r3, #80	@ 0x50
 8003fa0:	d858      	bhi.n	8004054 <TIM_SlaveTimer_SetConfig+0x110>
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d019      	beq.n	8003fda <TIM_SlaveTimer_SetConfig+0x96>
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d854      	bhi.n	8004054 <TIM_SlaveTimer_SetConfig+0x110>
 8003faa:	2b30      	cmp	r3, #48	@ 0x30
 8003fac:	d055      	beq.n	800405a <TIM_SlaveTimer_SetConfig+0x116>
 8003fae:	2b30      	cmp	r3, #48	@ 0x30
 8003fb0:	d850      	bhi.n	8004054 <TIM_SlaveTimer_SetConfig+0x110>
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d051      	beq.n	800405a <TIM_SlaveTimer_SetConfig+0x116>
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d84c      	bhi.n	8004054 <TIM_SlaveTimer_SetConfig+0x110>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04d      	beq.n	800405a <TIM_SlaveTimer_SetConfig+0x116>
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d04b      	beq.n	800405a <TIM_SlaveTimer_SetConfig+0x116>
 8003fc2:	e047      	b.n	8004054 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd4:	f000 f9ec 	bl	80043b0 <TIM_ETR_SetConfig>
      break;
 8003fd8:	e040      	b.n	800405c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d101      	bne.n	8003fe6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e03b      	b.n	800405e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800400c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
      break;
 800402a:	e017      	b.n	800405c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004038:	461a      	mov	r2, r3
 800403a:	f000 f889 	bl	8004150 <TIM_TI1_ConfigInputStage>
      break;
 800403e:	e00d      	b.n	800405c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800404c:	461a      	mov	r2, r3
 800404e:	f000 f8eb 	bl	8004228 <TIM_TI2_ConfigInputStage>
      break;
 8004052:	e003      	b.n	800405c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
      break;
 8004058:	e000      	b.n	800405c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800405a:	bf00      	nop
  }

  return status;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f023 0201 	bic.w	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a28      	ldr	r2, [pc, #160]	@ (8004134 <TIM_TI1_SetConfig+0xcc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01b      	beq.n	80040ce <TIM_TI1_SetConfig+0x66>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409c:	d017      	beq.n	80040ce <TIM_TI1_SetConfig+0x66>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a25      	ldr	r2, [pc, #148]	@ (8004138 <TIM_TI1_SetConfig+0xd0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <TIM_TI1_SetConfig+0x66>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a24      	ldr	r2, [pc, #144]	@ (800413c <TIM_TI1_SetConfig+0xd4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <TIM_TI1_SetConfig+0x66>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a23      	ldr	r2, [pc, #140]	@ (8004140 <TIM_TI1_SetConfig+0xd8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_TI1_SetConfig+0x66>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a22      	ldr	r2, [pc, #136]	@ (8004144 <TIM_TI1_SetConfig+0xdc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <TIM_TI1_SetConfig+0x66>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a21      	ldr	r2, [pc, #132]	@ (8004148 <TIM_TI1_SetConfig+0xe0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_TI1_SetConfig+0x66>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a20      	ldr	r2, [pc, #128]	@ (800414c <TIM_TI1_SetConfig+0xe4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <TIM_TI1_SetConfig+0x6a>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <TIM_TI1_SetConfig+0x6c>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	e003      	b.n	80040f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f023 030a 	bic.w	r3, r3, #10
 800410c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f003 030a 	and.w	r3, r3, #10
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010000 	.word	0x40010000
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40010400 	.word	0x40010400
 8004148:	40014000 	.word	0x40014000
 800414c:	40001800 	.word	0x40001800

08004150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0201 	bic.w	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 030a 	bic.w	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0210 	bic.w	r2, r3, #16
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	031b      	lsls	r3, r3, #12
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004264:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f023 0303 	bic.w	r3, r3, #3
 80042b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80042d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	621a      	str	r2, [r3, #32]
}
 80042f4:	bf00      	nop
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800433e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	031b      	lsls	r3, r3, #12
 8004344:	b29b      	uxth	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004352:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	031b      	lsls	r3, r3, #12
 8004358:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	f043 0307 	orr.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	021a      	lsls	r2, r3, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2201      	movs	r2, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1a      	ldr	r2, [r3, #32]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1a      	ldr	r2, [r3, #32]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004450:	2302      	movs	r3, #2
 8004452:	e05a      	b.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a21      	ldr	r2, [pc, #132]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a0:	d01d      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	@ (800451c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a17      	ldr	r2, [pc, #92]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a15      	ldr	r2, [pc, #84]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10c      	bne.n	80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40001800 	.word	0x40001800

08004534 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e03d      	b.n	80045cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e042      	b.n	8004698 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd f810 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	@ 0x24
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f973 	bl	8004930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	@ 0x28
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d175      	bne.n	80047ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Transmit+0x2c>
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e06e      	b.n	80047ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2221      	movs	r2, #33	@ 0x21
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046de:	f7fd f99f 	bl	8001a20 <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	88fa      	ldrh	r2, [r7, #6]
 80046ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f8:	d108      	bne.n	800470c <HAL_UART_Transmit+0x6c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e003      	b.n	8004714 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004714:	e02e      	b.n	8004774 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	2180      	movs	r1, #128	@ 0x80
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f848 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e03a      	b.n	80047ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	3302      	adds	r3, #2
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e007      	b.n	8004766 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1cb      	bne.n	8004716 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	2140      	movs	r1, #64	@ 0x40
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f814 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e006      	b.n	80047ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c6:	e03b      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d037      	beq.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fd f926 	bl	8001a20 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	6a3a      	ldr	r2, [r7, #32]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e03a      	b.n	8004860 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d023      	beq.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b80      	cmp	r3, #128	@ 0x80
 80047fc:	d020      	beq.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b40      	cmp	r3, #64	@ 0x40
 8004802:	d01d      	beq.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b08      	cmp	r3, #8
 8004810:	d116      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f81d 	bl	8004868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2208      	movs	r2, #8
 8004832:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e00f      	b.n	8004860 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	429a      	cmp	r2, r3
 800485c:	d0b4      	beq.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b095      	sub	sp, #84	@ 0x54
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004890:	643a      	str	r2, [r7, #64]	@ 0x40
 8004892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800489e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d119      	bne.n	8004914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f023 0310 	bic.w	r3, r3, #16
 80048f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004900:	61ba      	str	r2, [r7, #24]
 8004902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6979      	ldr	r1, [r7, #20]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	613b      	str	r3, [r7, #16]
   return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004922:	bf00      	nop
 8004924:	3754      	adds	r7, #84	@ 0x54
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004934:	b0c0      	sub	sp, #256	@ 0x100
 8004936:	af00      	add	r7, sp, #0
 8004938:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	68d9      	ldr	r1, [r3, #12]
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	ea40 0301 	orr.w	r3, r0, r1
 8004958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	431a      	orrs	r2, r3
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	431a      	orrs	r2, r3
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004988:	f021 010c 	bic.w	r1, r1, #12
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004996:	430b      	orrs	r3, r1
 8004998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049aa:	6999      	ldr	r1, [r3, #24]
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	ea40 0301 	orr.w	r3, r0, r1
 80049b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b8f      	ldr	r3, [pc, #572]	@ (8004bfc <UART_SetConfig+0x2cc>)
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d005      	beq.n	80049d0 <UART_SetConfig+0xa0>
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004c00 <UART_SetConfig+0x2d0>)
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d104      	bne.n	80049da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7fd fbf8 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80049d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049d8:	e003      	b.n	80049e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049da:	f7fd fbdf 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80049de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ec:	f040 810c 	bne.w	8004c08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a02:	4622      	mov	r2, r4
 8004a04:	462b      	mov	r3, r5
 8004a06:	1891      	adds	r1, r2, r2
 8004a08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a12:	4621      	mov	r1, r4
 8004a14:	eb12 0801 	adds.w	r8, r2, r1
 8004a18:	4629      	mov	r1, r5
 8004a1a:	eb43 0901 	adc.w	r9, r3, r1
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a32:	4690      	mov	r8, r2
 8004a34:	4699      	mov	r9, r3
 8004a36:	4623      	mov	r3, r4
 8004a38:	eb18 0303 	adds.w	r3, r8, r3
 8004a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a40:	462b      	mov	r3, r5
 8004a42:	eb49 0303 	adc.w	r3, r9, r3
 8004a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a5e:	460b      	mov	r3, r1
 8004a60:	18db      	adds	r3, r3, r3
 8004a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a64:	4613      	mov	r3, r2
 8004a66:	eb42 0303 	adc.w	r3, r2, r3
 8004a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a74:	f7fc f8b8 	bl	8000be8 <__aeabi_uldivmod>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4b61      	ldr	r3, [pc, #388]	@ (8004c04 <UART_SetConfig+0x2d4>)
 8004a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	011c      	lsls	r4, r3, #4
 8004a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	1891      	adds	r1, r2, r2
 8004a9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004aa0:	415b      	adcs	r3, r3
 8004aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	eb12 0a01 	adds.w	sl, r2, r1
 8004aae:	4649      	mov	r1, r9
 8004ab0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ac0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ac8:	4692      	mov	sl, r2
 8004aca:	469b      	mov	fp, r3
 8004acc:	4643      	mov	r3, r8
 8004ace:	eb1a 0303 	adds.w	r3, sl, r3
 8004ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8004adc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004af0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004af4:	460b      	mov	r3, r1
 8004af6:	18db      	adds	r3, r3, r3
 8004af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004afa:	4613      	mov	r3, r2
 8004afc:	eb42 0303 	adc.w	r3, r2, r3
 8004b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b0a:	f7fc f86d 	bl	8000be8 <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	4b3b      	ldr	r3, [pc, #236]	@ (8004c04 <UART_SetConfig+0x2d4>)
 8004b16:	fba3 2301 	umull	r2, r3, r3, r1
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2264      	movs	r2, #100	@ 0x64
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	1acb      	subs	r3, r1, r3
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b2a:	4b36      	ldr	r3, [pc, #216]	@ (8004c04 <UART_SetConfig+0x2d4>)
 8004b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b38:	441c      	add	r4, r3
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b54:	415b      	adcs	r3, r3
 8004b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	1851      	adds	r1, r2, r1
 8004b60:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b62:	4649      	mov	r1, r9
 8004b64:	414b      	adcs	r3, r1
 8004b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b74:	4659      	mov	r1, fp
 8004b76:	00cb      	lsls	r3, r1, #3
 8004b78:	4651      	mov	r1, sl
 8004b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7e:	4651      	mov	r1, sl
 8004b80:	00ca      	lsls	r2, r1, #3
 8004b82:	4610      	mov	r0, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	4642      	mov	r2, r8
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b90:	464b      	mov	r3, r9
 8004b92:	460a      	mov	r2, r1
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	18db      	adds	r3, r3, r3
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	eb42 0303 	adc.w	r3, r2, r3
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bc6:	f7fc f80f 	bl	8000be8 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <UART_SetConfig+0x2d4>)
 8004bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2164      	movs	r1, #100	@ 0x64
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	3332      	adds	r3, #50	@ 0x32
 8004be2:	4a08      	ldr	r2, [pc, #32]	@ (8004c04 <UART_SetConfig+0x2d4>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	f003 0207 	and.w	r2, r3, #7
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4422      	add	r2, r4
 8004bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bf8:	e106      	b.n	8004e08 <UART_SetConfig+0x4d8>
 8004bfa:	bf00      	nop
 8004bfc:	40011000 	.word	0x40011000
 8004c00:	40011400 	.word	0x40011400
 8004c04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	1891      	adds	r1, r2, r2
 8004c20:	6239      	str	r1, [r7, #32]
 8004c22:	415b      	adcs	r3, r3
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	1854      	adds	r4, r2, r1
 8004c2e:	4649      	mov	r1, r9
 8004c30:	eb43 0501 	adc.w	r5, r3, r1
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	00eb      	lsls	r3, r5, #3
 8004c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c42:	00e2      	lsls	r2, r4, #3
 8004c44:	4614      	mov	r4, r2
 8004c46:	461d      	mov	r5, r3
 8004c48:	4643      	mov	r3, r8
 8004c4a:	18e3      	adds	r3, r4, r3
 8004c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c50:	464b      	mov	r3, r9
 8004c52:	eb45 0303 	adc.w	r3, r5, r3
 8004c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c76:	4629      	mov	r1, r5
 8004c78:	008b      	lsls	r3, r1, #2
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c80:	4621      	mov	r1, r4
 8004c82:	008a      	lsls	r2, r1, #2
 8004c84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c88:	f7fb ffae 	bl	8000be8 <__aeabi_uldivmod>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4b60      	ldr	r3, [pc, #384]	@ (8004e14 <UART_SetConfig+0x4e4>)
 8004c92:	fba3 2302 	umull	r2, r3, r3, r2
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	011c      	lsls	r4, r3, #4
 8004c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ca4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ca8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	1891      	adds	r1, r2, r2
 8004cb2:	61b9      	str	r1, [r7, #24]
 8004cb4:	415b      	adcs	r3, r3
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	1851      	adds	r1, r2, r1
 8004cc0:	6139      	str	r1, [r7, #16]
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	414b      	adcs	r3, r1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	00cb      	lsls	r3, r1, #3
 8004cd8:	4651      	mov	r1, sl
 8004cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cde:	4651      	mov	r1, sl
 8004ce0:	00ca      	lsls	r2, r1, #3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4642      	mov	r2, r8
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	460a      	mov	r2, r1
 8004cf4:	eb42 0303 	adc.w	r3, r2, r3
 8004cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d14:	4649      	mov	r1, r9
 8004d16:	008b      	lsls	r3, r1, #2
 8004d18:	4641      	mov	r1, r8
 8004d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d1e:	4641      	mov	r1, r8
 8004d20:	008a      	lsls	r2, r1, #2
 8004d22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d26:	f7fb ff5f 	bl	8000be8 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4b38      	ldr	r3, [pc, #224]	@ (8004e14 <UART_SetConfig+0x4e4>)
 8004d32:	fba3 2301 	umull	r2, r3, r3, r1
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	2264      	movs	r2, #100	@ 0x64
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	1acb      	subs	r3, r1, r3
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	3332      	adds	r3, #50	@ 0x32
 8004d44:	4a33      	ldr	r2, [pc, #204]	@ (8004e14 <UART_SetConfig+0x4e4>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d50:	441c      	add	r4, r3
 8004d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d56:	2200      	movs	r2, #0
 8004d58:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d60:	4642      	mov	r2, r8
 8004d62:	464b      	mov	r3, r9
 8004d64:	1891      	adds	r1, r2, r2
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d70:	4641      	mov	r1, r8
 8004d72:	1851      	adds	r1, r2, r1
 8004d74:	6039      	str	r1, [r7, #0]
 8004d76:	4649      	mov	r1, r9
 8004d78:	414b      	adcs	r3, r1
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d88:	4659      	mov	r1, fp
 8004d8a:	00cb      	lsls	r3, r1, #3
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d92:	4651      	mov	r1, sl
 8004d94:	00ca      	lsls	r2, r1, #3
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004da2:	464b      	mov	r3, r9
 8004da4:	460a      	mov	r2, r1
 8004da6:	eb42 0303 	adc.w	r3, r2, r3
 8004daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004db6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	008b      	lsls	r3, r1, #2
 8004dc8:	4641      	mov	r1, r8
 8004dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dce:	4641      	mov	r1, r8
 8004dd0:	008a      	lsls	r2, r1, #2
 8004dd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dd6:	f7fb ff07 	bl	8000be8 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <UART_SetConfig+0x4e4>)
 8004de0:	fba3 1302 	umull	r1, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	2164      	movs	r1, #100	@ 0x64
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	3332      	adds	r3, #50	@ 0x32
 8004df2:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <UART_SetConfig+0x4e4>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	f003 020f 	and.w	r2, r3, #15
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4422      	add	r2, r4
 8004e06:	609a      	str	r2, [r3, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e14:	51eb851f 	.word	0x51eb851f

08004e18 <__cvt>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	ec57 6b10 	vmov	r6, r7, d0
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	460c      	mov	r4, r1
 8004e24:	4619      	mov	r1, r3
 8004e26:	463b      	mov	r3, r7
 8004e28:	bfbb      	ittet	lt
 8004e2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004e2e:	461f      	movlt	r7, r3
 8004e30:	2300      	movge	r3, #0
 8004e32:	232d      	movlt	r3, #45	@ 0x2d
 8004e34:	700b      	strb	r3, [r1, #0]
 8004e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004e3c:	4691      	mov	r9, r2
 8004e3e:	f023 0820 	bic.w	r8, r3, #32
 8004e42:	bfbc      	itt	lt
 8004e44:	4632      	movlt	r2, r6
 8004e46:	4616      	movlt	r6, r2
 8004e48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e4c:	d005      	beq.n	8004e5a <__cvt+0x42>
 8004e4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e52:	d100      	bne.n	8004e56 <__cvt+0x3e>
 8004e54:	3401      	adds	r4, #1
 8004e56:	2102      	movs	r1, #2
 8004e58:	e000      	b.n	8004e5c <__cvt+0x44>
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	ab03      	add	r3, sp, #12
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	ab02      	add	r3, sp, #8
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	ec47 6b10 	vmov	d0, r6, r7
 8004e68:	4653      	mov	r3, sl
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	f000 fe5c 	bl	8005b28 <_dtoa_r>
 8004e70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e74:	4605      	mov	r5, r0
 8004e76:	d119      	bne.n	8004eac <__cvt+0x94>
 8004e78:	f019 0f01 	tst.w	r9, #1
 8004e7c:	d00e      	beq.n	8004e9c <__cvt+0x84>
 8004e7e:	eb00 0904 	add.w	r9, r0, r4
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4630      	mov	r0, r6
 8004e88:	4639      	mov	r1, r7
 8004e8a:	f7fb fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 8004e8e:	b108      	cbz	r0, 8004e94 <__cvt+0x7c>
 8004e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e94:	2230      	movs	r2, #48	@ 0x30
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	454b      	cmp	r3, r9
 8004e9a:	d31e      	bcc.n	8004eda <__cvt+0xc2>
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ea0:	1b5b      	subs	r3, r3, r5
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	b004      	add	sp, #16
 8004ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004eb0:	eb00 0904 	add.w	r9, r0, r4
 8004eb4:	d1e5      	bne.n	8004e82 <__cvt+0x6a>
 8004eb6:	7803      	ldrb	r3, [r0, #0]
 8004eb8:	2b30      	cmp	r3, #48	@ 0x30
 8004eba:	d10a      	bne.n	8004ed2 <__cvt+0xba>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	f7fb fe20 	bl	8000b08 <__aeabi_dcmpeq>
 8004ec8:	b918      	cbnz	r0, 8004ed2 <__cvt+0xba>
 8004eca:	f1c4 0401 	rsb	r4, r4, #1
 8004ece:	f8ca 4000 	str.w	r4, [sl]
 8004ed2:	f8da 3000 	ldr.w	r3, [sl]
 8004ed6:	4499      	add	r9, r3
 8004ed8:	e7d3      	b.n	8004e82 <__cvt+0x6a>
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	9103      	str	r1, [sp, #12]
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	e7d9      	b.n	8004e96 <__cvt+0x7e>

08004ee2 <__exponent>:
 8004ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ee4:	2900      	cmp	r1, #0
 8004ee6:	bfba      	itte	lt
 8004ee8:	4249      	neglt	r1, r1
 8004eea:	232d      	movlt	r3, #45	@ 0x2d
 8004eec:	232b      	movge	r3, #43	@ 0x2b
 8004eee:	2909      	cmp	r1, #9
 8004ef0:	7002      	strb	r2, [r0, #0]
 8004ef2:	7043      	strb	r3, [r0, #1]
 8004ef4:	dd29      	ble.n	8004f4a <__exponent+0x68>
 8004ef6:	f10d 0307 	add.w	r3, sp, #7
 8004efa:	461d      	mov	r5, r3
 8004efc:	270a      	movs	r7, #10
 8004efe:	461a      	mov	r2, r3
 8004f00:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f04:	fb07 1416 	mls	r4, r7, r6, r1
 8004f08:	3430      	adds	r4, #48	@ 0x30
 8004f0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f0e:	460c      	mov	r4, r1
 8004f10:	2c63      	cmp	r4, #99	@ 0x63
 8004f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f16:	4631      	mov	r1, r6
 8004f18:	dcf1      	bgt.n	8004efe <__exponent+0x1c>
 8004f1a:	3130      	adds	r1, #48	@ 0x30
 8004f1c:	1e94      	subs	r4, r2, #2
 8004f1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f22:	1c41      	adds	r1, r0, #1
 8004f24:	4623      	mov	r3, r4
 8004f26:	42ab      	cmp	r3, r5
 8004f28:	d30a      	bcc.n	8004f40 <__exponent+0x5e>
 8004f2a:	f10d 0309 	add.w	r3, sp, #9
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	42ac      	cmp	r4, r5
 8004f32:	bf88      	it	hi
 8004f34:	2300      	movhi	r3, #0
 8004f36:	3302      	adds	r3, #2
 8004f38:	4403      	add	r3, r0
 8004f3a:	1a18      	subs	r0, r3, r0
 8004f3c:	b003      	add	sp, #12
 8004f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f48:	e7ed      	b.n	8004f26 <__exponent+0x44>
 8004f4a:	2330      	movs	r3, #48	@ 0x30
 8004f4c:	3130      	adds	r1, #48	@ 0x30
 8004f4e:	7083      	strb	r3, [r0, #2]
 8004f50:	70c1      	strb	r1, [r0, #3]
 8004f52:	1d03      	adds	r3, r0, #4
 8004f54:	e7f1      	b.n	8004f3a <__exponent+0x58>
	...

08004f58 <_printf_float>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	b08d      	sub	sp, #52	@ 0x34
 8004f5e:	460c      	mov	r4, r1
 8004f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004f64:	4616      	mov	r6, r2
 8004f66:	461f      	mov	r7, r3
 8004f68:	4605      	mov	r5, r0
 8004f6a:	f000 fcdb 	bl	8005924 <_localeconv_r>
 8004f6e:	6803      	ldr	r3, [r0, #0]
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fb f99c 	bl	80002b0 <strlen>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f80:	9005      	str	r0, [sp, #20]
 8004f82:	3307      	adds	r3, #7
 8004f84:	f023 0307 	bic.w	r3, r3, #7
 8004f88:	f103 0208 	add.w	r2, r3, #8
 8004f8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f90:	f8d4 b000 	ldr.w	fp, [r4]
 8004f94:	f8c8 2000 	str.w	r2, [r8]
 8004f98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fa0:	9307      	str	r3, [sp, #28]
 8004fa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fae:	4b9c      	ldr	r3, [pc, #624]	@ (8005220 <_printf_float+0x2c8>)
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	f7fb fdda 	bl	8000b6c <__aeabi_dcmpun>
 8004fb8:	bb70      	cbnz	r0, 8005018 <_printf_float+0xc0>
 8004fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fbe:	4b98      	ldr	r3, [pc, #608]	@ (8005220 <_printf_float+0x2c8>)
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc4:	f7fb fdb4 	bl	8000b30 <__aeabi_dcmple>
 8004fc8:	bb30      	cbnz	r0, 8005018 <_printf_float+0xc0>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4640      	mov	r0, r8
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	f7fb fda3 	bl	8000b1c <__aeabi_dcmplt>
 8004fd6:	b110      	cbz	r0, 8004fde <_printf_float+0x86>
 8004fd8:	232d      	movs	r3, #45	@ 0x2d
 8004fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fde:	4a91      	ldr	r2, [pc, #580]	@ (8005224 <_printf_float+0x2cc>)
 8004fe0:	4b91      	ldr	r3, [pc, #580]	@ (8005228 <_printf_float+0x2d0>)
 8004fe2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004fe6:	bf8c      	ite	hi
 8004fe8:	4690      	movhi	r8, r2
 8004fea:	4698      	movls	r8, r3
 8004fec:	2303      	movs	r3, #3
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	f02b 0304 	bic.w	r3, fp, #4
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	f04f 0900 	mov.w	r9, #0
 8004ffa:	9700      	str	r7, [sp, #0]
 8004ffc:	4633      	mov	r3, r6
 8004ffe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005000:	4621      	mov	r1, r4
 8005002:	4628      	mov	r0, r5
 8005004:	f000 f9d2 	bl	80053ac <_printf_common>
 8005008:	3001      	adds	r0, #1
 800500a:	f040 808d 	bne.w	8005128 <_printf_float+0x1d0>
 800500e:	f04f 30ff 	mov.w	r0, #4294967295
 8005012:	b00d      	add	sp, #52	@ 0x34
 8005014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	4640      	mov	r0, r8
 800501e:	4649      	mov	r1, r9
 8005020:	f7fb fda4 	bl	8000b6c <__aeabi_dcmpun>
 8005024:	b140      	cbz	r0, 8005038 <_printf_float+0xe0>
 8005026:	464b      	mov	r3, r9
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfbc      	itt	lt
 800502c:	232d      	movlt	r3, #45	@ 0x2d
 800502e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005032:	4a7e      	ldr	r2, [pc, #504]	@ (800522c <_printf_float+0x2d4>)
 8005034:	4b7e      	ldr	r3, [pc, #504]	@ (8005230 <_printf_float+0x2d8>)
 8005036:	e7d4      	b.n	8004fe2 <_printf_float+0x8a>
 8005038:	6863      	ldr	r3, [r4, #4]
 800503a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800503e:	9206      	str	r2, [sp, #24]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	d13b      	bne.n	80050bc <_printf_float+0x164>
 8005044:	2306      	movs	r3, #6
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800504c:	2300      	movs	r3, #0
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	9303      	str	r3, [sp, #12]
 8005052:	ab0a      	add	r3, sp, #40	@ 0x28
 8005054:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005058:	ab09      	add	r3, sp, #36	@ 0x24
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	6861      	ldr	r1, [r4, #4]
 800505e:	ec49 8b10 	vmov	d0, r8, r9
 8005062:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005066:	4628      	mov	r0, r5
 8005068:	f7ff fed6 	bl	8004e18 <__cvt>
 800506c:	9b06      	ldr	r3, [sp, #24]
 800506e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005070:	2b47      	cmp	r3, #71	@ 0x47
 8005072:	4680      	mov	r8, r0
 8005074:	d129      	bne.n	80050ca <_printf_float+0x172>
 8005076:	1cc8      	adds	r0, r1, #3
 8005078:	db02      	blt.n	8005080 <_printf_float+0x128>
 800507a:	6863      	ldr	r3, [r4, #4]
 800507c:	4299      	cmp	r1, r3
 800507e:	dd41      	ble.n	8005104 <_printf_float+0x1ac>
 8005080:	f1aa 0a02 	sub.w	sl, sl, #2
 8005084:	fa5f fa8a 	uxtb.w	sl, sl
 8005088:	3901      	subs	r1, #1
 800508a:	4652      	mov	r2, sl
 800508c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005090:	9109      	str	r1, [sp, #36]	@ 0x24
 8005092:	f7ff ff26 	bl	8004ee2 <__exponent>
 8005096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005098:	1813      	adds	r3, r2, r0
 800509a:	2a01      	cmp	r2, #1
 800509c:	4681      	mov	r9, r0
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	dc02      	bgt.n	80050a8 <_printf_float+0x150>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	07d2      	lsls	r2, r2, #31
 80050a6:	d501      	bpl.n	80050ac <_printf_float+0x154>
 80050a8:	3301      	adds	r3, #1
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0a2      	beq.n	8004ffa <_printf_float+0xa2>
 80050b4:	232d      	movs	r3, #45	@ 0x2d
 80050b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ba:	e79e      	b.n	8004ffa <_printf_float+0xa2>
 80050bc:	9a06      	ldr	r2, [sp, #24]
 80050be:	2a47      	cmp	r2, #71	@ 0x47
 80050c0:	d1c2      	bne.n	8005048 <_printf_float+0xf0>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1c0      	bne.n	8005048 <_printf_float+0xf0>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e7bd      	b.n	8005046 <_printf_float+0xee>
 80050ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050ce:	d9db      	bls.n	8005088 <_printf_float+0x130>
 80050d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80050d4:	d118      	bne.n	8005108 <_printf_float+0x1b0>
 80050d6:	2900      	cmp	r1, #0
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	dd0b      	ble.n	80050f4 <_printf_float+0x19c>
 80050dc:	6121      	str	r1, [r4, #16]
 80050de:	b913      	cbnz	r3, 80050e6 <_printf_float+0x18e>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	07d0      	lsls	r0, r2, #31
 80050e4:	d502      	bpl.n	80050ec <_printf_float+0x194>
 80050e6:	3301      	adds	r3, #1
 80050e8:	440b      	add	r3, r1
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80050ee:	f04f 0900 	mov.w	r9, #0
 80050f2:	e7db      	b.n	80050ac <_printf_float+0x154>
 80050f4:	b913      	cbnz	r3, 80050fc <_printf_float+0x1a4>
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	07d2      	lsls	r2, r2, #31
 80050fa:	d501      	bpl.n	8005100 <_printf_float+0x1a8>
 80050fc:	3302      	adds	r3, #2
 80050fe:	e7f4      	b.n	80050ea <_printf_float+0x192>
 8005100:	2301      	movs	r3, #1
 8005102:	e7f2      	b.n	80050ea <_printf_float+0x192>
 8005104:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800510a:	4299      	cmp	r1, r3
 800510c:	db05      	blt.n	800511a <_printf_float+0x1c2>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	6121      	str	r1, [r4, #16]
 8005112:	07d8      	lsls	r0, r3, #31
 8005114:	d5ea      	bpl.n	80050ec <_printf_float+0x194>
 8005116:	1c4b      	adds	r3, r1, #1
 8005118:	e7e7      	b.n	80050ea <_printf_float+0x192>
 800511a:	2900      	cmp	r1, #0
 800511c:	bfd4      	ite	le
 800511e:	f1c1 0202 	rsble	r2, r1, #2
 8005122:	2201      	movgt	r2, #1
 8005124:	4413      	add	r3, r2
 8005126:	e7e0      	b.n	80050ea <_printf_float+0x192>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	055a      	lsls	r2, r3, #21
 800512c:	d407      	bmi.n	800513e <_printf_float+0x1e6>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	4642      	mov	r2, r8
 8005132:	4631      	mov	r1, r6
 8005134:	4628      	mov	r0, r5
 8005136:	47b8      	blx	r7
 8005138:	3001      	adds	r0, #1
 800513a:	d12b      	bne.n	8005194 <_printf_float+0x23c>
 800513c:	e767      	b.n	800500e <_printf_float+0xb6>
 800513e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005142:	f240 80dd 	bls.w	8005300 <_printf_float+0x3a8>
 8005146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800514a:	2200      	movs	r2, #0
 800514c:	2300      	movs	r3, #0
 800514e:	f7fb fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 8005152:	2800      	cmp	r0, #0
 8005154:	d033      	beq.n	80051be <_printf_float+0x266>
 8005156:	4a37      	ldr	r2, [pc, #220]	@ (8005234 <_printf_float+0x2dc>)
 8005158:	2301      	movs	r3, #1
 800515a:	4631      	mov	r1, r6
 800515c:	4628      	mov	r0, r5
 800515e:	47b8      	blx	r7
 8005160:	3001      	adds	r0, #1
 8005162:	f43f af54 	beq.w	800500e <_printf_float+0xb6>
 8005166:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800516a:	4543      	cmp	r3, r8
 800516c:	db02      	blt.n	8005174 <_printf_float+0x21c>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	07d8      	lsls	r0, r3, #31
 8005172:	d50f      	bpl.n	8005194 <_printf_float+0x23c>
 8005174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	f43f af45 	beq.w	800500e <_printf_float+0xb6>
 8005184:	f04f 0900 	mov.w	r9, #0
 8005188:	f108 38ff 	add.w	r8, r8, #4294967295
 800518c:	f104 0a1a 	add.w	sl, r4, #26
 8005190:	45c8      	cmp	r8, r9
 8005192:	dc09      	bgt.n	80051a8 <_printf_float+0x250>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	079b      	lsls	r3, r3, #30
 8005198:	f100 8103 	bmi.w	80053a2 <_printf_float+0x44a>
 800519c:	68e0      	ldr	r0, [r4, #12]
 800519e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051a0:	4298      	cmp	r0, r3
 80051a2:	bfb8      	it	lt
 80051a4:	4618      	movlt	r0, r3
 80051a6:	e734      	b.n	8005012 <_printf_float+0xba>
 80051a8:	2301      	movs	r3, #1
 80051aa:	4652      	mov	r2, sl
 80051ac:	4631      	mov	r1, r6
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f af2b 	beq.w	800500e <_printf_float+0xb6>
 80051b8:	f109 0901 	add.w	r9, r9, #1
 80051bc:	e7e8      	b.n	8005190 <_printf_float+0x238>
 80051be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dc39      	bgt.n	8005238 <_printf_float+0x2e0>
 80051c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005234 <_printf_float+0x2dc>)
 80051c6:	2301      	movs	r3, #1
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	f43f af1d 	beq.w	800500e <_printf_float+0xb6>
 80051d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80051d8:	ea59 0303 	orrs.w	r3, r9, r3
 80051dc:	d102      	bne.n	80051e4 <_printf_float+0x28c>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	07d9      	lsls	r1, r3, #31
 80051e2:	d5d7      	bpl.n	8005194 <_printf_float+0x23c>
 80051e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	f43f af0d 	beq.w	800500e <_printf_float+0xb6>
 80051f4:	f04f 0a00 	mov.w	sl, #0
 80051f8:	f104 0b1a 	add.w	fp, r4, #26
 80051fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051fe:	425b      	negs	r3, r3
 8005200:	4553      	cmp	r3, sl
 8005202:	dc01      	bgt.n	8005208 <_printf_float+0x2b0>
 8005204:	464b      	mov	r3, r9
 8005206:	e793      	b.n	8005130 <_printf_float+0x1d8>
 8005208:	2301      	movs	r3, #1
 800520a:	465a      	mov	r2, fp
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f aefb 	beq.w	800500e <_printf_float+0xb6>
 8005218:	f10a 0a01 	add.w	sl, sl, #1
 800521c:	e7ee      	b.n	80051fc <_printf_float+0x2a4>
 800521e:	bf00      	nop
 8005220:	7fefffff 	.word	0x7fefffff
 8005224:	08007b14 	.word	0x08007b14
 8005228:	08007b10 	.word	0x08007b10
 800522c:	08007b1c 	.word	0x08007b1c
 8005230:	08007b18 	.word	0x08007b18
 8005234:	08007b20 	.word	0x08007b20
 8005238:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800523a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800523e:	4553      	cmp	r3, sl
 8005240:	bfa8      	it	ge
 8005242:	4653      	movge	r3, sl
 8005244:	2b00      	cmp	r3, #0
 8005246:	4699      	mov	r9, r3
 8005248:	dc36      	bgt.n	80052b8 <_printf_float+0x360>
 800524a:	f04f 0b00 	mov.w	fp, #0
 800524e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005252:	f104 021a 	add.w	r2, r4, #26
 8005256:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005258:	9306      	str	r3, [sp, #24]
 800525a:	eba3 0309 	sub.w	r3, r3, r9
 800525e:	455b      	cmp	r3, fp
 8005260:	dc31      	bgt.n	80052c6 <_printf_float+0x36e>
 8005262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005264:	459a      	cmp	sl, r3
 8005266:	dc3a      	bgt.n	80052de <_printf_float+0x386>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	07da      	lsls	r2, r3, #31
 800526c:	d437      	bmi.n	80052de <_printf_float+0x386>
 800526e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005270:	ebaa 0903 	sub.w	r9, sl, r3
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	ebaa 0303 	sub.w	r3, sl, r3
 800527a:	4599      	cmp	r9, r3
 800527c:	bfa8      	it	ge
 800527e:	4699      	movge	r9, r3
 8005280:	f1b9 0f00 	cmp.w	r9, #0
 8005284:	dc33      	bgt.n	80052ee <_printf_float+0x396>
 8005286:	f04f 0800 	mov.w	r8, #0
 800528a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800528e:	f104 0b1a 	add.w	fp, r4, #26
 8005292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005294:	ebaa 0303 	sub.w	r3, sl, r3
 8005298:	eba3 0309 	sub.w	r3, r3, r9
 800529c:	4543      	cmp	r3, r8
 800529e:	f77f af79 	ble.w	8005194 <_printf_float+0x23c>
 80052a2:	2301      	movs	r3, #1
 80052a4:	465a      	mov	r2, fp
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f aeae 	beq.w	800500e <_printf_float+0xb6>
 80052b2:	f108 0801 	add.w	r8, r8, #1
 80052b6:	e7ec      	b.n	8005292 <_printf_float+0x33a>
 80052b8:	4642      	mov	r2, r8
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	d1c2      	bne.n	800524a <_printf_float+0x2f2>
 80052c4:	e6a3      	b.n	800500e <_printf_float+0xb6>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4631      	mov	r1, r6
 80052ca:	4628      	mov	r0, r5
 80052cc:	9206      	str	r2, [sp, #24]
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	f43f ae9c 	beq.w	800500e <_printf_float+0xb6>
 80052d6:	9a06      	ldr	r2, [sp, #24]
 80052d8:	f10b 0b01 	add.w	fp, fp, #1
 80052dc:	e7bb      	b.n	8005256 <_printf_float+0x2fe>
 80052de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e2:	4631      	mov	r1, r6
 80052e4:	4628      	mov	r0, r5
 80052e6:	47b8      	blx	r7
 80052e8:	3001      	adds	r0, #1
 80052ea:	d1c0      	bne.n	800526e <_printf_float+0x316>
 80052ec:	e68f      	b.n	800500e <_printf_float+0xb6>
 80052ee:	9a06      	ldr	r2, [sp, #24]
 80052f0:	464b      	mov	r3, r9
 80052f2:	4442      	add	r2, r8
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	d1c3      	bne.n	8005286 <_printf_float+0x32e>
 80052fe:	e686      	b.n	800500e <_printf_float+0xb6>
 8005300:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005304:	f1ba 0f01 	cmp.w	sl, #1
 8005308:	dc01      	bgt.n	800530e <_printf_float+0x3b6>
 800530a:	07db      	lsls	r3, r3, #31
 800530c:	d536      	bpl.n	800537c <_printf_float+0x424>
 800530e:	2301      	movs	r3, #1
 8005310:	4642      	mov	r2, r8
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	f43f ae78 	beq.w	800500e <_printf_float+0xb6>
 800531e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	f43f ae70 	beq.w	800500e <_printf_float+0xb6>
 800532e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005332:	2200      	movs	r2, #0
 8005334:	2300      	movs	r3, #0
 8005336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800533a:	f7fb fbe5 	bl	8000b08 <__aeabi_dcmpeq>
 800533e:	b9c0      	cbnz	r0, 8005372 <_printf_float+0x41a>
 8005340:	4653      	mov	r3, sl
 8005342:	f108 0201 	add.w	r2, r8, #1
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	d10c      	bne.n	800536a <_printf_float+0x412>
 8005350:	e65d      	b.n	800500e <_printf_float+0xb6>
 8005352:	2301      	movs	r3, #1
 8005354:	465a      	mov	r2, fp
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	f43f ae56 	beq.w	800500e <_printf_float+0xb6>
 8005362:	f108 0801 	add.w	r8, r8, #1
 8005366:	45d0      	cmp	r8, sl
 8005368:	dbf3      	blt.n	8005352 <_printf_float+0x3fa>
 800536a:	464b      	mov	r3, r9
 800536c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005370:	e6df      	b.n	8005132 <_printf_float+0x1da>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	f104 0b1a 	add.w	fp, r4, #26
 800537a:	e7f4      	b.n	8005366 <_printf_float+0x40e>
 800537c:	2301      	movs	r3, #1
 800537e:	4642      	mov	r2, r8
 8005380:	e7e1      	b.n	8005346 <_printf_float+0x3ee>
 8005382:	2301      	movs	r3, #1
 8005384:	464a      	mov	r2, r9
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f ae3e 	beq.w	800500e <_printf_float+0xb6>
 8005392:	f108 0801 	add.w	r8, r8, #1
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800539a:	1a5b      	subs	r3, r3, r1
 800539c:	4543      	cmp	r3, r8
 800539e:	dcf0      	bgt.n	8005382 <_printf_float+0x42a>
 80053a0:	e6fc      	b.n	800519c <_printf_float+0x244>
 80053a2:	f04f 0800 	mov.w	r8, #0
 80053a6:	f104 0919 	add.w	r9, r4, #25
 80053aa:	e7f4      	b.n	8005396 <_printf_float+0x43e>

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4698      	mov	r8, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bfb8      	it	lt
 80053c0:	4613      	movlt	r3, r2
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053c8:	4607      	mov	r7, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc26      	bgt.n	8005442 <_printf_common+0x96>
 80053f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	3b00      	subs	r3, #0
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d42b      	bmi.n	800545c <_printf_common+0xb0>
 8005404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005408:	4641      	mov	r1, r8
 800540a:	4638      	mov	r0, r7
 800540c:	47c8      	blx	r9
 800540e:	3001      	adds	r0, #1
 8005410:	d01e      	beq.n	8005450 <_printf_common+0xa4>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf02      	ittt	eq
 800541e:	68e5      	ldreq	r5, [r4, #12]
 8005420:	6833      	ldreq	r3, [r6, #0]
 8005422:	1aed      	subeq	r5, r5, r3
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	bf0c      	ite	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	2500      	movne	r5, #0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfc4      	itt	gt
 8005432:	1a9b      	subgt	r3, r3, r2
 8005434:	18ed      	addgt	r5, r5, r3
 8005436:	2600      	movs	r6, #0
 8005438:	341a      	adds	r4, #26
 800543a:	42b5      	cmp	r5, r6
 800543c:	d11a      	bne.n	8005474 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e008      	b.n	8005454 <_printf_common+0xa8>
 8005442:	2301      	movs	r3, #1
 8005444:	4652      	mov	r2, sl
 8005446:	4641      	mov	r1, r8
 8005448:	4638      	mov	r0, r7
 800544a:	47c8      	blx	r9
 800544c:	3001      	adds	r0, #1
 800544e:	d103      	bne.n	8005458 <_printf_common+0xac>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	3501      	adds	r5, #1
 800545a:	e7c6      	b.n	80053ea <_printf_common+0x3e>
 800545c:	18e1      	adds	r1, r4, r3
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	2030      	movs	r0, #48	@ 0x30
 8005462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005466:	4422      	add	r2, r4
 8005468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800546c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005470:	3302      	adds	r3, #2
 8005472:	e7c7      	b.n	8005404 <_printf_common+0x58>
 8005474:	2301      	movs	r3, #1
 8005476:	4622      	mov	r2, r4
 8005478:	4641      	mov	r1, r8
 800547a:	4638      	mov	r0, r7
 800547c:	47c8      	blx	r9
 800547e:	3001      	adds	r0, #1
 8005480:	d0e6      	beq.n	8005450 <_printf_common+0xa4>
 8005482:	3601      	adds	r6, #1
 8005484:	e7d9      	b.n	800543a <_printf_common+0x8e>
	...

08005488 <_printf_i>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	7e0f      	ldrb	r7, [r1, #24]
 800548e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005490:	2f78      	cmp	r7, #120	@ 0x78
 8005492:	4691      	mov	r9, r2
 8005494:	4680      	mov	r8, r0
 8005496:	460c      	mov	r4, r1
 8005498:	469a      	mov	sl, r3
 800549a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800549e:	d807      	bhi.n	80054b0 <_printf_i+0x28>
 80054a0:	2f62      	cmp	r7, #98	@ 0x62
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x32>
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	f000 80d1 	beq.w	800564c <_printf_i+0x1c4>
 80054aa:	2f58      	cmp	r7, #88	@ 0x58
 80054ac:	f000 80b8 	beq.w	8005620 <_printf_i+0x198>
 80054b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054b8:	e03a      	b.n	8005530 <_printf_i+0xa8>
 80054ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054be:	2b15      	cmp	r3, #21
 80054c0:	d8f6      	bhi.n	80054b0 <_printf_i+0x28>
 80054c2:	a101      	add	r1, pc, #4	@ (adr r1, 80054c8 <_printf_i+0x40>)
 80054c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080054b1 	.word	0x080054b1
 80054d4:	080054b1 	.word	0x080054b1
 80054d8:	080054b1 	.word	0x080054b1
 80054dc:	080054b1 	.word	0x080054b1
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080054b1 	.word	0x080054b1
 80054e8:	080054b1 	.word	0x080054b1
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	08005633 	.word	0x08005633
 80054f8:	0800555f 	.word	0x0800555f
 80054fc:	080055ed 	.word	0x080055ed
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	08005655 	.word	0x08005655
 800550c:	080054b1 	.word	0x080054b1
 8005510:	0800555f 	.word	0x0800555f
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	080055f5 	.word	0x080055f5
 8005520:	6833      	ldr	r3, [r6, #0]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6032      	str	r2, [r6, #0]
 8005528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e09c      	b.n	800566e <_printf_i+0x1e6>
 8005534:	6833      	ldr	r3, [r6, #0]
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	1d19      	adds	r1, r3, #4
 800553a:	6031      	str	r1, [r6, #0]
 800553c:	0606      	lsls	r6, r0, #24
 800553e:	d501      	bpl.n	8005544 <_printf_i+0xbc>
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	e003      	b.n	800554c <_printf_i+0xc4>
 8005544:	0645      	lsls	r5, r0, #25
 8005546:	d5fb      	bpl.n	8005540 <_printf_i+0xb8>
 8005548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800554c:	2d00      	cmp	r5, #0
 800554e:	da03      	bge.n	8005558 <_printf_i+0xd0>
 8005550:	232d      	movs	r3, #45	@ 0x2d
 8005552:	426d      	negs	r5, r5
 8005554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005558:	4858      	ldr	r0, [pc, #352]	@ (80056bc <_printf_i+0x234>)
 800555a:	230a      	movs	r3, #10
 800555c:	e011      	b.n	8005582 <_printf_i+0xfa>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	6833      	ldr	r3, [r6, #0]
 8005562:	0608      	lsls	r0, r1, #24
 8005564:	f853 5b04 	ldr.w	r5, [r3], #4
 8005568:	d402      	bmi.n	8005570 <_printf_i+0xe8>
 800556a:	0649      	lsls	r1, r1, #25
 800556c:	bf48      	it	mi
 800556e:	b2ad      	uxthmi	r5, r5
 8005570:	2f6f      	cmp	r7, #111	@ 0x6f
 8005572:	4852      	ldr	r0, [pc, #328]	@ (80056bc <_printf_i+0x234>)
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	bf14      	ite	ne
 8005578:	230a      	movne	r3, #10
 800557a:	2308      	moveq	r3, #8
 800557c:	2100      	movs	r1, #0
 800557e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005582:	6866      	ldr	r6, [r4, #4]
 8005584:	60a6      	str	r6, [r4, #8]
 8005586:	2e00      	cmp	r6, #0
 8005588:	db05      	blt.n	8005596 <_printf_i+0x10e>
 800558a:	6821      	ldr	r1, [r4, #0]
 800558c:	432e      	orrs	r6, r5
 800558e:	f021 0104 	bic.w	r1, r1, #4
 8005592:	6021      	str	r1, [r4, #0]
 8005594:	d04b      	beq.n	800562e <_printf_i+0x1a6>
 8005596:	4616      	mov	r6, r2
 8005598:	fbb5 f1f3 	udiv	r1, r5, r3
 800559c:	fb03 5711 	mls	r7, r3, r1, r5
 80055a0:	5dc7      	ldrb	r7, [r0, r7]
 80055a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055a6:	462f      	mov	r7, r5
 80055a8:	42bb      	cmp	r3, r7
 80055aa:	460d      	mov	r5, r1
 80055ac:	d9f4      	bls.n	8005598 <_printf_i+0x110>
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d10b      	bne.n	80055ca <_printf_i+0x142>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	07df      	lsls	r7, r3, #31
 80055b6:	d508      	bpl.n	80055ca <_printf_i+0x142>
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	6861      	ldr	r1, [r4, #4]
 80055bc:	4299      	cmp	r1, r3
 80055be:	bfde      	ittt	le
 80055c0:	2330      	movle	r3, #48	@ 0x30
 80055c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055ca:	1b92      	subs	r2, r2, r6
 80055cc:	6122      	str	r2, [r4, #16]
 80055ce:	f8cd a000 	str.w	sl, [sp]
 80055d2:	464b      	mov	r3, r9
 80055d4:	aa03      	add	r2, sp, #12
 80055d6:	4621      	mov	r1, r4
 80055d8:	4640      	mov	r0, r8
 80055da:	f7ff fee7 	bl	80053ac <_printf_common>
 80055de:	3001      	adds	r0, #1
 80055e0:	d14a      	bne.n	8005678 <_printf_i+0x1f0>
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295
 80055e6:	b004      	add	sp, #16
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	f043 0320 	orr.w	r3, r3, #32
 80055f2:	6023      	str	r3, [r4, #0]
 80055f4:	4832      	ldr	r0, [pc, #200]	@ (80056c0 <_printf_i+0x238>)
 80055f6:	2778      	movs	r7, #120	@ 0x78
 80055f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	6831      	ldr	r1, [r6, #0]
 8005600:	061f      	lsls	r7, r3, #24
 8005602:	f851 5b04 	ldr.w	r5, [r1], #4
 8005606:	d402      	bmi.n	800560e <_printf_i+0x186>
 8005608:	065f      	lsls	r7, r3, #25
 800560a:	bf48      	it	mi
 800560c:	b2ad      	uxthmi	r5, r5
 800560e:	6031      	str	r1, [r6, #0]
 8005610:	07d9      	lsls	r1, r3, #31
 8005612:	bf44      	itt	mi
 8005614:	f043 0320 	orrmi.w	r3, r3, #32
 8005618:	6023      	strmi	r3, [r4, #0]
 800561a:	b11d      	cbz	r5, 8005624 <_printf_i+0x19c>
 800561c:	2310      	movs	r3, #16
 800561e:	e7ad      	b.n	800557c <_printf_i+0xf4>
 8005620:	4826      	ldr	r0, [pc, #152]	@ (80056bc <_printf_i+0x234>)
 8005622:	e7e9      	b.n	80055f8 <_printf_i+0x170>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	f023 0320 	bic.w	r3, r3, #32
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	e7f6      	b.n	800561c <_printf_i+0x194>
 800562e:	4616      	mov	r6, r2
 8005630:	e7bd      	b.n	80055ae <_printf_i+0x126>
 8005632:	6833      	ldr	r3, [r6, #0]
 8005634:	6825      	ldr	r5, [r4, #0]
 8005636:	6961      	ldr	r1, [r4, #20]
 8005638:	1d18      	adds	r0, r3, #4
 800563a:	6030      	str	r0, [r6, #0]
 800563c:	062e      	lsls	r6, r5, #24
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	d501      	bpl.n	8005646 <_printf_i+0x1be>
 8005642:	6019      	str	r1, [r3, #0]
 8005644:	e002      	b.n	800564c <_printf_i+0x1c4>
 8005646:	0668      	lsls	r0, r5, #25
 8005648:	d5fb      	bpl.n	8005642 <_printf_i+0x1ba>
 800564a:	8019      	strh	r1, [r3, #0]
 800564c:	2300      	movs	r3, #0
 800564e:	6123      	str	r3, [r4, #16]
 8005650:	4616      	mov	r6, r2
 8005652:	e7bc      	b.n	80055ce <_printf_i+0x146>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	6032      	str	r2, [r6, #0]
 800565a:	681e      	ldr	r6, [r3, #0]
 800565c:	6862      	ldr	r2, [r4, #4]
 800565e:	2100      	movs	r1, #0
 8005660:	4630      	mov	r0, r6
 8005662:	f7fa fdd5 	bl	8000210 <memchr>
 8005666:	b108      	cbz	r0, 800566c <_printf_i+0x1e4>
 8005668:	1b80      	subs	r0, r0, r6
 800566a:	6060      	str	r0, [r4, #4]
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	2300      	movs	r3, #0
 8005672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005676:	e7aa      	b.n	80055ce <_printf_i+0x146>
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	4632      	mov	r2, r6
 800567c:	4649      	mov	r1, r9
 800567e:	4640      	mov	r0, r8
 8005680:	47d0      	blx	sl
 8005682:	3001      	adds	r0, #1
 8005684:	d0ad      	beq.n	80055e2 <_printf_i+0x15a>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	079b      	lsls	r3, r3, #30
 800568a:	d413      	bmi.n	80056b4 <_printf_i+0x22c>
 800568c:	68e0      	ldr	r0, [r4, #12]
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	4298      	cmp	r0, r3
 8005692:	bfb8      	it	lt
 8005694:	4618      	movlt	r0, r3
 8005696:	e7a6      	b.n	80055e6 <_printf_i+0x15e>
 8005698:	2301      	movs	r3, #1
 800569a:	4632      	mov	r2, r6
 800569c:	4649      	mov	r1, r9
 800569e:	4640      	mov	r0, r8
 80056a0:	47d0      	blx	sl
 80056a2:	3001      	adds	r0, #1
 80056a4:	d09d      	beq.n	80055e2 <_printf_i+0x15a>
 80056a6:	3501      	adds	r5, #1
 80056a8:	68e3      	ldr	r3, [r4, #12]
 80056aa:	9903      	ldr	r1, [sp, #12]
 80056ac:	1a5b      	subs	r3, r3, r1
 80056ae:	42ab      	cmp	r3, r5
 80056b0:	dcf2      	bgt.n	8005698 <_printf_i+0x210>
 80056b2:	e7eb      	b.n	800568c <_printf_i+0x204>
 80056b4:	2500      	movs	r5, #0
 80056b6:	f104 0619 	add.w	r6, r4, #25
 80056ba:	e7f5      	b.n	80056a8 <_printf_i+0x220>
 80056bc:	08007b22 	.word	0x08007b22
 80056c0:	08007b33 	.word	0x08007b33

080056c4 <std>:
 80056c4:	2300      	movs	r3, #0
 80056c6:	b510      	push	{r4, lr}
 80056c8:	4604      	mov	r4, r0
 80056ca:	e9c0 3300 	strd	r3, r3, [r0]
 80056ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056d2:	6083      	str	r3, [r0, #8]
 80056d4:	8181      	strh	r1, [r0, #12]
 80056d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80056d8:	81c2      	strh	r2, [r0, #14]
 80056da:	6183      	str	r3, [r0, #24]
 80056dc:	4619      	mov	r1, r3
 80056de:	2208      	movs	r2, #8
 80056e0:	305c      	adds	r0, #92	@ 0x5c
 80056e2:	f000 f916 	bl	8005912 <memset>
 80056e6:	4b0d      	ldr	r3, [pc, #52]	@ (800571c <std+0x58>)
 80056e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80056ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <std+0x5c>)
 80056ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005724 <std+0x60>)
 80056f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <std+0x64>)
 80056f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80056f6:	4b0d      	ldr	r3, [pc, #52]	@ (800572c <std+0x68>)
 80056f8:	6224      	str	r4, [r4, #32]
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d006      	beq.n	800570c <std+0x48>
 80056fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005702:	4294      	cmp	r4, r2
 8005704:	d002      	beq.n	800570c <std+0x48>
 8005706:	33d0      	adds	r3, #208	@ 0xd0
 8005708:	429c      	cmp	r4, r3
 800570a:	d105      	bne.n	8005718 <std+0x54>
 800570c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005714:	f000 b97a 	b.w	8005a0c <__retarget_lock_init_recursive>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	bf00      	nop
 800571c:	0800588d 	.word	0x0800588d
 8005720:	080058af 	.word	0x080058af
 8005724:	080058e7 	.word	0x080058e7
 8005728:	0800590b 	.word	0x0800590b
 800572c:	20000324 	.word	0x20000324

08005730 <stdio_exit_handler>:
 8005730:	4a02      	ldr	r2, [pc, #8]	@ (800573c <stdio_exit_handler+0xc>)
 8005732:	4903      	ldr	r1, [pc, #12]	@ (8005740 <stdio_exit_handler+0x10>)
 8005734:	4803      	ldr	r0, [pc, #12]	@ (8005744 <stdio_exit_handler+0x14>)
 8005736:	f000 b869 	b.w	800580c <_fwalk_sglue>
 800573a:	bf00      	nop
 800573c:	2000000c 	.word	0x2000000c
 8005740:	08007375 	.word	0x08007375
 8005744:	2000001c 	.word	0x2000001c

08005748 <cleanup_stdio>:
 8005748:	6841      	ldr	r1, [r0, #4]
 800574a:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <cleanup_stdio+0x34>)
 800574c:	4299      	cmp	r1, r3
 800574e:	b510      	push	{r4, lr}
 8005750:	4604      	mov	r4, r0
 8005752:	d001      	beq.n	8005758 <cleanup_stdio+0x10>
 8005754:	f001 fe0e 	bl	8007374 <_fflush_r>
 8005758:	68a1      	ldr	r1, [r4, #8]
 800575a:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <cleanup_stdio+0x38>)
 800575c:	4299      	cmp	r1, r3
 800575e:	d002      	beq.n	8005766 <cleanup_stdio+0x1e>
 8005760:	4620      	mov	r0, r4
 8005762:	f001 fe07 	bl	8007374 <_fflush_r>
 8005766:	68e1      	ldr	r1, [r4, #12]
 8005768:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <cleanup_stdio+0x3c>)
 800576a:	4299      	cmp	r1, r3
 800576c:	d004      	beq.n	8005778 <cleanup_stdio+0x30>
 800576e:	4620      	mov	r0, r4
 8005770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005774:	f001 bdfe 	b.w	8007374 <_fflush_r>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	bf00      	nop
 800577c:	20000324 	.word	0x20000324
 8005780:	2000038c 	.word	0x2000038c
 8005784:	200003f4 	.word	0x200003f4

08005788 <global_stdio_init.part.0>:
 8005788:	b510      	push	{r4, lr}
 800578a:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <global_stdio_init.part.0+0x30>)
 800578c:	4c0b      	ldr	r4, [pc, #44]	@ (80057bc <global_stdio_init.part.0+0x34>)
 800578e:	4a0c      	ldr	r2, [pc, #48]	@ (80057c0 <global_stdio_init.part.0+0x38>)
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	4620      	mov	r0, r4
 8005794:	2200      	movs	r2, #0
 8005796:	2104      	movs	r1, #4
 8005798:	f7ff ff94 	bl	80056c4 <std>
 800579c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057a0:	2201      	movs	r2, #1
 80057a2:	2109      	movs	r1, #9
 80057a4:	f7ff ff8e 	bl	80056c4 <std>
 80057a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057ac:	2202      	movs	r2, #2
 80057ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b2:	2112      	movs	r1, #18
 80057b4:	f7ff bf86 	b.w	80056c4 <std>
 80057b8:	2000045c 	.word	0x2000045c
 80057bc:	20000324 	.word	0x20000324
 80057c0:	08005731 	.word	0x08005731

080057c4 <__sfp_lock_acquire>:
 80057c4:	4801      	ldr	r0, [pc, #4]	@ (80057cc <__sfp_lock_acquire+0x8>)
 80057c6:	f000 b922 	b.w	8005a0e <__retarget_lock_acquire_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000465 	.word	0x20000465

080057d0 <__sfp_lock_release>:
 80057d0:	4801      	ldr	r0, [pc, #4]	@ (80057d8 <__sfp_lock_release+0x8>)
 80057d2:	f000 b91d 	b.w	8005a10 <__retarget_lock_release_recursive>
 80057d6:	bf00      	nop
 80057d8:	20000465 	.word	0x20000465

080057dc <__sinit>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	4604      	mov	r4, r0
 80057e0:	f7ff fff0 	bl	80057c4 <__sfp_lock_acquire>
 80057e4:	6a23      	ldr	r3, [r4, #32]
 80057e6:	b11b      	cbz	r3, 80057f0 <__sinit+0x14>
 80057e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ec:	f7ff bff0 	b.w	80057d0 <__sfp_lock_release>
 80057f0:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <__sinit+0x28>)
 80057f2:	6223      	str	r3, [r4, #32]
 80057f4:	4b04      	ldr	r3, [pc, #16]	@ (8005808 <__sinit+0x2c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f5      	bne.n	80057e8 <__sinit+0xc>
 80057fc:	f7ff ffc4 	bl	8005788 <global_stdio_init.part.0>
 8005800:	e7f2      	b.n	80057e8 <__sinit+0xc>
 8005802:	bf00      	nop
 8005804:	08005749 	.word	0x08005749
 8005808:	2000045c 	.word	0x2000045c

0800580c <_fwalk_sglue>:
 800580c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005810:	4607      	mov	r7, r0
 8005812:	4688      	mov	r8, r1
 8005814:	4614      	mov	r4, r2
 8005816:	2600      	movs	r6, #0
 8005818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800581c:	f1b9 0901 	subs.w	r9, r9, #1
 8005820:	d505      	bpl.n	800582e <_fwalk_sglue+0x22>
 8005822:	6824      	ldr	r4, [r4, #0]
 8005824:	2c00      	cmp	r4, #0
 8005826:	d1f7      	bne.n	8005818 <_fwalk_sglue+0xc>
 8005828:	4630      	mov	r0, r6
 800582a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582e:	89ab      	ldrh	r3, [r5, #12]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d907      	bls.n	8005844 <_fwalk_sglue+0x38>
 8005834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005838:	3301      	adds	r3, #1
 800583a:	d003      	beq.n	8005844 <_fwalk_sglue+0x38>
 800583c:	4629      	mov	r1, r5
 800583e:	4638      	mov	r0, r7
 8005840:	47c0      	blx	r8
 8005842:	4306      	orrs	r6, r0
 8005844:	3568      	adds	r5, #104	@ 0x68
 8005846:	e7e9      	b.n	800581c <_fwalk_sglue+0x10>

08005848 <siprintf>:
 8005848:	b40e      	push	{r1, r2, r3}
 800584a:	b510      	push	{r4, lr}
 800584c:	b09d      	sub	sp, #116	@ 0x74
 800584e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005850:	9002      	str	r0, [sp, #8]
 8005852:	9006      	str	r0, [sp, #24]
 8005854:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005858:	480a      	ldr	r0, [pc, #40]	@ (8005884 <siprintf+0x3c>)
 800585a:	9107      	str	r1, [sp, #28]
 800585c:	9104      	str	r1, [sp, #16]
 800585e:	490a      	ldr	r1, [pc, #40]	@ (8005888 <siprintf+0x40>)
 8005860:	f853 2b04 	ldr.w	r2, [r3], #4
 8005864:	9105      	str	r1, [sp, #20]
 8005866:	2400      	movs	r4, #0
 8005868:	a902      	add	r1, sp, #8
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005870:	f001 fc00 	bl	8007074 <_svfiprintf_r>
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	701c      	strb	r4, [r3, #0]
 8005878:	b01d      	add	sp, #116	@ 0x74
 800587a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800587e:	b003      	add	sp, #12
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000018 	.word	0x20000018
 8005888:	ffff0208 	.word	0xffff0208

0800588c <__sread>:
 800588c:	b510      	push	{r4, lr}
 800588e:	460c      	mov	r4, r1
 8005890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005894:	f000 f86c 	bl	8005970 <_read_r>
 8005898:	2800      	cmp	r0, #0
 800589a:	bfab      	itete	ge
 800589c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800589e:	89a3      	ldrhlt	r3, [r4, #12]
 80058a0:	181b      	addge	r3, r3, r0
 80058a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058a6:	bfac      	ite	ge
 80058a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058aa:	81a3      	strhlt	r3, [r4, #12]
 80058ac:	bd10      	pop	{r4, pc}

080058ae <__swrite>:
 80058ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b2:	461f      	mov	r7, r3
 80058b4:	898b      	ldrh	r3, [r1, #12]
 80058b6:	05db      	lsls	r3, r3, #23
 80058b8:	4605      	mov	r5, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	4616      	mov	r6, r2
 80058be:	d505      	bpl.n	80058cc <__swrite+0x1e>
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	2302      	movs	r3, #2
 80058c6:	2200      	movs	r2, #0
 80058c8:	f000 f840 	bl	800594c <_lseek_r>
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	4632      	mov	r2, r6
 80058da:	463b      	mov	r3, r7
 80058dc:	4628      	mov	r0, r5
 80058de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058e2:	f000 b857 	b.w	8005994 <_write_r>

080058e6 <__sseek>:
 80058e6:	b510      	push	{r4, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ee:	f000 f82d 	bl	800594c <_lseek_r>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	bf15      	itete	ne
 80058f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005902:	81a3      	strheq	r3, [r4, #12]
 8005904:	bf18      	it	ne
 8005906:	81a3      	strhne	r3, [r4, #12]
 8005908:	bd10      	pop	{r4, pc}

0800590a <__sclose>:
 800590a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590e:	f000 b80d 	b.w	800592c <_close_r>

08005912 <memset>:
 8005912:	4402      	add	r2, r0
 8005914:	4603      	mov	r3, r0
 8005916:	4293      	cmp	r3, r2
 8005918:	d100      	bne.n	800591c <memset+0xa>
 800591a:	4770      	bx	lr
 800591c:	f803 1b01 	strb.w	r1, [r3], #1
 8005920:	e7f9      	b.n	8005916 <memset+0x4>
	...

08005924 <_localeconv_r>:
 8005924:	4800      	ldr	r0, [pc, #0]	@ (8005928 <_localeconv_r+0x4>)
 8005926:	4770      	bx	lr
 8005928:	20000158 	.word	0x20000158

0800592c <_close_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	@ (8005948 <_close_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb ff66 	bl	8001808 <_close>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_close_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_close_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000460 	.word	0x20000460

0800594c <_lseek_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	@ (800596c <_lseek_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb ff7b 	bl	8001856 <_lseek>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_lseek_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_lseek_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000460 	.word	0x20000460

08005970 <_read_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	@ (8005990 <_read_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb ff09 	bl	8001796 <_read>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_read_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_read_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000460 	.word	0x20000460

08005994 <_write_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d07      	ldr	r5, [pc, #28]	@ (80059b4 <_write_r+0x20>)
 8005998:	4604      	mov	r4, r0
 800599a:	4608      	mov	r0, r1
 800599c:	4611      	mov	r1, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	602a      	str	r2, [r5, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f7fb ff14 	bl	80017d0 <_write>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_write_r+0x1e>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_write_r+0x1e>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000460 	.word	0x20000460

080059b8 <__errno>:
 80059b8:	4b01      	ldr	r3, [pc, #4]	@ (80059c0 <__errno+0x8>)
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000018 	.word	0x20000018

080059c4 <__libc_init_array>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4d0d      	ldr	r5, [pc, #52]	@ (80059fc <__libc_init_array+0x38>)
 80059c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005a00 <__libc_init_array+0x3c>)
 80059ca:	1b64      	subs	r4, r4, r5
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	2600      	movs	r6, #0
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	d109      	bne.n	80059e8 <__libc_init_array+0x24>
 80059d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005a04 <__libc_init_array+0x40>)
 80059d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005a08 <__libc_init_array+0x44>)
 80059d8:	f002 f86a 	bl	8007ab0 <_init>
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	2600      	movs	r6, #0
 80059e2:	42a6      	cmp	r6, r4
 80059e4:	d105      	bne.n	80059f2 <__libc_init_array+0x2e>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ec:	4798      	blx	r3
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7ee      	b.n	80059d0 <__libc_init_array+0xc>
 80059f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f6:	4798      	blx	r3
 80059f8:	3601      	adds	r6, #1
 80059fa:	e7f2      	b.n	80059e2 <__libc_init_array+0x1e>
 80059fc:	08007e8c 	.word	0x08007e8c
 8005a00:	08007e8c 	.word	0x08007e8c
 8005a04:	08007e8c 	.word	0x08007e8c
 8005a08:	08007e90 	.word	0x08007e90

08005a0c <__retarget_lock_init_recursive>:
 8005a0c:	4770      	bx	lr

08005a0e <__retarget_lock_acquire_recursive>:
 8005a0e:	4770      	bx	lr

08005a10 <__retarget_lock_release_recursive>:
 8005a10:	4770      	bx	lr

08005a12 <quorem>:
 8005a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a16:	6903      	ldr	r3, [r0, #16]
 8005a18:	690c      	ldr	r4, [r1, #16]
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	db7e      	blt.n	8005b1e <quorem+0x10c>
 8005a20:	3c01      	subs	r4, #1
 8005a22:	f101 0814 	add.w	r8, r1, #20
 8005a26:	00a3      	lsls	r3, r4, #2
 8005a28:	f100 0514 	add.w	r5, r0, #20
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a48:	d32e      	bcc.n	8005aa8 <quorem+0x96>
 8005a4a:	f04f 0a00 	mov.w	sl, #0
 8005a4e:	46c4      	mov	ip, r8
 8005a50:	46ae      	mov	lr, r5
 8005a52:	46d3      	mov	fp, sl
 8005a54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a58:	b298      	uxth	r0, r3
 8005a5a:	fb06 a000 	mla	r0, r6, r0, sl
 8005a5e:	0c02      	lsrs	r2, r0, #16
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	fb06 2303 	mla	r3, r6, r3, r2
 8005a66:	f8de 2000 	ldr.w	r2, [lr]
 8005a6a:	b280      	uxth	r0, r0
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	1a12      	subs	r2, r2, r0
 8005a70:	445a      	add	r2, fp
 8005a72:	f8de 0000 	ldr.w	r0, [lr]
 8005a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a84:	b292      	uxth	r2, r2
 8005a86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a8a:	45e1      	cmp	r9, ip
 8005a8c:	f84e 2b04 	str.w	r2, [lr], #4
 8005a90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a94:	d2de      	bcs.n	8005a54 <quorem+0x42>
 8005a96:	9b00      	ldr	r3, [sp, #0]
 8005a98:	58eb      	ldr	r3, [r5, r3]
 8005a9a:	b92b      	cbnz	r3, 8005aa8 <quorem+0x96>
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	3b04      	subs	r3, #4
 8005aa0:	429d      	cmp	r5, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	d32f      	bcc.n	8005b06 <quorem+0xf4>
 8005aa6:	613c      	str	r4, [r7, #16]
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f001 f97f 	bl	8006dac <__mcmp>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	db25      	blt.n	8005afe <quorem+0xec>
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005aba:	f8d1 c000 	ldr.w	ip, [r1]
 8005abe:	fa1f fe82 	uxth.w	lr, r2
 8005ac2:	fa1f f38c 	uxth.w	r3, ip
 8005ac6:	eba3 030e 	sub.w	r3, r3, lr
 8005aca:	4403      	add	r3, r0
 8005acc:	0c12      	lsrs	r2, r2, #16
 8005ace:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ad2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005adc:	45c1      	cmp	r9, r8
 8005ade:	f841 3b04 	str.w	r3, [r1], #4
 8005ae2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ae6:	d2e6      	bcs.n	8005ab6 <quorem+0xa4>
 8005ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005af0:	b922      	cbnz	r2, 8005afc <quorem+0xea>
 8005af2:	3b04      	subs	r3, #4
 8005af4:	429d      	cmp	r5, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	d30b      	bcc.n	8005b12 <quorem+0x100>
 8005afa:	613c      	str	r4, [r7, #16]
 8005afc:	3601      	adds	r6, #1
 8005afe:	4630      	mov	r0, r6
 8005b00:	b003      	add	sp, #12
 8005b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	3b04      	subs	r3, #4
 8005b0a:	2a00      	cmp	r2, #0
 8005b0c:	d1cb      	bne.n	8005aa6 <quorem+0x94>
 8005b0e:	3c01      	subs	r4, #1
 8005b10:	e7c6      	b.n	8005aa0 <quorem+0x8e>
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	3b04      	subs	r3, #4
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	d1ef      	bne.n	8005afa <quorem+0xe8>
 8005b1a:	3c01      	subs	r4, #1
 8005b1c:	e7ea      	b.n	8005af4 <quorem+0xe2>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e7ee      	b.n	8005b00 <quorem+0xee>
 8005b22:	0000      	movs	r0, r0
 8005b24:	0000      	movs	r0, r0
	...

08005b28 <_dtoa_r>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	69c7      	ldr	r7, [r0, #28]
 8005b2e:	b097      	sub	sp, #92	@ 0x5c
 8005b30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005b34:	ec55 4b10 	vmov	r4, r5, d0
 8005b38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005b3a:	9107      	str	r1, [sp, #28]
 8005b3c:	4681      	mov	r9, r0
 8005b3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b40:	9311      	str	r3, [sp, #68]	@ 0x44
 8005b42:	b97f      	cbnz	r7, 8005b64 <_dtoa_r+0x3c>
 8005b44:	2010      	movs	r0, #16
 8005b46:	f000 fe09 	bl	800675c <malloc>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005b50:	b920      	cbnz	r0, 8005b5c <_dtoa_r+0x34>
 8005b52:	4ba9      	ldr	r3, [pc, #676]	@ (8005df8 <_dtoa_r+0x2d0>)
 8005b54:	21ef      	movs	r1, #239	@ 0xef
 8005b56:	48a9      	ldr	r0, [pc, #676]	@ (8005dfc <_dtoa_r+0x2d4>)
 8005b58:	f001 fc6c 	bl	8007434 <__assert_func>
 8005b5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b60:	6007      	str	r7, [r0, #0]
 8005b62:	60c7      	str	r7, [r0, #12]
 8005b64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b68:	6819      	ldr	r1, [r3, #0]
 8005b6a:	b159      	cbz	r1, 8005b84 <_dtoa_r+0x5c>
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	604a      	str	r2, [r1, #4]
 8005b70:	2301      	movs	r3, #1
 8005b72:	4093      	lsls	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
 8005b76:	4648      	mov	r0, r9
 8005b78:	f000 fee6 	bl	8006948 <_Bfree>
 8005b7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	1e2b      	subs	r3, r5, #0
 8005b86:	bfb9      	ittee	lt
 8005b88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b8c:	9305      	strlt	r3, [sp, #20]
 8005b8e:	2300      	movge	r3, #0
 8005b90:	6033      	strge	r3, [r6, #0]
 8005b92:	9f05      	ldr	r7, [sp, #20]
 8005b94:	4b9a      	ldr	r3, [pc, #616]	@ (8005e00 <_dtoa_r+0x2d8>)
 8005b96:	bfbc      	itt	lt
 8005b98:	2201      	movlt	r2, #1
 8005b9a:	6032      	strlt	r2, [r6, #0]
 8005b9c:	43bb      	bics	r3, r7
 8005b9e:	d112      	bne.n	8005bc6 <_dtoa_r+0x9e>
 8005ba0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005bac:	4323      	orrs	r3, r4
 8005bae:	f000 855a 	beq.w	8006666 <_dtoa_r+0xb3e>
 8005bb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bb4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005e14 <_dtoa_r+0x2ec>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 855c 	beq.w	8006676 <_dtoa_r+0xb4e>
 8005bbe:	f10a 0303 	add.w	r3, sl, #3
 8005bc2:	f000 bd56 	b.w	8006672 <_dtoa_r+0xb4a>
 8005bc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	ec51 0b17 	vmov	r0, r1, d7
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005bd6:	f7fa ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8005bda:	4680      	mov	r8, r0
 8005bdc:	b158      	cbz	r0, 8005bf6 <_dtoa_r+0xce>
 8005bde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005be0:	2301      	movs	r3, #1
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005be6:	b113      	cbz	r3, 8005bee <_dtoa_r+0xc6>
 8005be8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005bea:	4b86      	ldr	r3, [pc, #536]	@ (8005e04 <_dtoa_r+0x2dc>)
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005e18 <_dtoa_r+0x2f0>
 8005bf2:	f000 bd40 	b.w	8006676 <_dtoa_r+0xb4e>
 8005bf6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005bfa:	aa14      	add	r2, sp, #80	@ 0x50
 8005bfc:	a915      	add	r1, sp, #84	@ 0x54
 8005bfe:	4648      	mov	r0, r9
 8005c00:	f001 f984 	bl	8006f0c <__d2b>
 8005c04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005c08:	9002      	str	r0, [sp, #8]
 8005c0a:	2e00      	cmp	r6, #0
 8005c0c:	d078      	beq.n	8005d00 <_dtoa_r+0x1d8>
 8005c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005c28:	4619      	mov	r1, r3
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4b76      	ldr	r3, [pc, #472]	@ (8005e08 <_dtoa_r+0x2e0>)
 8005c2e:	f7fa fb4b 	bl	80002c8 <__aeabi_dsub>
 8005c32:	a36b      	add	r3, pc, #428	@ (adr r3, 8005de0 <_dtoa_r+0x2b8>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fcfe 	bl	8000638 <__aeabi_dmul>
 8005c3c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005de8 <_dtoa_r+0x2c0>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fb43 	bl	80002cc <__adddf3>
 8005c46:	4604      	mov	r4, r0
 8005c48:	4630      	mov	r0, r6
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	f7fa fc8a 	bl	8000564 <__aeabi_i2d>
 8005c50:	a367      	add	r3, pc, #412	@ (adr r3, 8005df0 <_dtoa_r+0x2c8>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa fcef 	bl	8000638 <__aeabi_dmul>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fb33 	bl	80002cc <__adddf3>
 8005c66:	4604      	mov	r4, r0
 8005c68:	460d      	mov	r5, r1
 8005c6a:	f7fa ff95 	bl	8000b98 <__aeabi_d2iz>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4607      	mov	r7, r0
 8005c72:	2300      	movs	r3, #0
 8005c74:	4620      	mov	r0, r4
 8005c76:	4629      	mov	r1, r5
 8005c78:	f7fa ff50 	bl	8000b1c <__aeabi_dcmplt>
 8005c7c:	b140      	cbz	r0, 8005c90 <_dtoa_r+0x168>
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f7fa fc70 	bl	8000564 <__aeabi_i2d>
 8005c84:	4622      	mov	r2, r4
 8005c86:	462b      	mov	r3, r5
 8005c88:	f7fa ff3e 	bl	8000b08 <__aeabi_dcmpeq>
 8005c8c:	b900      	cbnz	r0, 8005c90 <_dtoa_r+0x168>
 8005c8e:	3f01      	subs	r7, #1
 8005c90:	2f16      	cmp	r7, #22
 8005c92:	d852      	bhi.n	8005d3a <_dtoa_r+0x212>
 8005c94:	4b5d      	ldr	r3, [pc, #372]	@ (8005e0c <_dtoa_r+0x2e4>)
 8005c96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ca2:	f7fa ff3b 	bl	8000b1c <__aeabi_dcmplt>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d049      	beq.n	8005d3e <_dtoa_r+0x216>
 8005caa:	3f01      	subs	r7, #1
 8005cac:	2300      	movs	r3, #0
 8005cae:	9310      	str	r3, [sp, #64]	@ 0x40
 8005cb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cb2:	1b9b      	subs	r3, r3, r6
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	bf45      	ittet	mi
 8005cb8:	f1c3 0301 	rsbmi	r3, r3, #1
 8005cbc:	9300      	strmi	r3, [sp, #0]
 8005cbe:	2300      	movpl	r3, #0
 8005cc0:	2300      	movmi	r3, #0
 8005cc2:	9206      	str	r2, [sp, #24]
 8005cc4:	bf54      	ite	pl
 8005cc6:	9300      	strpl	r3, [sp, #0]
 8005cc8:	9306      	strmi	r3, [sp, #24]
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	db39      	blt.n	8005d42 <_dtoa_r+0x21a>
 8005cce:	9b06      	ldr	r3, [sp, #24]
 8005cd0:	970d      	str	r7, [sp, #52]	@ 0x34
 8005cd2:	443b      	add	r3, r7
 8005cd4:	9306      	str	r3, [sp, #24]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9308      	str	r3, [sp, #32]
 8005cda:	9b07      	ldr	r3, [sp, #28]
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	d863      	bhi.n	8005da8 <_dtoa_r+0x280>
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	bfc4      	itt	gt
 8005ce4:	3b04      	subgt	r3, #4
 8005ce6:	9307      	strgt	r3, [sp, #28]
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	f1a3 0302 	sub.w	r3, r3, #2
 8005cee:	bfcc      	ite	gt
 8005cf0:	2400      	movgt	r4, #0
 8005cf2:	2401      	movle	r4, #1
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d863      	bhi.n	8005dc0 <_dtoa_r+0x298>
 8005cf8:	e8df f003 	tbb	[pc, r3]
 8005cfc:	2b375452 	.word	0x2b375452
 8005d00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005d04:	441e      	add	r6, r3
 8005d06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	bfc1      	itttt	gt
 8005d0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d12:	409f      	lslgt	r7, r3
 8005d14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d1c:	bfd6      	itet	le
 8005d1e:	f1c3 0320 	rsble	r3, r3, #32
 8005d22:	ea47 0003 	orrgt.w	r0, r7, r3
 8005d26:	fa04 f003 	lslle.w	r0, r4, r3
 8005d2a:	f7fa fc0b 	bl	8000544 <__aeabi_ui2d>
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d34:	3e01      	subs	r6, #1
 8005d36:	9212      	str	r2, [sp, #72]	@ 0x48
 8005d38:	e776      	b.n	8005c28 <_dtoa_r+0x100>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e7b7      	b.n	8005cae <_dtoa_r+0x186>
 8005d3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005d40:	e7b6      	b.n	8005cb0 <_dtoa_r+0x188>
 8005d42:	9b00      	ldr	r3, [sp, #0]
 8005d44:	1bdb      	subs	r3, r3, r7
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	427b      	negs	r3, r7
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005d50:	e7c3      	b.n	8005cda <_dtoa_r+0x1b2>
 8005d52:	2301      	movs	r3, #1
 8005d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d58:	eb07 0b03 	add.w	fp, r7, r3
 8005d5c:	f10b 0301 	add.w	r3, fp, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	9303      	str	r3, [sp, #12]
 8005d64:	bfb8      	it	lt
 8005d66:	2301      	movlt	r3, #1
 8005d68:	e006      	b.n	8005d78 <_dtoa_r+0x250>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	dd28      	ble.n	8005dc6 <_dtoa_r+0x29e>
 8005d74:	469b      	mov	fp, r3
 8005d76:	9303      	str	r3, [sp, #12]
 8005d78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	2204      	movs	r2, #4
 8005d80:	f102 0514 	add.w	r5, r2, #20
 8005d84:	429d      	cmp	r5, r3
 8005d86:	d926      	bls.n	8005dd6 <_dtoa_r+0x2ae>
 8005d88:	6041      	str	r1, [r0, #4]
 8005d8a:	4648      	mov	r0, r9
 8005d8c:	f000 fd9c 	bl	80068c8 <_Balloc>
 8005d90:	4682      	mov	sl, r0
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d142      	bne.n	8005e1c <_dtoa_r+0x2f4>
 8005d96:	4b1e      	ldr	r3, [pc, #120]	@ (8005e10 <_dtoa_r+0x2e8>)
 8005d98:	4602      	mov	r2, r0
 8005d9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d9e:	e6da      	b.n	8005b56 <_dtoa_r+0x2e>
 8005da0:	2300      	movs	r3, #0
 8005da2:	e7e3      	b.n	8005d6c <_dtoa_r+0x244>
 8005da4:	2300      	movs	r3, #0
 8005da6:	e7d5      	b.n	8005d54 <_dtoa_r+0x22c>
 8005da8:	2401      	movs	r4, #1
 8005daa:	2300      	movs	r3, #0
 8005dac:	9307      	str	r3, [sp, #28]
 8005dae:	9409      	str	r4, [sp, #36]	@ 0x24
 8005db0:	f04f 3bff 	mov.w	fp, #4294967295
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8cd b00c 	str.w	fp, [sp, #12]
 8005dba:	2312      	movs	r3, #18
 8005dbc:	920c      	str	r2, [sp, #48]	@ 0x30
 8005dbe:	e7db      	b.n	8005d78 <_dtoa_r+0x250>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc4:	e7f4      	b.n	8005db0 <_dtoa_r+0x288>
 8005dc6:	f04f 0b01 	mov.w	fp, #1
 8005dca:	f8cd b00c 	str.w	fp, [sp, #12]
 8005dce:	465b      	mov	r3, fp
 8005dd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005dd4:	e7d0      	b.n	8005d78 <_dtoa_r+0x250>
 8005dd6:	3101      	adds	r1, #1
 8005dd8:	0052      	lsls	r2, r2, #1
 8005dda:	e7d1      	b.n	8005d80 <_dtoa_r+0x258>
 8005ddc:	f3af 8000 	nop.w
 8005de0:	636f4361 	.word	0x636f4361
 8005de4:	3fd287a7 	.word	0x3fd287a7
 8005de8:	8b60c8b3 	.word	0x8b60c8b3
 8005dec:	3fc68a28 	.word	0x3fc68a28
 8005df0:	509f79fb 	.word	0x509f79fb
 8005df4:	3fd34413 	.word	0x3fd34413
 8005df8:	08007b51 	.word	0x08007b51
 8005dfc:	08007b68 	.word	0x08007b68
 8005e00:	7ff00000 	.word	0x7ff00000
 8005e04:	08007b21 	.word	0x08007b21
 8005e08:	3ff80000 	.word	0x3ff80000
 8005e0c:	08007cb8 	.word	0x08007cb8
 8005e10:	08007bc0 	.word	0x08007bc0
 8005e14:	08007b4d 	.word	0x08007b4d
 8005e18:	08007b20 	.word	0x08007b20
 8005e1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e20:	6018      	str	r0, [r3, #0]
 8005e22:	9b03      	ldr	r3, [sp, #12]
 8005e24:	2b0e      	cmp	r3, #14
 8005e26:	f200 80a1 	bhi.w	8005f6c <_dtoa_r+0x444>
 8005e2a:	2c00      	cmp	r4, #0
 8005e2c:	f000 809e 	beq.w	8005f6c <_dtoa_r+0x444>
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	dd33      	ble.n	8005e9c <_dtoa_r+0x374>
 8005e34:	4b9c      	ldr	r3, [pc, #624]	@ (80060a8 <_dtoa_r+0x580>)
 8005e36:	f007 020f 	and.w	r2, r7, #15
 8005e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e3e:	ed93 7b00 	vldr	d7, [r3]
 8005e42:	05f8      	lsls	r0, r7, #23
 8005e44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005e48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e4c:	d516      	bpl.n	8005e7c <_dtoa_r+0x354>
 8005e4e:	4b97      	ldr	r3, [pc, #604]	@ (80060ac <_dtoa_r+0x584>)
 8005e50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e58:	f7fa fd18 	bl	800088c <__aeabi_ddiv>
 8005e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e60:	f004 040f 	and.w	r4, r4, #15
 8005e64:	2603      	movs	r6, #3
 8005e66:	4d91      	ldr	r5, [pc, #580]	@ (80060ac <_dtoa_r+0x584>)
 8005e68:	b954      	cbnz	r4, 8005e80 <_dtoa_r+0x358>
 8005e6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005e6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e72:	f7fa fd0b 	bl	800088c <__aeabi_ddiv>
 8005e76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e7a:	e028      	b.n	8005ece <_dtoa_r+0x3a6>
 8005e7c:	2602      	movs	r6, #2
 8005e7e:	e7f2      	b.n	8005e66 <_dtoa_r+0x33e>
 8005e80:	07e1      	lsls	r1, r4, #31
 8005e82:	d508      	bpl.n	8005e96 <_dtoa_r+0x36e>
 8005e84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e8c:	f7fa fbd4 	bl	8000638 <__aeabi_dmul>
 8005e90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e94:	3601      	adds	r6, #1
 8005e96:	1064      	asrs	r4, r4, #1
 8005e98:	3508      	adds	r5, #8
 8005e9a:	e7e5      	b.n	8005e68 <_dtoa_r+0x340>
 8005e9c:	f000 80af 	beq.w	8005ffe <_dtoa_r+0x4d6>
 8005ea0:	427c      	negs	r4, r7
 8005ea2:	4b81      	ldr	r3, [pc, #516]	@ (80060a8 <_dtoa_r+0x580>)
 8005ea4:	4d81      	ldr	r5, [pc, #516]	@ (80060ac <_dtoa_r+0x584>)
 8005ea6:	f004 020f 	and.w	r2, r4, #15
 8005eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eb6:	f7fa fbbf 	bl	8000638 <__aeabi_dmul>
 8005eba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ebe:	1124      	asrs	r4, r4, #4
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2602      	movs	r6, #2
 8005ec4:	2c00      	cmp	r4, #0
 8005ec6:	f040 808f 	bne.w	8005fe8 <_dtoa_r+0x4c0>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1d3      	bne.n	8005e76 <_dtoa_r+0x34e>
 8005ece:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ed0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8094 	beq.w	8006002 <_dtoa_r+0x4da>
 8005eda:	4b75      	ldr	r3, [pc, #468]	@ (80060b0 <_dtoa_r+0x588>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa fe1b 	bl	8000b1c <__aeabi_dcmplt>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f000 808b 	beq.w	8006002 <_dtoa_r+0x4da>
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8087 	beq.w	8006002 <_dtoa_r+0x4da>
 8005ef4:	f1bb 0f00 	cmp.w	fp, #0
 8005ef8:	dd34      	ble.n	8005f64 <_dtoa_r+0x43c>
 8005efa:	4620      	mov	r0, r4
 8005efc:	4b6d      	ldr	r3, [pc, #436]	@ (80060b4 <_dtoa_r+0x58c>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7fa fb99 	bl	8000638 <__aeabi_dmul>
 8005f06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f0a:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f0e:	3601      	adds	r6, #1
 8005f10:	465c      	mov	r4, fp
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7fa fb26 	bl	8000564 <__aeabi_i2d>
 8005f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f1c:	f7fa fb8c 	bl	8000638 <__aeabi_dmul>
 8005f20:	4b65      	ldr	r3, [pc, #404]	@ (80060b8 <_dtoa_r+0x590>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	f7fa f9d2 	bl	80002cc <__adddf3>
 8005f28:	4605      	mov	r5, r0
 8005f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d16a      	bne.n	8006008 <_dtoa_r+0x4e0>
 8005f32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f36:	4b61      	ldr	r3, [pc, #388]	@ (80060bc <_dtoa_r+0x594>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f7fa f9c5 	bl	80002c8 <__aeabi_dsub>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f46:	462a      	mov	r2, r5
 8005f48:	4633      	mov	r3, r6
 8005f4a:	f7fa fe05 	bl	8000b58 <__aeabi_dcmpgt>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f040 8298 	bne.w	8006484 <_dtoa_r+0x95c>
 8005f54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f5e:	f7fa fddd 	bl	8000b1c <__aeabi_dcmplt>
 8005f62:	bb38      	cbnz	r0, 8005fb4 <_dtoa_r+0x48c>
 8005f64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005f68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f2c0 8157 	blt.w	8006222 <_dtoa_r+0x6fa>
 8005f74:	2f0e      	cmp	r7, #14
 8005f76:	f300 8154 	bgt.w	8006222 <_dtoa_r+0x6fa>
 8005f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80060a8 <_dtoa_r+0x580>)
 8005f7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f80:	ed93 7b00 	vldr	d7, [r3]
 8005f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	ed8d 7b00 	vstr	d7, [sp]
 8005f8c:	f280 80e5 	bge.w	800615a <_dtoa_r+0x632>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f300 80e1 	bgt.w	800615a <_dtoa_r+0x632>
 8005f98:	d10c      	bne.n	8005fb4 <_dtoa_r+0x48c>
 8005f9a:	4b48      	ldr	r3, [pc, #288]	@ (80060bc <_dtoa_r+0x594>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	ec51 0b17 	vmov	r0, r1, d7
 8005fa2:	f7fa fb49 	bl	8000638 <__aeabi_dmul>
 8005fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005faa:	f7fa fdcb 	bl	8000b44 <__aeabi_dcmpge>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f000 8266 	beq.w	8006480 <_dtoa_r+0x958>
 8005fb4:	2400      	movs	r4, #0
 8005fb6:	4625      	mov	r5, r4
 8005fb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005fba:	4656      	mov	r6, sl
 8005fbc:	ea6f 0803 	mvn.w	r8, r3
 8005fc0:	2700      	movs	r7, #0
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4648      	mov	r0, r9
 8005fc6:	f000 fcbf 	bl	8006948 <_Bfree>
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	f000 80bd 	beq.w	800614a <_dtoa_r+0x622>
 8005fd0:	b12f      	cbz	r7, 8005fde <_dtoa_r+0x4b6>
 8005fd2:	42af      	cmp	r7, r5
 8005fd4:	d003      	beq.n	8005fde <_dtoa_r+0x4b6>
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f000 fcb5 	bl	8006948 <_Bfree>
 8005fde:	4629      	mov	r1, r5
 8005fe0:	4648      	mov	r0, r9
 8005fe2:	f000 fcb1 	bl	8006948 <_Bfree>
 8005fe6:	e0b0      	b.n	800614a <_dtoa_r+0x622>
 8005fe8:	07e2      	lsls	r2, r4, #31
 8005fea:	d505      	bpl.n	8005ff8 <_dtoa_r+0x4d0>
 8005fec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ff0:	f7fa fb22 	bl	8000638 <__aeabi_dmul>
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	1064      	asrs	r4, r4, #1
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	e762      	b.n	8005ec4 <_dtoa_r+0x39c>
 8005ffe:	2602      	movs	r6, #2
 8006000:	e765      	b.n	8005ece <_dtoa_r+0x3a6>
 8006002:	9c03      	ldr	r4, [sp, #12]
 8006004:	46b8      	mov	r8, r7
 8006006:	e784      	b.n	8005f12 <_dtoa_r+0x3ea>
 8006008:	4b27      	ldr	r3, [pc, #156]	@ (80060a8 <_dtoa_r+0x580>)
 800600a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800600c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006014:	4454      	add	r4, sl
 8006016:	2900      	cmp	r1, #0
 8006018:	d054      	beq.n	80060c4 <_dtoa_r+0x59c>
 800601a:	4929      	ldr	r1, [pc, #164]	@ (80060c0 <_dtoa_r+0x598>)
 800601c:	2000      	movs	r0, #0
 800601e:	f7fa fc35 	bl	800088c <__aeabi_ddiv>
 8006022:	4633      	mov	r3, r6
 8006024:	462a      	mov	r2, r5
 8006026:	f7fa f94f 	bl	80002c8 <__aeabi_dsub>
 800602a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800602e:	4656      	mov	r6, sl
 8006030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006034:	f7fa fdb0 	bl	8000b98 <__aeabi_d2iz>
 8006038:	4605      	mov	r5, r0
 800603a:	f7fa fa93 	bl	8000564 <__aeabi_i2d>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006046:	f7fa f93f 	bl	80002c8 <__aeabi_dsub>
 800604a:	3530      	adds	r5, #48	@ 0x30
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006054:	f806 5b01 	strb.w	r5, [r6], #1
 8006058:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800605c:	f7fa fd5e 	bl	8000b1c <__aeabi_dcmplt>
 8006060:	2800      	cmp	r0, #0
 8006062:	d172      	bne.n	800614a <_dtoa_r+0x622>
 8006064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006068:	4911      	ldr	r1, [pc, #68]	@ (80060b0 <_dtoa_r+0x588>)
 800606a:	2000      	movs	r0, #0
 800606c:	f7fa f92c 	bl	80002c8 <__aeabi_dsub>
 8006070:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006074:	f7fa fd52 	bl	8000b1c <__aeabi_dcmplt>
 8006078:	2800      	cmp	r0, #0
 800607a:	f040 80b4 	bne.w	80061e6 <_dtoa_r+0x6be>
 800607e:	42a6      	cmp	r6, r4
 8006080:	f43f af70 	beq.w	8005f64 <_dtoa_r+0x43c>
 8006084:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006088:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <_dtoa_r+0x58c>)
 800608a:	2200      	movs	r2, #0
 800608c:	f7fa fad4 	bl	8000638 <__aeabi_dmul>
 8006090:	4b08      	ldr	r3, [pc, #32]	@ (80060b4 <_dtoa_r+0x58c>)
 8006092:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006096:	2200      	movs	r2, #0
 8006098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800609c:	f7fa facc 	bl	8000638 <__aeabi_dmul>
 80060a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060a4:	e7c4      	b.n	8006030 <_dtoa_r+0x508>
 80060a6:	bf00      	nop
 80060a8:	08007cb8 	.word	0x08007cb8
 80060ac:	08007c90 	.word	0x08007c90
 80060b0:	3ff00000 	.word	0x3ff00000
 80060b4:	40240000 	.word	0x40240000
 80060b8:	401c0000 	.word	0x401c0000
 80060bc:	40140000 	.word	0x40140000
 80060c0:	3fe00000 	.word	0x3fe00000
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	f7fa fab6 	bl	8000638 <__aeabi_dmul>
 80060cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80060d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80060d2:	4656      	mov	r6, sl
 80060d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d8:	f7fa fd5e 	bl	8000b98 <__aeabi_d2iz>
 80060dc:	4605      	mov	r5, r0
 80060de:	f7fa fa41 	bl	8000564 <__aeabi_i2d>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ea:	f7fa f8ed 	bl	80002c8 <__aeabi_dsub>
 80060ee:	3530      	adds	r5, #48	@ 0x30
 80060f0:	f806 5b01 	strb.w	r5, [r6], #1
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	d124      	bne.n	800614e <_dtoa_r+0x626>
 8006104:	4baf      	ldr	r3, [pc, #700]	@ (80063c4 <_dtoa_r+0x89c>)
 8006106:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800610a:	f7fa f8df 	bl	80002cc <__adddf3>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006116:	f7fa fd1f 	bl	8000b58 <__aeabi_dcmpgt>
 800611a:	2800      	cmp	r0, #0
 800611c:	d163      	bne.n	80061e6 <_dtoa_r+0x6be>
 800611e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006122:	49a8      	ldr	r1, [pc, #672]	@ (80063c4 <_dtoa_r+0x89c>)
 8006124:	2000      	movs	r0, #0
 8006126:	f7fa f8cf 	bl	80002c8 <__aeabi_dsub>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006132:	f7fa fcf3 	bl	8000b1c <__aeabi_dcmplt>
 8006136:	2800      	cmp	r0, #0
 8006138:	f43f af14 	beq.w	8005f64 <_dtoa_r+0x43c>
 800613c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800613e:	1e73      	subs	r3, r6, #1
 8006140:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006142:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006146:	2b30      	cmp	r3, #48	@ 0x30
 8006148:	d0f8      	beq.n	800613c <_dtoa_r+0x614>
 800614a:	4647      	mov	r7, r8
 800614c:	e03b      	b.n	80061c6 <_dtoa_r+0x69e>
 800614e:	4b9e      	ldr	r3, [pc, #632]	@ (80063c8 <_dtoa_r+0x8a0>)
 8006150:	f7fa fa72 	bl	8000638 <__aeabi_dmul>
 8006154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006158:	e7bc      	b.n	80060d4 <_dtoa_r+0x5ac>
 800615a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800615e:	4656      	mov	r6, sl
 8006160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006164:	4620      	mov	r0, r4
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa fb90 	bl	800088c <__aeabi_ddiv>
 800616c:	f7fa fd14 	bl	8000b98 <__aeabi_d2iz>
 8006170:	4680      	mov	r8, r0
 8006172:	f7fa f9f7 	bl	8000564 <__aeabi_i2d>
 8006176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800617a:	f7fa fa5d 	bl	8000638 <__aeabi_dmul>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4620      	mov	r0, r4
 8006184:	4629      	mov	r1, r5
 8006186:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800618a:	f7fa f89d 	bl	80002c8 <__aeabi_dsub>
 800618e:	f806 4b01 	strb.w	r4, [r6], #1
 8006192:	9d03      	ldr	r5, [sp, #12]
 8006194:	eba6 040a 	sub.w	r4, r6, sl
 8006198:	42a5      	cmp	r5, r4
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	d133      	bne.n	8006208 <_dtoa_r+0x6e0>
 80061a0:	f7fa f894 	bl	80002cc <__adddf3>
 80061a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061a8:	4604      	mov	r4, r0
 80061aa:	460d      	mov	r5, r1
 80061ac:	f7fa fcd4 	bl	8000b58 <__aeabi_dcmpgt>
 80061b0:	b9c0      	cbnz	r0, 80061e4 <_dtoa_r+0x6bc>
 80061b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa fca5 	bl	8000b08 <__aeabi_dcmpeq>
 80061be:	b110      	cbz	r0, 80061c6 <_dtoa_r+0x69e>
 80061c0:	f018 0f01 	tst.w	r8, #1
 80061c4:	d10e      	bne.n	80061e4 <_dtoa_r+0x6bc>
 80061c6:	9902      	ldr	r1, [sp, #8]
 80061c8:	4648      	mov	r0, r9
 80061ca:	f000 fbbd 	bl	8006948 <_Bfree>
 80061ce:	2300      	movs	r3, #0
 80061d0:	7033      	strb	r3, [r6, #0]
 80061d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80061d4:	3701      	adds	r7, #1
 80061d6:	601f      	str	r7, [r3, #0]
 80061d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 824b 	beq.w	8006676 <_dtoa_r+0xb4e>
 80061e0:	601e      	str	r6, [r3, #0]
 80061e2:	e248      	b.n	8006676 <_dtoa_r+0xb4e>
 80061e4:	46b8      	mov	r8, r7
 80061e6:	4633      	mov	r3, r6
 80061e8:	461e      	mov	r6, r3
 80061ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ee:	2a39      	cmp	r2, #57	@ 0x39
 80061f0:	d106      	bne.n	8006200 <_dtoa_r+0x6d8>
 80061f2:	459a      	cmp	sl, r3
 80061f4:	d1f8      	bne.n	80061e8 <_dtoa_r+0x6c0>
 80061f6:	2230      	movs	r2, #48	@ 0x30
 80061f8:	f108 0801 	add.w	r8, r8, #1
 80061fc:	f88a 2000 	strb.w	r2, [sl]
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	3201      	adds	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e7a0      	b.n	800614a <_dtoa_r+0x622>
 8006208:	4b6f      	ldr	r3, [pc, #444]	@ (80063c8 <_dtoa_r+0x8a0>)
 800620a:	2200      	movs	r2, #0
 800620c:	f7fa fa14 	bl	8000638 <__aeabi_dmul>
 8006210:	2200      	movs	r2, #0
 8006212:	2300      	movs	r3, #0
 8006214:	4604      	mov	r4, r0
 8006216:	460d      	mov	r5, r1
 8006218:	f7fa fc76 	bl	8000b08 <__aeabi_dcmpeq>
 800621c:	2800      	cmp	r0, #0
 800621e:	d09f      	beq.n	8006160 <_dtoa_r+0x638>
 8006220:	e7d1      	b.n	80061c6 <_dtoa_r+0x69e>
 8006222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006224:	2a00      	cmp	r2, #0
 8006226:	f000 80ea 	beq.w	80063fe <_dtoa_r+0x8d6>
 800622a:	9a07      	ldr	r2, [sp, #28]
 800622c:	2a01      	cmp	r2, #1
 800622e:	f300 80cd 	bgt.w	80063cc <_dtoa_r+0x8a4>
 8006232:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006234:	2a00      	cmp	r2, #0
 8006236:	f000 80c1 	beq.w	80063bc <_dtoa_r+0x894>
 800623a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800623e:	9c08      	ldr	r4, [sp, #32]
 8006240:	9e00      	ldr	r6, [sp, #0]
 8006242:	9a00      	ldr	r2, [sp, #0]
 8006244:	441a      	add	r2, r3
 8006246:	9200      	str	r2, [sp, #0]
 8006248:	9a06      	ldr	r2, [sp, #24]
 800624a:	2101      	movs	r1, #1
 800624c:	441a      	add	r2, r3
 800624e:	4648      	mov	r0, r9
 8006250:	9206      	str	r2, [sp, #24]
 8006252:	f000 fc2d 	bl	8006ab0 <__i2b>
 8006256:	4605      	mov	r5, r0
 8006258:	b166      	cbz	r6, 8006274 <_dtoa_r+0x74c>
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	dd09      	ble.n	8006274 <_dtoa_r+0x74c>
 8006260:	42b3      	cmp	r3, r6
 8006262:	9a00      	ldr	r2, [sp, #0]
 8006264:	bfa8      	it	ge
 8006266:	4633      	movge	r3, r6
 8006268:	1ad2      	subs	r2, r2, r3
 800626a:	9200      	str	r2, [sp, #0]
 800626c:	9a06      	ldr	r2, [sp, #24]
 800626e:	1af6      	subs	r6, r6, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	9306      	str	r3, [sp, #24]
 8006274:	9b08      	ldr	r3, [sp, #32]
 8006276:	b30b      	cbz	r3, 80062bc <_dtoa_r+0x794>
 8006278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 80c6 	beq.w	800640c <_dtoa_r+0x8e4>
 8006280:	2c00      	cmp	r4, #0
 8006282:	f000 80c0 	beq.w	8006406 <_dtoa_r+0x8de>
 8006286:	4629      	mov	r1, r5
 8006288:	4622      	mov	r2, r4
 800628a:	4648      	mov	r0, r9
 800628c:	f000 fcc8 	bl	8006c20 <__pow5mult>
 8006290:	9a02      	ldr	r2, [sp, #8]
 8006292:	4601      	mov	r1, r0
 8006294:	4605      	mov	r5, r0
 8006296:	4648      	mov	r0, r9
 8006298:	f000 fc20 	bl	8006adc <__multiply>
 800629c:	9902      	ldr	r1, [sp, #8]
 800629e:	4680      	mov	r8, r0
 80062a0:	4648      	mov	r0, r9
 80062a2:	f000 fb51 	bl	8006948 <_Bfree>
 80062a6:	9b08      	ldr	r3, [sp, #32]
 80062a8:	1b1b      	subs	r3, r3, r4
 80062aa:	9308      	str	r3, [sp, #32]
 80062ac:	f000 80b1 	beq.w	8006412 <_dtoa_r+0x8ea>
 80062b0:	9a08      	ldr	r2, [sp, #32]
 80062b2:	4641      	mov	r1, r8
 80062b4:	4648      	mov	r0, r9
 80062b6:	f000 fcb3 	bl	8006c20 <__pow5mult>
 80062ba:	9002      	str	r0, [sp, #8]
 80062bc:	2101      	movs	r1, #1
 80062be:	4648      	mov	r0, r9
 80062c0:	f000 fbf6 	bl	8006ab0 <__i2b>
 80062c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c6:	4604      	mov	r4, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 81d8 	beq.w	800667e <_dtoa_r+0xb56>
 80062ce:	461a      	mov	r2, r3
 80062d0:	4601      	mov	r1, r0
 80062d2:	4648      	mov	r0, r9
 80062d4:	f000 fca4 	bl	8006c20 <__pow5mult>
 80062d8:	9b07      	ldr	r3, [sp, #28]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	4604      	mov	r4, r0
 80062de:	f300 809f 	bgt.w	8006420 <_dtoa_r+0x8f8>
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 8097 	bne.w	8006418 <_dtoa_r+0x8f0>
 80062ea:	9b05      	ldr	r3, [sp, #20]
 80062ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 8093 	bne.w	800641c <_dtoa_r+0x8f4>
 80062f6:	9b05      	ldr	r3, [sp, #20]
 80062f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062fc:	0d1b      	lsrs	r3, r3, #20
 80062fe:	051b      	lsls	r3, r3, #20
 8006300:	b133      	cbz	r3, 8006310 <_dtoa_r+0x7e8>
 8006302:	9b00      	ldr	r3, [sp, #0]
 8006304:	3301      	adds	r3, #1
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	9b06      	ldr	r3, [sp, #24]
 800630a:	3301      	adds	r3, #1
 800630c:	9306      	str	r3, [sp, #24]
 800630e:	2301      	movs	r3, #1
 8006310:	9308      	str	r3, [sp, #32]
 8006312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 81b8 	beq.w	800668a <_dtoa_r+0xb62>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006320:	6918      	ldr	r0, [r3, #16]
 8006322:	f000 fb79 	bl	8006a18 <__hi0bits>
 8006326:	f1c0 0020 	rsb	r0, r0, #32
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	4418      	add	r0, r3
 800632e:	f010 001f 	ands.w	r0, r0, #31
 8006332:	f000 8082 	beq.w	800643a <_dtoa_r+0x912>
 8006336:	f1c0 0320 	rsb	r3, r0, #32
 800633a:	2b04      	cmp	r3, #4
 800633c:	dd73      	ble.n	8006426 <_dtoa_r+0x8fe>
 800633e:	9b00      	ldr	r3, [sp, #0]
 8006340:	f1c0 001c 	rsb	r0, r0, #28
 8006344:	4403      	add	r3, r0
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	9b06      	ldr	r3, [sp, #24]
 800634a:	4403      	add	r3, r0
 800634c:	4406      	add	r6, r0
 800634e:	9306      	str	r3, [sp, #24]
 8006350:	9b00      	ldr	r3, [sp, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	dd05      	ble.n	8006362 <_dtoa_r+0x83a>
 8006356:	9902      	ldr	r1, [sp, #8]
 8006358:	461a      	mov	r2, r3
 800635a:	4648      	mov	r0, r9
 800635c:	f000 fcba 	bl	8006cd4 <__lshift>
 8006360:	9002      	str	r0, [sp, #8]
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd05      	ble.n	8006374 <_dtoa_r+0x84c>
 8006368:	4621      	mov	r1, r4
 800636a:	461a      	mov	r2, r3
 800636c:	4648      	mov	r0, r9
 800636e:	f000 fcb1 	bl	8006cd4 <__lshift>
 8006372:	4604      	mov	r4, r0
 8006374:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d061      	beq.n	800643e <_dtoa_r+0x916>
 800637a:	9802      	ldr	r0, [sp, #8]
 800637c:	4621      	mov	r1, r4
 800637e:	f000 fd15 	bl	8006dac <__mcmp>
 8006382:	2800      	cmp	r0, #0
 8006384:	da5b      	bge.n	800643e <_dtoa_r+0x916>
 8006386:	2300      	movs	r3, #0
 8006388:	9902      	ldr	r1, [sp, #8]
 800638a:	220a      	movs	r2, #10
 800638c:	4648      	mov	r0, r9
 800638e:	f000 fafd 	bl	800698c <__multadd>
 8006392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006394:	9002      	str	r0, [sp, #8]
 8006396:	f107 38ff 	add.w	r8, r7, #4294967295
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8177 	beq.w	800668e <_dtoa_r+0xb66>
 80063a0:	4629      	mov	r1, r5
 80063a2:	2300      	movs	r3, #0
 80063a4:	220a      	movs	r2, #10
 80063a6:	4648      	mov	r0, r9
 80063a8:	f000 faf0 	bl	800698c <__multadd>
 80063ac:	f1bb 0f00 	cmp.w	fp, #0
 80063b0:	4605      	mov	r5, r0
 80063b2:	dc6f      	bgt.n	8006494 <_dtoa_r+0x96c>
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	dc49      	bgt.n	800644e <_dtoa_r+0x926>
 80063ba:	e06b      	b.n	8006494 <_dtoa_r+0x96c>
 80063bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80063c2:	e73c      	b.n	800623e <_dtoa_r+0x716>
 80063c4:	3fe00000 	.word	0x3fe00000
 80063c8:	40240000 	.word	0x40240000
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	1e5c      	subs	r4, r3, #1
 80063d0:	9b08      	ldr	r3, [sp, #32]
 80063d2:	42a3      	cmp	r3, r4
 80063d4:	db09      	blt.n	80063ea <_dtoa_r+0x8c2>
 80063d6:	1b1c      	subs	r4, r3, r4
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f6bf af30 	bge.w	8006240 <_dtoa_r+0x718>
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	9a03      	ldr	r2, [sp, #12]
 80063e4:	1a9e      	subs	r6, r3, r2
 80063e6:	2300      	movs	r3, #0
 80063e8:	e72b      	b.n	8006242 <_dtoa_r+0x71a>
 80063ea:	9b08      	ldr	r3, [sp, #32]
 80063ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063ee:	9408      	str	r4, [sp, #32]
 80063f0:	1ae3      	subs	r3, r4, r3
 80063f2:	441a      	add	r2, r3
 80063f4:	9e00      	ldr	r6, [sp, #0]
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80063fa:	2400      	movs	r4, #0
 80063fc:	e721      	b.n	8006242 <_dtoa_r+0x71a>
 80063fe:	9c08      	ldr	r4, [sp, #32]
 8006400:	9e00      	ldr	r6, [sp, #0]
 8006402:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006404:	e728      	b.n	8006258 <_dtoa_r+0x730>
 8006406:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800640a:	e751      	b.n	80062b0 <_dtoa_r+0x788>
 800640c:	9a08      	ldr	r2, [sp, #32]
 800640e:	9902      	ldr	r1, [sp, #8]
 8006410:	e750      	b.n	80062b4 <_dtoa_r+0x78c>
 8006412:	f8cd 8008 	str.w	r8, [sp, #8]
 8006416:	e751      	b.n	80062bc <_dtoa_r+0x794>
 8006418:	2300      	movs	r3, #0
 800641a:	e779      	b.n	8006310 <_dtoa_r+0x7e8>
 800641c:	9b04      	ldr	r3, [sp, #16]
 800641e:	e777      	b.n	8006310 <_dtoa_r+0x7e8>
 8006420:	2300      	movs	r3, #0
 8006422:	9308      	str	r3, [sp, #32]
 8006424:	e779      	b.n	800631a <_dtoa_r+0x7f2>
 8006426:	d093      	beq.n	8006350 <_dtoa_r+0x828>
 8006428:	9a00      	ldr	r2, [sp, #0]
 800642a:	331c      	adds	r3, #28
 800642c:	441a      	add	r2, r3
 800642e:	9200      	str	r2, [sp, #0]
 8006430:	9a06      	ldr	r2, [sp, #24]
 8006432:	441a      	add	r2, r3
 8006434:	441e      	add	r6, r3
 8006436:	9206      	str	r2, [sp, #24]
 8006438:	e78a      	b.n	8006350 <_dtoa_r+0x828>
 800643a:	4603      	mov	r3, r0
 800643c:	e7f4      	b.n	8006428 <_dtoa_r+0x900>
 800643e:	9b03      	ldr	r3, [sp, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	46b8      	mov	r8, r7
 8006444:	dc20      	bgt.n	8006488 <_dtoa_r+0x960>
 8006446:	469b      	mov	fp, r3
 8006448:	9b07      	ldr	r3, [sp, #28]
 800644a:	2b02      	cmp	r3, #2
 800644c:	dd1e      	ble.n	800648c <_dtoa_r+0x964>
 800644e:	f1bb 0f00 	cmp.w	fp, #0
 8006452:	f47f adb1 	bne.w	8005fb8 <_dtoa_r+0x490>
 8006456:	4621      	mov	r1, r4
 8006458:	465b      	mov	r3, fp
 800645a:	2205      	movs	r2, #5
 800645c:	4648      	mov	r0, r9
 800645e:	f000 fa95 	bl	800698c <__multadd>
 8006462:	4601      	mov	r1, r0
 8006464:	4604      	mov	r4, r0
 8006466:	9802      	ldr	r0, [sp, #8]
 8006468:	f000 fca0 	bl	8006dac <__mcmp>
 800646c:	2800      	cmp	r0, #0
 800646e:	f77f ada3 	ble.w	8005fb8 <_dtoa_r+0x490>
 8006472:	4656      	mov	r6, sl
 8006474:	2331      	movs	r3, #49	@ 0x31
 8006476:	f806 3b01 	strb.w	r3, [r6], #1
 800647a:	f108 0801 	add.w	r8, r8, #1
 800647e:	e59f      	b.n	8005fc0 <_dtoa_r+0x498>
 8006480:	9c03      	ldr	r4, [sp, #12]
 8006482:	46b8      	mov	r8, r7
 8006484:	4625      	mov	r5, r4
 8006486:	e7f4      	b.n	8006472 <_dtoa_r+0x94a>
 8006488:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800648c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8101 	beq.w	8006696 <_dtoa_r+0xb6e>
 8006494:	2e00      	cmp	r6, #0
 8006496:	dd05      	ble.n	80064a4 <_dtoa_r+0x97c>
 8006498:	4629      	mov	r1, r5
 800649a:	4632      	mov	r2, r6
 800649c:	4648      	mov	r0, r9
 800649e:	f000 fc19 	bl	8006cd4 <__lshift>
 80064a2:	4605      	mov	r5, r0
 80064a4:	9b08      	ldr	r3, [sp, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d05c      	beq.n	8006564 <_dtoa_r+0xa3c>
 80064aa:	6869      	ldr	r1, [r5, #4]
 80064ac:	4648      	mov	r0, r9
 80064ae:	f000 fa0b 	bl	80068c8 <_Balloc>
 80064b2:	4606      	mov	r6, r0
 80064b4:	b928      	cbnz	r0, 80064c2 <_dtoa_r+0x99a>
 80064b6:	4b82      	ldr	r3, [pc, #520]	@ (80066c0 <_dtoa_r+0xb98>)
 80064b8:	4602      	mov	r2, r0
 80064ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80064be:	f7ff bb4a 	b.w	8005b56 <_dtoa_r+0x2e>
 80064c2:	692a      	ldr	r2, [r5, #16]
 80064c4:	3202      	adds	r2, #2
 80064c6:	0092      	lsls	r2, r2, #2
 80064c8:	f105 010c 	add.w	r1, r5, #12
 80064cc:	300c      	adds	r0, #12
 80064ce:	f000 ffa3 	bl	8007418 <memcpy>
 80064d2:	2201      	movs	r2, #1
 80064d4:	4631      	mov	r1, r6
 80064d6:	4648      	mov	r0, r9
 80064d8:	f000 fbfc 	bl	8006cd4 <__lshift>
 80064dc:	f10a 0301 	add.w	r3, sl, #1
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	eb0a 030b 	add.w	r3, sl, fp
 80064e6:	9308      	str	r3, [sp, #32]
 80064e8:	9b04      	ldr	r3, [sp, #16]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	462f      	mov	r7, r5
 80064f0:	9306      	str	r3, [sp, #24]
 80064f2:	4605      	mov	r5, r0
 80064f4:	9b00      	ldr	r3, [sp, #0]
 80064f6:	9802      	ldr	r0, [sp, #8]
 80064f8:	4621      	mov	r1, r4
 80064fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80064fe:	f7ff fa88 	bl	8005a12 <quorem>
 8006502:	4603      	mov	r3, r0
 8006504:	3330      	adds	r3, #48	@ 0x30
 8006506:	9003      	str	r0, [sp, #12]
 8006508:	4639      	mov	r1, r7
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	9309      	str	r3, [sp, #36]	@ 0x24
 800650e:	f000 fc4d 	bl	8006dac <__mcmp>
 8006512:	462a      	mov	r2, r5
 8006514:	9004      	str	r0, [sp, #16]
 8006516:	4621      	mov	r1, r4
 8006518:	4648      	mov	r0, r9
 800651a:	f000 fc63 	bl	8006de4 <__mdiff>
 800651e:	68c2      	ldr	r2, [r0, #12]
 8006520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006522:	4606      	mov	r6, r0
 8006524:	bb02      	cbnz	r2, 8006568 <_dtoa_r+0xa40>
 8006526:	4601      	mov	r1, r0
 8006528:	9802      	ldr	r0, [sp, #8]
 800652a:	f000 fc3f 	bl	8006dac <__mcmp>
 800652e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006530:	4602      	mov	r2, r0
 8006532:	4631      	mov	r1, r6
 8006534:	4648      	mov	r0, r9
 8006536:	920c      	str	r2, [sp, #48]	@ 0x30
 8006538:	9309      	str	r3, [sp, #36]	@ 0x24
 800653a:	f000 fa05 	bl	8006948 <_Bfree>
 800653e:	9b07      	ldr	r3, [sp, #28]
 8006540:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006542:	9e00      	ldr	r6, [sp, #0]
 8006544:	ea42 0103 	orr.w	r1, r2, r3
 8006548:	9b06      	ldr	r3, [sp, #24]
 800654a:	4319      	orrs	r1, r3
 800654c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654e:	d10d      	bne.n	800656c <_dtoa_r+0xa44>
 8006550:	2b39      	cmp	r3, #57	@ 0x39
 8006552:	d027      	beq.n	80065a4 <_dtoa_r+0xa7c>
 8006554:	9a04      	ldr	r2, [sp, #16]
 8006556:	2a00      	cmp	r2, #0
 8006558:	dd01      	ble.n	800655e <_dtoa_r+0xa36>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	3331      	adds	r3, #49	@ 0x31
 800655e:	f88b 3000 	strb.w	r3, [fp]
 8006562:	e52e      	b.n	8005fc2 <_dtoa_r+0x49a>
 8006564:	4628      	mov	r0, r5
 8006566:	e7b9      	b.n	80064dc <_dtoa_r+0x9b4>
 8006568:	2201      	movs	r2, #1
 800656a:	e7e2      	b.n	8006532 <_dtoa_r+0xa0a>
 800656c:	9904      	ldr	r1, [sp, #16]
 800656e:	2900      	cmp	r1, #0
 8006570:	db04      	blt.n	800657c <_dtoa_r+0xa54>
 8006572:	9807      	ldr	r0, [sp, #28]
 8006574:	4301      	orrs	r1, r0
 8006576:	9806      	ldr	r0, [sp, #24]
 8006578:	4301      	orrs	r1, r0
 800657a:	d120      	bne.n	80065be <_dtoa_r+0xa96>
 800657c:	2a00      	cmp	r2, #0
 800657e:	ddee      	ble.n	800655e <_dtoa_r+0xa36>
 8006580:	9902      	ldr	r1, [sp, #8]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	4648      	mov	r0, r9
 8006588:	f000 fba4 	bl	8006cd4 <__lshift>
 800658c:	4621      	mov	r1, r4
 800658e:	9002      	str	r0, [sp, #8]
 8006590:	f000 fc0c 	bl	8006dac <__mcmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	9b00      	ldr	r3, [sp, #0]
 8006598:	dc02      	bgt.n	80065a0 <_dtoa_r+0xa78>
 800659a:	d1e0      	bne.n	800655e <_dtoa_r+0xa36>
 800659c:	07da      	lsls	r2, r3, #31
 800659e:	d5de      	bpl.n	800655e <_dtoa_r+0xa36>
 80065a0:	2b39      	cmp	r3, #57	@ 0x39
 80065a2:	d1da      	bne.n	800655a <_dtoa_r+0xa32>
 80065a4:	2339      	movs	r3, #57	@ 0x39
 80065a6:	f88b 3000 	strb.w	r3, [fp]
 80065aa:	4633      	mov	r3, r6
 80065ac:	461e      	mov	r6, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80065b4:	2a39      	cmp	r2, #57	@ 0x39
 80065b6:	d04e      	beq.n	8006656 <_dtoa_r+0xb2e>
 80065b8:	3201      	adds	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	e501      	b.n	8005fc2 <_dtoa_r+0x49a>
 80065be:	2a00      	cmp	r2, #0
 80065c0:	dd03      	ble.n	80065ca <_dtoa_r+0xaa2>
 80065c2:	2b39      	cmp	r3, #57	@ 0x39
 80065c4:	d0ee      	beq.n	80065a4 <_dtoa_r+0xa7c>
 80065c6:	3301      	adds	r3, #1
 80065c8:	e7c9      	b.n	800655e <_dtoa_r+0xa36>
 80065ca:	9a00      	ldr	r2, [sp, #0]
 80065cc:	9908      	ldr	r1, [sp, #32]
 80065ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80065d2:	428a      	cmp	r2, r1
 80065d4:	d028      	beq.n	8006628 <_dtoa_r+0xb00>
 80065d6:	9902      	ldr	r1, [sp, #8]
 80065d8:	2300      	movs	r3, #0
 80065da:	220a      	movs	r2, #10
 80065dc:	4648      	mov	r0, r9
 80065de:	f000 f9d5 	bl	800698c <__multadd>
 80065e2:	42af      	cmp	r7, r5
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	f04f 020a 	mov.w	r2, #10
 80065ee:	4639      	mov	r1, r7
 80065f0:	4648      	mov	r0, r9
 80065f2:	d107      	bne.n	8006604 <_dtoa_r+0xadc>
 80065f4:	f000 f9ca 	bl	800698c <__multadd>
 80065f8:	4607      	mov	r7, r0
 80065fa:	4605      	mov	r5, r0
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	e777      	b.n	80064f4 <_dtoa_r+0x9cc>
 8006604:	f000 f9c2 	bl	800698c <__multadd>
 8006608:	4629      	mov	r1, r5
 800660a:	4607      	mov	r7, r0
 800660c:	2300      	movs	r3, #0
 800660e:	220a      	movs	r2, #10
 8006610:	4648      	mov	r0, r9
 8006612:	f000 f9bb 	bl	800698c <__multadd>
 8006616:	4605      	mov	r5, r0
 8006618:	e7f0      	b.n	80065fc <_dtoa_r+0xad4>
 800661a:	f1bb 0f00 	cmp.w	fp, #0
 800661e:	bfcc      	ite	gt
 8006620:	465e      	movgt	r6, fp
 8006622:	2601      	movle	r6, #1
 8006624:	4456      	add	r6, sl
 8006626:	2700      	movs	r7, #0
 8006628:	9902      	ldr	r1, [sp, #8]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	2201      	movs	r2, #1
 800662e:	4648      	mov	r0, r9
 8006630:	f000 fb50 	bl	8006cd4 <__lshift>
 8006634:	4621      	mov	r1, r4
 8006636:	9002      	str	r0, [sp, #8]
 8006638:	f000 fbb8 	bl	8006dac <__mcmp>
 800663c:	2800      	cmp	r0, #0
 800663e:	dcb4      	bgt.n	80065aa <_dtoa_r+0xa82>
 8006640:	d102      	bne.n	8006648 <_dtoa_r+0xb20>
 8006642:	9b00      	ldr	r3, [sp, #0]
 8006644:	07db      	lsls	r3, r3, #31
 8006646:	d4b0      	bmi.n	80065aa <_dtoa_r+0xa82>
 8006648:	4633      	mov	r3, r6
 800664a:	461e      	mov	r6, r3
 800664c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006650:	2a30      	cmp	r2, #48	@ 0x30
 8006652:	d0fa      	beq.n	800664a <_dtoa_r+0xb22>
 8006654:	e4b5      	b.n	8005fc2 <_dtoa_r+0x49a>
 8006656:	459a      	cmp	sl, r3
 8006658:	d1a8      	bne.n	80065ac <_dtoa_r+0xa84>
 800665a:	2331      	movs	r3, #49	@ 0x31
 800665c:	f108 0801 	add.w	r8, r8, #1
 8006660:	f88a 3000 	strb.w	r3, [sl]
 8006664:	e4ad      	b.n	8005fc2 <_dtoa_r+0x49a>
 8006666:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006668:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80066c4 <_dtoa_r+0xb9c>
 800666c:	b11b      	cbz	r3, 8006676 <_dtoa_r+0xb4e>
 800666e:	f10a 0308 	add.w	r3, sl, #8
 8006672:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4650      	mov	r0, sl
 8006678:	b017      	add	sp, #92	@ 0x5c
 800667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667e:	9b07      	ldr	r3, [sp, #28]
 8006680:	2b01      	cmp	r3, #1
 8006682:	f77f ae2e 	ble.w	80062e2 <_dtoa_r+0x7ba>
 8006686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006688:	9308      	str	r3, [sp, #32]
 800668a:	2001      	movs	r0, #1
 800668c:	e64d      	b.n	800632a <_dtoa_r+0x802>
 800668e:	f1bb 0f00 	cmp.w	fp, #0
 8006692:	f77f aed9 	ble.w	8006448 <_dtoa_r+0x920>
 8006696:	4656      	mov	r6, sl
 8006698:	9802      	ldr	r0, [sp, #8]
 800669a:	4621      	mov	r1, r4
 800669c:	f7ff f9b9 	bl	8005a12 <quorem>
 80066a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80066a4:	f806 3b01 	strb.w	r3, [r6], #1
 80066a8:	eba6 020a 	sub.w	r2, r6, sl
 80066ac:	4593      	cmp	fp, r2
 80066ae:	ddb4      	ble.n	800661a <_dtoa_r+0xaf2>
 80066b0:	9902      	ldr	r1, [sp, #8]
 80066b2:	2300      	movs	r3, #0
 80066b4:	220a      	movs	r2, #10
 80066b6:	4648      	mov	r0, r9
 80066b8:	f000 f968 	bl	800698c <__multadd>
 80066bc:	9002      	str	r0, [sp, #8]
 80066be:	e7eb      	b.n	8006698 <_dtoa_r+0xb70>
 80066c0:	08007bc0 	.word	0x08007bc0
 80066c4:	08007b44 	.word	0x08007b44

080066c8 <_free_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4605      	mov	r5, r0
 80066cc:	2900      	cmp	r1, #0
 80066ce:	d041      	beq.n	8006754 <_free_r+0x8c>
 80066d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d4:	1f0c      	subs	r4, r1, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfb8      	it	lt
 80066da:	18e4      	addlt	r4, r4, r3
 80066dc:	f000 f8e8 	bl	80068b0 <__malloc_lock>
 80066e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006758 <_free_r+0x90>)
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	b933      	cbnz	r3, 80066f4 <_free_r+0x2c>
 80066e6:	6063      	str	r3, [r4, #4]
 80066e8:	6014      	str	r4, [r2, #0]
 80066ea:	4628      	mov	r0, r5
 80066ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f0:	f000 b8e4 	b.w	80068bc <__malloc_unlock>
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	d908      	bls.n	800670a <_free_r+0x42>
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	1821      	adds	r1, r4, r0
 80066fc:	428b      	cmp	r3, r1
 80066fe:	bf01      	itttt	eq
 8006700:	6819      	ldreq	r1, [r3, #0]
 8006702:	685b      	ldreq	r3, [r3, #4]
 8006704:	1809      	addeq	r1, r1, r0
 8006706:	6021      	streq	r1, [r4, #0]
 8006708:	e7ed      	b.n	80066e6 <_free_r+0x1e>
 800670a:	461a      	mov	r2, r3
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	b10b      	cbz	r3, 8006714 <_free_r+0x4c>
 8006710:	42a3      	cmp	r3, r4
 8006712:	d9fa      	bls.n	800670a <_free_r+0x42>
 8006714:	6811      	ldr	r1, [r2, #0]
 8006716:	1850      	adds	r0, r2, r1
 8006718:	42a0      	cmp	r0, r4
 800671a:	d10b      	bne.n	8006734 <_free_r+0x6c>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	4401      	add	r1, r0
 8006720:	1850      	adds	r0, r2, r1
 8006722:	4283      	cmp	r3, r0
 8006724:	6011      	str	r1, [r2, #0]
 8006726:	d1e0      	bne.n	80066ea <_free_r+0x22>
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	6053      	str	r3, [r2, #4]
 800672e:	4408      	add	r0, r1
 8006730:	6010      	str	r0, [r2, #0]
 8006732:	e7da      	b.n	80066ea <_free_r+0x22>
 8006734:	d902      	bls.n	800673c <_free_r+0x74>
 8006736:	230c      	movs	r3, #12
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	e7d6      	b.n	80066ea <_free_r+0x22>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	1821      	adds	r1, r4, r0
 8006740:	428b      	cmp	r3, r1
 8006742:	bf04      	itt	eq
 8006744:	6819      	ldreq	r1, [r3, #0]
 8006746:	685b      	ldreq	r3, [r3, #4]
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	bf04      	itt	eq
 800674c:	1809      	addeq	r1, r1, r0
 800674e:	6021      	streq	r1, [r4, #0]
 8006750:	6054      	str	r4, [r2, #4]
 8006752:	e7ca      	b.n	80066ea <_free_r+0x22>
 8006754:	bd38      	pop	{r3, r4, r5, pc}
 8006756:	bf00      	nop
 8006758:	2000046c 	.word	0x2000046c

0800675c <malloc>:
 800675c:	4b02      	ldr	r3, [pc, #8]	@ (8006768 <malloc+0xc>)
 800675e:	4601      	mov	r1, r0
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f000 b825 	b.w	80067b0 <_malloc_r>
 8006766:	bf00      	nop
 8006768:	20000018 	.word	0x20000018

0800676c <sbrk_aligned>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4e0f      	ldr	r6, [pc, #60]	@ (80067ac <sbrk_aligned+0x40>)
 8006770:	460c      	mov	r4, r1
 8006772:	6831      	ldr	r1, [r6, #0]
 8006774:	4605      	mov	r5, r0
 8006776:	b911      	cbnz	r1, 800677e <sbrk_aligned+0x12>
 8006778:	f000 fe3e 	bl	80073f8 <_sbrk_r>
 800677c:	6030      	str	r0, [r6, #0]
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	f000 fe39 	bl	80073f8 <_sbrk_r>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d103      	bne.n	8006792 <sbrk_aligned+0x26>
 800678a:	f04f 34ff 	mov.w	r4, #4294967295
 800678e:	4620      	mov	r0, r4
 8006790:	bd70      	pop	{r4, r5, r6, pc}
 8006792:	1cc4      	adds	r4, r0, #3
 8006794:	f024 0403 	bic.w	r4, r4, #3
 8006798:	42a0      	cmp	r0, r4
 800679a:	d0f8      	beq.n	800678e <sbrk_aligned+0x22>
 800679c:	1a21      	subs	r1, r4, r0
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 fe2a 	bl	80073f8 <_sbrk_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d1f2      	bne.n	800678e <sbrk_aligned+0x22>
 80067a8:	e7ef      	b.n	800678a <sbrk_aligned+0x1e>
 80067aa:	bf00      	nop
 80067ac:	20000468 	.word	0x20000468

080067b0 <_malloc_r>:
 80067b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b4:	1ccd      	adds	r5, r1, #3
 80067b6:	f025 0503 	bic.w	r5, r5, #3
 80067ba:	3508      	adds	r5, #8
 80067bc:	2d0c      	cmp	r5, #12
 80067be:	bf38      	it	cc
 80067c0:	250c      	movcc	r5, #12
 80067c2:	2d00      	cmp	r5, #0
 80067c4:	4606      	mov	r6, r0
 80067c6:	db01      	blt.n	80067cc <_malloc_r+0x1c>
 80067c8:	42a9      	cmp	r1, r5
 80067ca:	d904      	bls.n	80067d6 <_malloc_r+0x26>
 80067cc:	230c      	movs	r3, #12
 80067ce:	6033      	str	r3, [r6, #0]
 80067d0:	2000      	movs	r0, #0
 80067d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068ac <_malloc_r+0xfc>
 80067da:	f000 f869 	bl	80068b0 <__malloc_lock>
 80067de:	f8d8 3000 	ldr.w	r3, [r8]
 80067e2:	461c      	mov	r4, r3
 80067e4:	bb44      	cbnz	r4, 8006838 <_malloc_r+0x88>
 80067e6:	4629      	mov	r1, r5
 80067e8:	4630      	mov	r0, r6
 80067ea:	f7ff ffbf 	bl	800676c <sbrk_aligned>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	4604      	mov	r4, r0
 80067f2:	d158      	bne.n	80068a6 <_malloc_r+0xf6>
 80067f4:	f8d8 4000 	ldr.w	r4, [r8]
 80067f8:	4627      	mov	r7, r4
 80067fa:	2f00      	cmp	r7, #0
 80067fc:	d143      	bne.n	8006886 <_malloc_r+0xd6>
 80067fe:	2c00      	cmp	r4, #0
 8006800:	d04b      	beq.n	800689a <_malloc_r+0xea>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	4639      	mov	r1, r7
 8006806:	4630      	mov	r0, r6
 8006808:	eb04 0903 	add.w	r9, r4, r3
 800680c:	f000 fdf4 	bl	80073f8 <_sbrk_r>
 8006810:	4581      	cmp	r9, r0
 8006812:	d142      	bne.n	800689a <_malloc_r+0xea>
 8006814:	6821      	ldr	r1, [r4, #0]
 8006816:	1a6d      	subs	r5, r5, r1
 8006818:	4629      	mov	r1, r5
 800681a:	4630      	mov	r0, r6
 800681c:	f7ff ffa6 	bl	800676c <sbrk_aligned>
 8006820:	3001      	adds	r0, #1
 8006822:	d03a      	beq.n	800689a <_malloc_r+0xea>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	442b      	add	r3, r5
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	f8d8 3000 	ldr.w	r3, [r8]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	bb62      	cbnz	r2, 800688c <_malloc_r+0xdc>
 8006832:	f8c8 7000 	str.w	r7, [r8]
 8006836:	e00f      	b.n	8006858 <_malloc_r+0xa8>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	1b52      	subs	r2, r2, r5
 800683c:	d420      	bmi.n	8006880 <_malloc_r+0xd0>
 800683e:	2a0b      	cmp	r2, #11
 8006840:	d917      	bls.n	8006872 <_malloc_r+0xc2>
 8006842:	1961      	adds	r1, r4, r5
 8006844:	42a3      	cmp	r3, r4
 8006846:	6025      	str	r5, [r4, #0]
 8006848:	bf18      	it	ne
 800684a:	6059      	strne	r1, [r3, #4]
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	bf08      	it	eq
 8006850:	f8c8 1000 	streq.w	r1, [r8]
 8006854:	5162      	str	r2, [r4, r5]
 8006856:	604b      	str	r3, [r1, #4]
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f82f 	bl	80068bc <__malloc_unlock>
 800685e:	f104 000b 	add.w	r0, r4, #11
 8006862:	1d23      	adds	r3, r4, #4
 8006864:	f020 0007 	bic.w	r0, r0, #7
 8006868:	1ac2      	subs	r2, r0, r3
 800686a:	bf1c      	itt	ne
 800686c:	1a1b      	subne	r3, r3, r0
 800686e:	50a3      	strne	r3, [r4, r2]
 8006870:	e7af      	b.n	80067d2 <_malloc_r+0x22>
 8006872:	6862      	ldr	r2, [r4, #4]
 8006874:	42a3      	cmp	r3, r4
 8006876:	bf0c      	ite	eq
 8006878:	f8c8 2000 	streq.w	r2, [r8]
 800687c:	605a      	strne	r2, [r3, #4]
 800687e:	e7eb      	b.n	8006858 <_malloc_r+0xa8>
 8006880:	4623      	mov	r3, r4
 8006882:	6864      	ldr	r4, [r4, #4]
 8006884:	e7ae      	b.n	80067e4 <_malloc_r+0x34>
 8006886:	463c      	mov	r4, r7
 8006888:	687f      	ldr	r7, [r7, #4]
 800688a:	e7b6      	b.n	80067fa <_malloc_r+0x4a>
 800688c:	461a      	mov	r2, r3
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	42a3      	cmp	r3, r4
 8006892:	d1fb      	bne.n	800688c <_malloc_r+0xdc>
 8006894:	2300      	movs	r3, #0
 8006896:	6053      	str	r3, [r2, #4]
 8006898:	e7de      	b.n	8006858 <_malloc_r+0xa8>
 800689a:	230c      	movs	r3, #12
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	4630      	mov	r0, r6
 80068a0:	f000 f80c 	bl	80068bc <__malloc_unlock>
 80068a4:	e794      	b.n	80067d0 <_malloc_r+0x20>
 80068a6:	6005      	str	r5, [r0, #0]
 80068a8:	e7d6      	b.n	8006858 <_malloc_r+0xa8>
 80068aa:	bf00      	nop
 80068ac:	2000046c 	.word	0x2000046c

080068b0 <__malloc_lock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	@ (80068b8 <__malloc_lock+0x8>)
 80068b2:	f7ff b8ac 	b.w	8005a0e <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000464 	.word	0x20000464

080068bc <__malloc_unlock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	@ (80068c4 <__malloc_unlock+0x8>)
 80068be:	f7ff b8a7 	b.w	8005a10 <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	20000464 	.word	0x20000464

080068c8 <_Balloc>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	69c6      	ldr	r6, [r0, #28]
 80068cc:	4604      	mov	r4, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	b976      	cbnz	r6, 80068f0 <_Balloc+0x28>
 80068d2:	2010      	movs	r0, #16
 80068d4:	f7ff ff42 	bl	800675c <malloc>
 80068d8:	4602      	mov	r2, r0
 80068da:	61e0      	str	r0, [r4, #28]
 80068dc:	b920      	cbnz	r0, 80068e8 <_Balloc+0x20>
 80068de:	4b18      	ldr	r3, [pc, #96]	@ (8006940 <_Balloc+0x78>)
 80068e0:	4818      	ldr	r0, [pc, #96]	@ (8006944 <_Balloc+0x7c>)
 80068e2:	216b      	movs	r1, #107	@ 0x6b
 80068e4:	f000 fda6 	bl	8007434 <__assert_func>
 80068e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068ec:	6006      	str	r6, [r0, #0]
 80068ee:	60c6      	str	r6, [r0, #12]
 80068f0:	69e6      	ldr	r6, [r4, #28]
 80068f2:	68f3      	ldr	r3, [r6, #12]
 80068f4:	b183      	cbz	r3, 8006918 <_Balloc+0x50>
 80068f6:	69e3      	ldr	r3, [r4, #28]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068fe:	b9b8      	cbnz	r0, 8006930 <_Balloc+0x68>
 8006900:	2101      	movs	r1, #1
 8006902:	fa01 f605 	lsl.w	r6, r1, r5
 8006906:	1d72      	adds	r2, r6, #5
 8006908:	0092      	lsls	r2, r2, #2
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fdb0 	bl	8007470 <_calloc_r>
 8006910:	b160      	cbz	r0, 800692c <_Balloc+0x64>
 8006912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006916:	e00e      	b.n	8006936 <_Balloc+0x6e>
 8006918:	2221      	movs	r2, #33	@ 0x21
 800691a:	2104      	movs	r1, #4
 800691c:	4620      	mov	r0, r4
 800691e:	f000 fda7 	bl	8007470 <_calloc_r>
 8006922:	69e3      	ldr	r3, [r4, #28]
 8006924:	60f0      	str	r0, [r6, #12]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e4      	bne.n	80068f6 <_Balloc+0x2e>
 800692c:	2000      	movs	r0, #0
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	6802      	ldr	r2, [r0, #0]
 8006932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006936:	2300      	movs	r3, #0
 8006938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800693c:	e7f7      	b.n	800692e <_Balloc+0x66>
 800693e:	bf00      	nop
 8006940:	08007b51 	.word	0x08007b51
 8006944:	08007bd1 	.word	0x08007bd1

08006948 <_Bfree>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	69c6      	ldr	r6, [r0, #28]
 800694c:	4605      	mov	r5, r0
 800694e:	460c      	mov	r4, r1
 8006950:	b976      	cbnz	r6, 8006970 <_Bfree+0x28>
 8006952:	2010      	movs	r0, #16
 8006954:	f7ff ff02 	bl	800675c <malloc>
 8006958:	4602      	mov	r2, r0
 800695a:	61e8      	str	r0, [r5, #28]
 800695c:	b920      	cbnz	r0, 8006968 <_Bfree+0x20>
 800695e:	4b09      	ldr	r3, [pc, #36]	@ (8006984 <_Bfree+0x3c>)
 8006960:	4809      	ldr	r0, [pc, #36]	@ (8006988 <_Bfree+0x40>)
 8006962:	218f      	movs	r1, #143	@ 0x8f
 8006964:	f000 fd66 	bl	8007434 <__assert_func>
 8006968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800696c:	6006      	str	r6, [r0, #0]
 800696e:	60c6      	str	r6, [r0, #12]
 8006970:	b13c      	cbz	r4, 8006982 <_Bfree+0x3a>
 8006972:	69eb      	ldr	r3, [r5, #28]
 8006974:	6862      	ldr	r2, [r4, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800697c:	6021      	str	r1, [r4, #0]
 800697e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	08007b51 	.word	0x08007b51
 8006988:	08007bd1 	.word	0x08007bd1

0800698c <__multadd>:
 800698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006990:	690d      	ldr	r5, [r1, #16]
 8006992:	4607      	mov	r7, r0
 8006994:	460c      	mov	r4, r1
 8006996:	461e      	mov	r6, r3
 8006998:	f101 0c14 	add.w	ip, r1, #20
 800699c:	2000      	movs	r0, #0
 800699e:	f8dc 3000 	ldr.w	r3, [ip]
 80069a2:	b299      	uxth	r1, r3
 80069a4:	fb02 6101 	mla	r1, r2, r1, r6
 80069a8:	0c1e      	lsrs	r6, r3, #16
 80069aa:	0c0b      	lsrs	r3, r1, #16
 80069ac:	fb02 3306 	mla	r3, r2, r6, r3
 80069b0:	b289      	uxth	r1, r1
 80069b2:	3001      	adds	r0, #1
 80069b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069b8:	4285      	cmp	r5, r0
 80069ba:	f84c 1b04 	str.w	r1, [ip], #4
 80069be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069c2:	dcec      	bgt.n	800699e <__multadd+0x12>
 80069c4:	b30e      	cbz	r6, 8006a0a <__multadd+0x7e>
 80069c6:	68a3      	ldr	r3, [r4, #8]
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc19      	bgt.n	8006a00 <__multadd+0x74>
 80069cc:	6861      	ldr	r1, [r4, #4]
 80069ce:	4638      	mov	r0, r7
 80069d0:	3101      	adds	r1, #1
 80069d2:	f7ff ff79 	bl	80068c8 <_Balloc>
 80069d6:	4680      	mov	r8, r0
 80069d8:	b928      	cbnz	r0, 80069e6 <__multadd+0x5a>
 80069da:	4602      	mov	r2, r0
 80069dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a10 <__multadd+0x84>)
 80069de:	480d      	ldr	r0, [pc, #52]	@ (8006a14 <__multadd+0x88>)
 80069e0:	21ba      	movs	r1, #186	@ 0xba
 80069e2:	f000 fd27 	bl	8007434 <__assert_func>
 80069e6:	6922      	ldr	r2, [r4, #16]
 80069e8:	3202      	adds	r2, #2
 80069ea:	f104 010c 	add.w	r1, r4, #12
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	300c      	adds	r0, #12
 80069f2:	f000 fd11 	bl	8007418 <memcpy>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7ff ffa5 	bl	8006948 <_Bfree>
 80069fe:	4644      	mov	r4, r8
 8006a00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a04:	3501      	adds	r5, #1
 8006a06:	615e      	str	r6, [r3, #20]
 8006a08:	6125      	str	r5, [r4, #16]
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a10:	08007bc0 	.word	0x08007bc0
 8006a14:	08007bd1 	.word	0x08007bd1

08006a18 <__hi0bits>:
 8006a18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	bf36      	itet	cc
 8006a20:	0403      	lslcc	r3, r0, #16
 8006a22:	2000      	movcs	r0, #0
 8006a24:	2010      	movcc	r0, #16
 8006a26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a2a:	bf3c      	itt	cc
 8006a2c:	021b      	lslcc	r3, r3, #8
 8006a2e:	3008      	addcc	r0, #8
 8006a30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a34:	bf3c      	itt	cc
 8006a36:	011b      	lslcc	r3, r3, #4
 8006a38:	3004      	addcc	r0, #4
 8006a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a3e:	bf3c      	itt	cc
 8006a40:	009b      	lslcc	r3, r3, #2
 8006a42:	3002      	addcc	r0, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	db05      	blt.n	8006a54 <__hi0bits+0x3c>
 8006a48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a4c:	f100 0001 	add.w	r0, r0, #1
 8006a50:	bf08      	it	eq
 8006a52:	2020      	moveq	r0, #32
 8006a54:	4770      	bx	lr

08006a56 <__lo0bits>:
 8006a56:	6803      	ldr	r3, [r0, #0]
 8006a58:	4602      	mov	r2, r0
 8006a5a:	f013 0007 	ands.w	r0, r3, #7
 8006a5e:	d00b      	beq.n	8006a78 <__lo0bits+0x22>
 8006a60:	07d9      	lsls	r1, r3, #31
 8006a62:	d421      	bmi.n	8006aa8 <__lo0bits+0x52>
 8006a64:	0798      	lsls	r0, r3, #30
 8006a66:	bf49      	itett	mi
 8006a68:	085b      	lsrmi	r3, r3, #1
 8006a6a:	089b      	lsrpl	r3, r3, #2
 8006a6c:	2001      	movmi	r0, #1
 8006a6e:	6013      	strmi	r3, [r2, #0]
 8006a70:	bf5c      	itt	pl
 8006a72:	6013      	strpl	r3, [r2, #0]
 8006a74:	2002      	movpl	r0, #2
 8006a76:	4770      	bx	lr
 8006a78:	b299      	uxth	r1, r3
 8006a7a:	b909      	cbnz	r1, 8006a80 <__lo0bits+0x2a>
 8006a7c:	0c1b      	lsrs	r3, r3, #16
 8006a7e:	2010      	movs	r0, #16
 8006a80:	b2d9      	uxtb	r1, r3
 8006a82:	b909      	cbnz	r1, 8006a88 <__lo0bits+0x32>
 8006a84:	3008      	adds	r0, #8
 8006a86:	0a1b      	lsrs	r3, r3, #8
 8006a88:	0719      	lsls	r1, r3, #28
 8006a8a:	bf04      	itt	eq
 8006a8c:	091b      	lsreq	r3, r3, #4
 8006a8e:	3004      	addeq	r0, #4
 8006a90:	0799      	lsls	r1, r3, #30
 8006a92:	bf04      	itt	eq
 8006a94:	089b      	lsreq	r3, r3, #2
 8006a96:	3002      	addeq	r0, #2
 8006a98:	07d9      	lsls	r1, r3, #31
 8006a9a:	d403      	bmi.n	8006aa4 <__lo0bits+0x4e>
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	f100 0001 	add.w	r0, r0, #1
 8006aa2:	d003      	beq.n	8006aac <__lo0bits+0x56>
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	4770      	bx	lr
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	4770      	bx	lr
 8006aac:	2020      	movs	r0, #32
 8006aae:	4770      	bx	lr

08006ab0 <__i2b>:
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	f7ff ff07 	bl	80068c8 <_Balloc>
 8006aba:	4602      	mov	r2, r0
 8006abc:	b928      	cbnz	r0, 8006aca <__i2b+0x1a>
 8006abe:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <__i2b+0x24>)
 8006ac0:	4805      	ldr	r0, [pc, #20]	@ (8006ad8 <__i2b+0x28>)
 8006ac2:	f240 1145 	movw	r1, #325	@ 0x145
 8006ac6:	f000 fcb5 	bl	8007434 <__assert_func>
 8006aca:	2301      	movs	r3, #1
 8006acc:	6144      	str	r4, [r0, #20]
 8006ace:	6103      	str	r3, [r0, #16]
 8006ad0:	bd10      	pop	{r4, pc}
 8006ad2:	bf00      	nop
 8006ad4:	08007bc0 	.word	0x08007bc0
 8006ad8:	08007bd1 	.word	0x08007bd1

08006adc <__multiply>:
 8006adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae0:	4617      	mov	r7, r2
 8006ae2:	690a      	ldr	r2, [r1, #16]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	bfa8      	it	ge
 8006aea:	463b      	movge	r3, r7
 8006aec:	4689      	mov	r9, r1
 8006aee:	bfa4      	itt	ge
 8006af0:	460f      	movge	r7, r1
 8006af2:	4699      	movge	r9, r3
 8006af4:	693d      	ldr	r5, [r7, #16]
 8006af6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	eb05 060a 	add.w	r6, r5, sl
 8006b02:	42b3      	cmp	r3, r6
 8006b04:	b085      	sub	sp, #20
 8006b06:	bfb8      	it	lt
 8006b08:	3101      	addlt	r1, #1
 8006b0a:	f7ff fedd 	bl	80068c8 <_Balloc>
 8006b0e:	b930      	cbnz	r0, 8006b1e <__multiply+0x42>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b41      	ldr	r3, [pc, #260]	@ (8006c18 <__multiply+0x13c>)
 8006b14:	4841      	ldr	r0, [pc, #260]	@ (8006c1c <__multiply+0x140>)
 8006b16:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b1a:	f000 fc8b 	bl	8007434 <__assert_func>
 8006b1e:	f100 0414 	add.w	r4, r0, #20
 8006b22:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006b26:	4623      	mov	r3, r4
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4573      	cmp	r3, lr
 8006b2c:	d320      	bcc.n	8006b70 <__multiply+0x94>
 8006b2e:	f107 0814 	add.w	r8, r7, #20
 8006b32:	f109 0114 	add.w	r1, r9, #20
 8006b36:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006b3a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006b3e:	9302      	str	r3, [sp, #8]
 8006b40:	1beb      	subs	r3, r5, r7
 8006b42:	3b15      	subs	r3, #21
 8006b44:	f023 0303 	bic.w	r3, r3, #3
 8006b48:	3304      	adds	r3, #4
 8006b4a:	3715      	adds	r7, #21
 8006b4c:	42bd      	cmp	r5, r7
 8006b4e:	bf38      	it	cc
 8006b50:	2304      	movcc	r3, #4
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	9b02      	ldr	r3, [sp, #8]
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	428b      	cmp	r3, r1
 8006b5a:	d80c      	bhi.n	8006b76 <__multiply+0x9a>
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	dd03      	ble.n	8006b68 <__multiply+0x8c>
 8006b60:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d055      	beq.n	8006c14 <__multiply+0x138>
 8006b68:	6106      	str	r6, [r0, #16]
 8006b6a:	b005      	add	sp, #20
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b70:	f843 2b04 	str.w	r2, [r3], #4
 8006b74:	e7d9      	b.n	8006b2a <__multiply+0x4e>
 8006b76:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b7a:	f1ba 0f00 	cmp.w	sl, #0
 8006b7e:	d01f      	beq.n	8006bc0 <__multiply+0xe4>
 8006b80:	46c4      	mov	ip, r8
 8006b82:	46a1      	mov	r9, r4
 8006b84:	2700      	movs	r7, #0
 8006b86:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006b8a:	f8d9 3000 	ldr.w	r3, [r9]
 8006b8e:	fa1f fb82 	uxth.w	fp, r2
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b98:	443b      	add	r3, r7
 8006b9a:	f8d9 7000 	ldr.w	r7, [r9]
 8006b9e:	0c12      	lsrs	r2, r2, #16
 8006ba0:	0c3f      	lsrs	r7, r7, #16
 8006ba2:	fb0a 7202 	mla	r2, sl, r2, r7
 8006ba6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bb0:	4565      	cmp	r5, ip
 8006bb2:	f849 3b04 	str.w	r3, [r9], #4
 8006bb6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006bba:	d8e4      	bhi.n	8006b86 <__multiply+0xaa>
 8006bbc:	9b01      	ldr	r3, [sp, #4]
 8006bbe:	50e7      	str	r7, [r4, r3]
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006bc6:	3104      	adds	r1, #4
 8006bc8:	f1b9 0f00 	cmp.w	r9, #0
 8006bcc:	d020      	beq.n	8006c10 <__multiply+0x134>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	4647      	mov	r7, r8
 8006bd2:	46a4      	mov	ip, r4
 8006bd4:	f04f 0a00 	mov.w	sl, #0
 8006bd8:	f8b7 b000 	ldrh.w	fp, [r7]
 8006bdc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006be0:	fb09 220b 	mla	r2, r9, fp, r2
 8006be4:	4452      	add	r2, sl
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bec:	f84c 3b04 	str.w	r3, [ip], #4
 8006bf0:	f857 3b04 	ldr.w	r3, [r7], #4
 8006bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bf8:	f8bc 3000 	ldrh.w	r3, [ip]
 8006bfc:	fb09 330a 	mla	r3, r9, sl, r3
 8006c00:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006c04:	42bd      	cmp	r5, r7
 8006c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c0a:	d8e5      	bhi.n	8006bd8 <__multiply+0xfc>
 8006c0c:	9a01      	ldr	r2, [sp, #4]
 8006c0e:	50a3      	str	r3, [r4, r2]
 8006c10:	3404      	adds	r4, #4
 8006c12:	e79f      	b.n	8006b54 <__multiply+0x78>
 8006c14:	3e01      	subs	r6, #1
 8006c16:	e7a1      	b.n	8006b5c <__multiply+0x80>
 8006c18:	08007bc0 	.word	0x08007bc0
 8006c1c:	08007bd1 	.word	0x08007bd1

08006c20 <__pow5mult>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	4615      	mov	r5, r2
 8006c26:	f012 0203 	ands.w	r2, r2, #3
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	460e      	mov	r6, r1
 8006c2e:	d007      	beq.n	8006c40 <__pow5mult+0x20>
 8006c30:	4c25      	ldr	r4, [pc, #148]	@ (8006cc8 <__pow5mult+0xa8>)
 8006c32:	3a01      	subs	r2, #1
 8006c34:	2300      	movs	r3, #0
 8006c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c3a:	f7ff fea7 	bl	800698c <__multadd>
 8006c3e:	4606      	mov	r6, r0
 8006c40:	10ad      	asrs	r5, r5, #2
 8006c42:	d03d      	beq.n	8006cc0 <__pow5mult+0xa0>
 8006c44:	69fc      	ldr	r4, [r7, #28]
 8006c46:	b97c      	cbnz	r4, 8006c68 <__pow5mult+0x48>
 8006c48:	2010      	movs	r0, #16
 8006c4a:	f7ff fd87 	bl	800675c <malloc>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	61f8      	str	r0, [r7, #28]
 8006c52:	b928      	cbnz	r0, 8006c60 <__pow5mult+0x40>
 8006c54:	4b1d      	ldr	r3, [pc, #116]	@ (8006ccc <__pow5mult+0xac>)
 8006c56:	481e      	ldr	r0, [pc, #120]	@ (8006cd0 <__pow5mult+0xb0>)
 8006c58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c5c:	f000 fbea 	bl	8007434 <__assert_func>
 8006c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c64:	6004      	str	r4, [r0, #0]
 8006c66:	60c4      	str	r4, [r0, #12]
 8006c68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c70:	b94c      	cbnz	r4, 8006c86 <__pow5mult+0x66>
 8006c72:	f240 2171 	movw	r1, #625	@ 0x271
 8006c76:	4638      	mov	r0, r7
 8006c78:	f7ff ff1a 	bl	8006ab0 <__i2b>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c82:	4604      	mov	r4, r0
 8006c84:	6003      	str	r3, [r0, #0]
 8006c86:	f04f 0900 	mov.w	r9, #0
 8006c8a:	07eb      	lsls	r3, r5, #31
 8006c8c:	d50a      	bpl.n	8006ca4 <__pow5mult+0x84>
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4622      	mov	r2, r4
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7ff ff22 	bl	8006adc <__multiply>
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4680      	mov	r8, r0
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f7ff fe53 	bl	8006948 <_Bfree>
 8006ca2:	4646      	mov	r6, r8
 8006ca4:	106d      	asrs	r5, r5, #1
 8006ca6:	d00b      	beq.n	8006cc0 <__pow5mult+0xa0>
 8006ca8:	6820      	ldr	r0, [r4, #0]
 8006caa:	b938      	cbnz	r0, 8006cbc <__pow5mult+0x9c>
 8006cac:	4622      	mov	r2, r4
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff ff13 	bl	8006adc <__multiply>
 8006cb6:	6020      	str	r0, [r4, #0]
 8006cb8:	f8c0 9000 	str.w	r9, [r0]
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	e7e4      	b.n	8006c8a <__pow5mult+0x6a>
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc6:	bf00      	nop
 8006cc8:	08007c84 	.word	0x08007c84
 8006ccc:	08007b51 	.word	0x08007b51
 8006cd0:	08007bd1 	.word	0x08007bd1

08006cd4 <__lshift>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	460c      	mov	r4, r1
 8006cda:	6849      	ldr	r1, [r1, #4]
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ce2:	68a3      	ldr	r3, [r4, #8]
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	4691      	mov	r9, r2
 8006ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cec:	f108 0601 	add.w	r6, r8, #1
 8006cf0:	42b3      	cmp	r3, r6
 8006cf2:	db0b      	blt.n	8006d0c <__lshift+0x38>
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7ff fde7 	bl	80068c8 <_Balloc>
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	b948      	cbnz	r0, 8006d12 <__lshift+0x3e>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4b28      	ldr	r3, [pc, #160]	@ (8006da4 <__lshift+0xd0>)
 8006d02:	4829      	ldr	r0, [pc, #164]	@ (8006da8 <__lshift+0xd4>)
 8006d04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d08:	f000 fb94 	bl	8007434 <__assert_func>
 8006d0c:	3101      	adds	r1, #1
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	e7ee      	b.n	8006cf0 <__lshift+0x1c>
 8006d12:	2300      	movs	r3, #0
 8006d14:	f100 0114 	add.w	r1, r0, #20
 8006d18:	f100 0210 	add.w	r2, r0, #16
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	4553      	cmp	r3, sl
 8006d20:	db33      	blt.n	8006d8a <__lshift+0xb6>
 8006d22:	6920      	ldr	r0, [r4, #16]
 8006d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d28:	f104 0314 	add.w	r3, r4, #20
 8006d2c:	f019 091f 	ands.w	r9, r9, #31
 8006d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d38:	d02b      	beq.n	8006d92 <__lshift+0xbe>
 8006d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006d3e:	468a      	mov	sl, r1
 8006d40:	2200      	movs	r2, #0
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	fa00 f009 	lsl.w	r0, r0, r9
 8006d48:	4310      	orrs	r0, r2
 8006d4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d52:	459c      	cmp	ip, r3
 8006d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d58:	d8f3      	bhi.n	8006d42 <__lshift+0x6e>
 8006d5a:	ebac 0304 	sub.w	r3, ip, r4
 8006d5e:	3b15      	subs	r3, #21
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	3304      	adds	r3, #4
 8006d66:	f104 0015 	add.w	r0, r4, #21
 8006d6a:	4560      	cmp	r0, ip
 8006d6c:	bf88      	it	hi
 8006d6e:	2304      	movhi	r3, #4
 8006d70:	50ca      	str	r2, [r1, r3]
 8006d72:	b10a      	cbz	r2, 8006d78 <__lshift+0xa4>
 8006d74:	f108 0602 	add.w	r6, r8, #2
 8006d78:	3e01      	subs	r6, #1
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	612e      	str	r6, [r5, #16]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	f7ff fde2 	bl	8006948 <_Bfree>
 8006d84:	4628      	mov	r0, r5
 8006d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d8e:	3301      	adds	r3, #1
 8006d90:	e7c5      	b.n	8006d1e <__lshift+0x4a>
 8006d92:	3904      	subs	r1, #4
 8006d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d9c:	459c      	cmp	ip, r3
 8006d9e:	d8f9      	bhi.n	8006d94 <__lshift+0xc0>
 8006da0:	e7ea      	b.n	8006d78 <__lshift+0xa4>
 8006da2:	bf00      	nop
 8006da4:	08007bc0 	.word	0x08007bc0
 8006da8:	08007bd1 	.word	0x08007bd1

08006dac <__mcmp>:
 8006dac:	690a      	ldr	r2, [r1, #16]
 8006dae:	4603      	mov	r3, r0
 8006db0:	6900      	ldr	r0, [r0, #16]
 8006db2:	1a80      	subs	r0, r0, r2
 8006db4:	b530      	push	{r4, r5, lr}
 8006db6:	d10e      	bne.n	8006dd6 <__mcmp+0x2a>
 8006db8:	3314      	adds	r3, #20
 8006dba:	3114      	adds	r1, #20
 8006dbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006dc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006dc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006dc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006dcc:	4295      	cmp	r5, r2
 8006dce:	d003      	beq.n	8006dd8 <__mcmp+0x2c>
 8006dd0:	d205      	bcs.n	8006dde <__mcmp+0x32>
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	bd30      	pop	{r4, r5, pc}
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	d3f3      	bcc.n	8006dc4 <__mcmp+0x18>
 8006ddc:	e7fb      	b.n	8006dd6 <__mcmp+0x2a>
 8006dde:	2001      	movs	r0, #1
 8006de0:	e7f9      	b.n	8006dd6 <__mcmp+0x2a>
	...

08006de4 <__mdiff>:
 8006de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	4689      	mov	r9, r1
 8006dea:	4606      	mov	r6, r0
 8006dec:	4611      	mov	r1, r2
 8006dee:	4648      	mov	r0, r9
 8006df0:	4614      	mov	r4, r2
 8006df2:	f7ff ffdb 	bl	8006dac <__mcmp>
 8006df6:	1e05      	subs	r5, r0, #0
 8006df8:	d112      	bne.n	8006e20 <__mdiff+0x3c>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff fd63 	bl	80068c8 <_Balloc>
 8006e02:	4602      	mov	r2, r0
 8006e04:	b928      	cbnz	r0, 8006e12 <__mdiff+0x2e>
 8006e06:	4b3f      	ldr	r3, [pc, #252]	@ (8006f04 <__mdiff+0x120>)
 8006e08:	f240 2137 	movw	r1, #567	@ 0x237
 8006e0c:	483e      	ldr	r0, [pc, #248]	@ (8006f08 <__mdiff+0x124>)
 8006e0e:	f000 fb11 	bl	8007434 <__assert_func>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e18:	4610      	mov	r0, r2
 8006e1a:	b003      	add	sp, #12
 8006e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e20:	bfbc      	itt	lt
 8006e22:	464b      	movlt	r3, r9
 8006e24:	46a1      	movlt	r9, r4
 8006e26:	4630      	mov	r0, r6
 8006e28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e2c:	bfba      	itte	lt
 8006e2e:	461c      	movlt	r4, r3
 8006e30:	2501      	movlt	r5, #1
 8006e32:	2500      	movge	r5, #0
 8006e34:	f7ff fd48 	bl	80068c8 <_Balloc>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	b918      	cbnz	r0, 8006e44 <__mdiff+0x60>
 8006e3c:	4b31      	ldr	r3, [pc, #196]	@ (8006f04 <__mdiff+0x120>)
 8006e3e:	f240 2145 	movw	r1, #581	@ 0x245
 8006e42:	e7e3      	b.n	8006e0c <__mdiff+0x28>
 8006e44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e48:	6926      	ldr	r6, [r4, #16]
 8006e4a:	60c5      	str	r5, [r0, #12]
 8006e4c:	f109 0310 	add.w	r3, r9, #16
 8006e50:	f109 0514 	add.w	r5, r9, #20
 8006e54:	f104 0e14 	add.w	lr, r4, #20
 8006e58:	f100 0b14 	add.w	fp, r0, #20
 8006e5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	46d9      	mov	r9, fp
 8006e68:	f04f 0c00 	mov.w	ip, #0
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	fa1f f38a 	uxth.w	r3, sl
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	b283      	uxth	r3, r0
 8006e80:	1acb      	subs	r3, r1, r3
 8006e82:	0c00      	lsrs	r0, r0, #16
 8006e84:	4463      	add	r3, ip
 8006e86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e94:	4576      	cmp	r6, lr
 8006e96:	f849 3b04 	str.w	r3, [r9], #4
 8006e9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e9e:	d8e5      	bhi.n	8006e6c <__mdiff+0x88>
 8006ea0:	1b33      	subs	r3, r6, r4
 8006ea2:	3b15      	subs	r3, #21
 8006ea4:	f023 0303 	bic.w	r3, r3, #3
 8006ea8:	3415      	adds	r4, #21
 8006eaa:	3304      	adds	r3, #4
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	bf38      	it	cc
 8006eb0:	2304      	movcc	r3, #4
 8006eb2:	441d      	add	r5, r3
 8006eb4:	445b      	add	r3, fp
 8006eb6:	461e      	mov	r6, r3
 8006eb8:	462c      	mov	r4, r5
 8006eba:	4544      	cmp	r4, r8
 8006ebc:	d30e      	bcc.n	8006edc <__mdiff+0xf8>
 8006ebe:	f108 0103 	add.w	r1, r8, #3
 8006ec2:	1b49      	subs	r1, r1, r5
 8006ec4:	f021 0103 	bic.w	r1, r1, #3
 8006ec8:	3d03      	subs	r5, #3
 8006eca:	45a8      	cmp	r8, r5
 8006ecc:	bf38      	it	cc
 8006ece:	2100      	movcc	r1, #0
 8006ed0:	440b      	add	r3, r1
 8006ed2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ed6:	b191      	cbz	r1, 8006efe <__mdiff+0x11a>
 8006ed8:	6117      	str	r7, [r2, #16]
 8006eda:	e79d      	b.n	8006e18 <__mdiff+0x34>
 8006edc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ee0:	46e6      	mov	lr, ip
 8006ee2:	0c08      	lsrs	r0, r1, #16
 8006ee4:	fa1c fc81 	uxtah	ip, ip, r1
 8006ee8:	4471      	add	r1, lr
 8006eea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006eee:	b289      	uxth	r1, r1
 8006ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ef4:	f846 1b04 	str.w	r1, [r6], #4
 8006ef8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006efc:	e7dd      	b.n	8006eba <__mdiff+0xd6>
 8006efe:	3f01      	subs	r7, #1
 8006f00:	e7e7      	b.n	8006ed2 <__mdiff+0xee>
 8006f02:	bf00      	nop
 8006f04:	08007bc0 	.word	0x08007bc0
 8006f08:	08007bd1 	.word	0x08007bd1

08006f0c <__d2b>:
 8006f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f10:	460f      	mov	r7, r1
 8006f12:	2101      	movs	r1, #1
 8006f14:	ec59 8b10 	vmov	r8, r9, d0
 8006f18:	4616      	mov	r6, r2
 8006f1a:	f7ff fcd5 	bl	80068c8 <_Balloc>
 8006f1e:	4604      	mov	r4, r0
 8006f20:	b930      	cbnz	r0, 8006f30 <__d2b+0x24>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4b23      	ldr	r3, [pc, #140]	@ (8006fb4 <__d2b+0xa8>)
 8006f26:	4824      	ldr	r0, [pc, #144]	@ (8006fb8 <__d2b+0xac>)
 8006f28:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f2c:	f000 fa82 	bl	8007434 <__assert_func>
 8006f30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f38:	b10d      	cbz	r5, 8006f3e <__d2b+0x32>
 8006f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	f1b8 0300 	subs.w	r3, r8, #0
 8006f44:	d023      	beq.n	8006f8e <__d2b+0x82>
 8006f46:	4668      	mov	r0, sp
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	f7ff fd84 	bl	8006a56 <__lo0bits>
 8006f4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f52:	b1d0      	cbz	r0, 8006f8a <__d2b+0x7e>
 8006f54:	f1c0 0320 	rsb	r3, r0, #32
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	40c2      	lsrs	r2, r0
 8006f60:	6163      	str	r3, [r4, #20]
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	61a3      	str	r3, [r4, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2201      	moveq	r2, #1
 8006f6e:	2202      	movne	r2, #2
 8006f70:	6122      	str	r2, [r4, #16]
 8006f72:	b1a5      	cbz	r5, 8006f9e <__d2b+0x92>
 8006f74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f78:	4405      	add	r5, r0
 8006f7a:	603d      	str	r5, [r7, #0]
 8006f7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f80:	6030      	str	r0, [r6, #0]
 8006f82:	4620      	mov	r0, r4
 8006f84:	b003      	add	sp, #12
 8006f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	6161      	str	r1, [r4, #20]
 8006f8c:	e7ea      	b.n	8006f64 <__d2b+0x58>
 8006f8e:	a801      	add	r0, sp, #4
 8006f90:	f7ff fd61 	bl	8006a56 <__lo0bits>
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	6163      	str	r3, [r4, #20]
 8006f98:	3020      	adds	r0, #32
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	e7e8      	b.n	8006f70 <__d2b+0x64>
 8006f9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006fa6:	6038      	str	r0, [r7, #0]
 8006fa8:	6918      	ldr	r0, [r3, #16]
 8006faa:	f7ff fd35 	bl	8006a18 <__hi0bits>
 8006fae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fb2:	e7e5      	b.n	8006f80 <__d2b+0x74>
 8006fb4:	08007bc0 	.word	0x08007bc0
 8006fb8:	08007bd1 	.word	0x08007bd1

08006fbc <__ssputs_r>:
 8006fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	688e      	ldr	r6, [r1, #8]
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	42be      	cmp	r6, r7
 8006fc6:	680b      	ldr	r3, [r1, #0]
 8006fc8:	4682      	mov	sl, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	4690      	mov	r8, r2
 8006fce:	d82d      	bhi.n	800702c <__ssputs_r+0x70>
 8006fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fd8:	d026      	beq.n	8007028 <__ssputs_r+0x6c>
 8006fda:	6965      	ldr	r5, [r4, #20]
 8006fdc:	6909      	ldr	r1, [r1, #16]
 8006fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe2:	eba3 0901 	sub.w	r9, r3, r1
 8006fe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fea:	1c7b      	adds	r3, r7, #1
 8006fec:	444b      	add	r3, r9
 8006fee:	106d      	asrs	r5, r5, #1
 8006ff0:	429d      	cmp	r5, r3
 8006ff2:	bf38      	it	cc
 8006ff4:	461d      	movcc	r5, r3
 8006ff6:	0553      	lsls	r3, r2, #21
 8006ff8:	d527      	bpl.n	800704a <__ssputs_r+0x8e>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	f7ff fbd8 	bl	80067b0 <_malloc_r>
 8007000:	4606      	mov	r6, r0
 8007002:	b360      	cbz	r0, 800705e <__ssputs_r+0xa2>
 8007004:	6921      	ldr	r1, [r4, #16]
 8007006:	464a      	mov	r2, r9
 8007008:	f000 fa06 	bl	8007418 <memcpy>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	6126      	str	r6, [r4, #16]
 800701a:	6165      	str	r5, [r4, #20]
 800701c:	444e      	add	r6, r9
 800701e:	eba5 0509 	sub.w	r5, r5, r9
 8007022:	6026      	str	r6, [r4, #0]
 8007024:	60a5      	str	r5, [r4, #8]
 8007026:	463e      	mov	r6, r7
 8007028:	42be      	cmp	r6, r7
 800702a:	d900      	bls.n	800702e <__ssputs_r+0x72>
 800702c:	463e      	mov	r6, r7
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	4632      	mov	r2, r6
 8007032:	4641      	mov	r1, r8
 8007034:	f000 f9c6 	bl	80073c4 <memmove>
 8007038:	68a3      	ldr	r3, [r4, #8]
 800703a:	1b9b      	subs	r3, r3, r6
 800703c:	60a3      	str	r3, [r4, #8]
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	4433      	add	r3, r6
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	2000      	movs	r0, #0
 8007046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704a:	462a      	mov	r2, r5
 800704c:	f000 fa36 	bl	80074bc <_realloc_r>
 8007050:	4606      	mov	r6, r0
 8007052:	2800      	cmp	r0, #0
 8007054:	d1e0      	bne.n	8007018 <__ssputs_r+0x5c>
 8007056:	6921      	ldr	r1, [r4, #16]
 8007058:	4650      	mov	r0, sl
 800705a:	f7ff fb35 	bl	80066c8 <_free_r>
 800705e:	230c      	movs	r3, #12
 8007060:	f8ca 3000 	str.w	r3, [sl]
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	e7e9      	b.n	8007046 <__ssputs_r+0x8a>
	...

08007074 <_svfiprintf_r>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	4698      	mov	r8, r3
 800707a:	898b      	ldrh	r3, [r1, #12]
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	b09d      	sub	sp, #116	@ 0x74
 8007080:	4607      	mov	r7, r0
 8007082:	460d      	mov	r5, r1
 8007084:	4614      	mov	r4, r2
 8007086:	d510      	bpl.n	80070aa <_svfiprintf_r+0x36>
 8007088:	690b      	ldr	r3, [r1, #16]
 800708a:	b973      	cbnz	r3, 80070aa <_svfiprintf_r+0x36>
 800708c:	2140      	movs	r1, #64	@ 0x40
 800708e:	f7ff fb8f 	bl	80067b0 <_malloc_r>
 8007092:	6028      	str	r0, [r5, #0]
 8007094:	6128      	str	r0, [r5, #16]
 8007096:	b930      	cbnz	r0, 80070a6 <_svfiprintf_r+0x32>
 8007098:	230c      	movs	r3, #12
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	b01d      	add	sp, #116	@ 0x74
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a6:	2340      	movs	r3, #64	@ 0x40
 80070a8:	616b      	str	r3, [r5, #20]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ae:	2320      	movs	r3, #32
 80070b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b8:	2330      	movs	r3, #48	@ 0x30
 80070ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007258 <_svfiprintf_r+0x1e4>
 80070be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070c2:	f04f 0901 	mov.w	r9, #1
 80070c6:	4623      	mov	r3, r4
 80070c8:	469a      	mov	sl, r3
 80070ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ce:	b10a      	cbz	r2, 80070d4 <_svfiprintf_r+0x60>
 80070d0:	2a25      	cmp	r2, #37	@ 0x25
 80070d2:	d1f9      	bne.n	80070c8 <_svfiprintf_r+0x54>
 80070d4:	ebba 0b04 	subs.w	fp, sl, r4
 80070d8:	d00b      	beq.n	80070f2 <_svfiprintf_r+0x7e>
 80070da:	465b      	mov	r3, fp
 80070dc:	4622      	mov	r2, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	4638      	mov	r0, r7
 80070e2:	f7ff ff6b 	bl	8006fbc <__ssputs_r>
 80070e6:	3001      	adds	r0, #1
 80070e8:	f000 80a7 	beq.w	800723a <_svfiprintf_r+0x1c6>
 80070ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070ee:	445a      	add	r2, fp
 80070f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070f2:	f89a 3000 	ldrb.w	r3, [sl]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 809f 	beq.w	800723a <_svfiprintf_r+0x1c6>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007106:	f10a 0a01 	add.w	sl, sl, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	9307      	str	r3, [sp, #28]
 800710e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007112:	931a      	str	r3, [sp, #104]	@ 0x68
 8007114:	4654      	mov	r4, sl
 8007116:	2205      	movs	r2, #5
 8007118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711c:	484e      	ldr	r0, [pc, #312]	@ (8007258 <_svfiprintf_r+0x1e4>)
 800711e:	f7f9 f877 	bl	8000210 <memchr>
 8007122:	9a04      	ldr	r2, [sp, #16]
 8007124:	b9d8      	cbnz	r0, 800715e <_svfiprintf_r+0xea>
 8007126:	06d0      	lsls	r0, r2, #27
 8007128:	bf44      	itt	mi
 800712a:	2320      	movmi	r3, #32
 800712c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007130:	0711      	lsls	r1, r2, #28
 8007132:	bf44      	itt	mi
 8007134:	232b      	movmi	r3, #43	@ 0x2b
 8007136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800713a:	f89a 3000 	ldrb.w	r3, [sl]
 800713e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007140:	d015      	beq.n	800716e <_svfiprintf_r+0xfa>
 8007142:	9a07      	ldr	r2, [sp, #28]
 8007144:	4654      	mov	r4, sl
 8007146:	2000      	movs	r0, #0
 8007148:	f04f 0c0a 	mov.w	ip, #10
 800714c:	4621      	mov	r1, r4
 800714e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007152:	3b30      	subs	r3, #48	@ 0x30
 8007154:	2b09      	cmp	r3, #9
 8007156:	d94b      	bls.n	80071f0 <_svfiprintf_r+0x17c>
 8007158:	b1b0      	cbz	r0, 8007188 <_svfiprintf_r+0x114>
 800715a:	9207      	str	r2, [sp, #28]
 800715c:	e014      	b.n	8007188 <_svfiprintf_r+0x114>
 800715e:	eba0 0308 	sub.w	r3, r0, r8
 8007162:	fa09 f303 	lsl.w	r3, r9, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	9304      	str	r3, [sp, #16]
 800716a:	46a2      	mov	sl, r4
 800716c:	e7d2      	b.n	8007114 <_svfiprintf_r+0xa0>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	1d19      	adds	r1, r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	9103      	str	r1, [sp, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfbb      	ittet	lt
 800717a:	425b      	neglt	r3, r3
 800717c:	f042 0202 	orrlt.w	r2, r2, #2
 8007180:	9307      	strge	r3, [sp, #28]
 8007182:	9307      	strlt	r3, [sp, #28]
 8007184:	bfb8      	it	lt
 8007186:	9204      	strlt	r2, [sp, #16]
 8007188:	7823      	ldrb	r3, [r4, #0]
 800718a:	2b2e      	cmp	r3, #46	@ 0x2e
 800718c:	d10a      	bne.n	80071a4 <_svfiprintf_r+0x130>
 800718e:	7863      	ldrb	r3, [r4, #1]
 8007190:	2b2a      	cmp	r3, #42	@ 0x2a
 8007192:	d132      	bne.n	80071fa <_svfiprintf_r+0x186>
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	9203      	str	r2, [sp, #12]
 800719c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071a0:	3402      	adds	r4, #2
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007268 <_svfiprintf_r+0x1f4>
 80071a8:	7821      	ldrb	r1, [r4, #0]
 80071aa:	2203      	movs	r2, #3
 80071ac:	4650      	mov	r0, sl
 80071ae:	f7f9 f82f 	bl	8000210 <memchr>
 80071b2:	b138      	cbz	r0, 80071c4 <_svfiprintf_r+0x150>
 80071b4:	9b04      	ldr	r3, [sp, #16]
 80071b6:	eba0 000a 	sub.w	r0, r0, sl
 80071ba:	2240      	movs	r2, #64	@ 0x40
 80071bc:	4082      	lsls	r2, r0
 80071be:	4313      	orrs	r3, r2
 80071c0:	3401      	adds	r4, #1
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c8:	4824      	ldr	r0, [pc, #144]	@ (800725c <_svfiprintf_r+0x1e8>)
 80071ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071ce:	2206      	movs	r2, #6
 80071d0:	f7f9 f81e 	bl	8000210 <memchr>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d036      	beq.n	8007246 <_svfiprintf_r+0x1d2>
 80071d8:	4b21      	ldr	r3, [pc, #132]	@ (8007260 <_svfiprintf_r+0x1ec>)
 80071da:	bb1b      	cbnz	r3, 8007224 <_svfiprintf_r+0x1b0>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	3307      	adds	r3, #7
 80071e0:	f023 0307 	bic.w	r3, r3, #7
 80071e4:	3308      	adds	r3, #8
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ea:	4433      	add	r3, r6
 80071ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ee:	e76a      	b.n	80070c6 <_svfiprintf_r+0x52>
 80071f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f4:	460c      	mov	r4, r1
 80071f6:	2001      	movs	r0, #1
 80071f8:	e7a8      	b.n	800714c <_svfiprintf_r+0xd8>
 80071fa:	2300      	movs	r3, #0
 80071fc:	3401      	adds	r4, #1
 80071fe:	9305      	str	r3, [sp, #20]
 8007200:	4619      	mov	r1, r3
 8007202:	f04f 0c0a 	mov.w	ip, #10
 8007206:	4620      	mov	r0, r4
 8007208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800720c:	3a30      	subs	r2, #48	@ 0x30
 800720e:	2a09      	cmp	r2, #9
 8007210:	d903      	bls.n	800721a <_svfiprintf_r+0x1a6>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0c6      	beq.n	80071a4 <_svfiprintf_r+0x130>
 8007216:	9105      	str	r1, [sp, #20]
 8007218:	e7c4      	b.n	80071a4 <_svfiprintf_r+0x130>
 800721a:	fb0c 2101 	mla	r1, ip, r1, r2
 800721e:	4604      	mov	r4, r0
 8007220:	2301      	movs	r3, #1
 8007222:	e7f0      	b.n	8007206 <_svfiprintf_r+0x192>
 8007224:	ab03      	add	r3, sp, #12
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	462a      	mov	r2, r5
 800722a:	4b0e      	ldr	r3, [pc, #56]	@ (8007264 <_svfiprintf_r+0x1f0>)
 800722c:	a904      	add	r1, sp, #16
 800722e:	4638      	mov	r0, r7
 8007230:	f7fd fe92 	bl	8004f58 <_printf_float>
 8007234:	1c42      	adds	r2, r0, #1
 8007236:	4606      	mov	r6, r0
 8007238:	d1d6      	bne.n	80071e8 <_svfiprintf_r+0x174>
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	065b      	lsls	r3, r3, #25
 800723e:	f53f af2d 	bmi.w	800709c <_svfiprintf_r+0x28>
 8007242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007244:	e72c      	b.n	80070a0 <_svfiprintf_r+0x2c>
 8007246:	ab03      	add	r3, sp, #12
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	462a      	mov	r2, r5
 800724c:	4b05      	ldr	r3, [pc, #20]	@ (8007264 <_svfiprintf_r+0x1f0>)
 800724e:	a904      	add	r1, sp, #16
 8007250:	4638      	mov	r0, r7
 8007252:	f7fe f919 	bl	8005488 <_printf_i>
 8007256:	e7ed      	b.n	8007234 <_svfiprintf_r+0x1c0>
 8007258:	08007c2a 	.word	0x08007c2a
 800725c:	08007c34 	.word	0x08007c34
 8007260:	08004f59 	.word	0x08004f59
 8007264:	08006fbd 	.word	0x08006fbd
 8007268:	08007c30 	.word	0x08007c30

0800726c <__sflush_r>:
 800726c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007274:	0716      	lsls	r6, r2, #28
 8007276:	4605      	mov	r5, r0
 8007278:	460c      	mov	r4, r1
 800727a:	d454      	bmi.n	8007326 <__sflush_r+0xba>
 800727c:	684b      	ldr	r3, [r1, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	dc02      	bgt.n	8007288 <__sflush_r+0x1c>
 8007282:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd48      	ble.n	800731a <__sflush_r+0xae>
 8007288:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800728a:	2e00      	cmp	r6, #0
 800728c:	d045      	beq.n	800731a <__sflush_r+0xae>
 800728e:	2300      	movs	r3, #0
 8007290:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007294:	682f      	ldr	r7, [r5, #0]
 8007296:	6a21      	ldr	r1, [r4, #32]
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	d030      	beq.n	80072fe <__sflush_r+0x92>
 800729c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	0759      	lsls	r1, r3, #29
 80072a2:	d505      	bpl.n	80072b0 <__sflush_r+0x44>
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072aa:	b10b      	cbz	r3, 80072b0 <__sflush_r+0x44>
 80072ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	2300      	movs	r3, #0
 80072b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072b4:	6a21      	ldr	r1, [r4, #32]
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b0      	blx	r6
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	d106      	bne.n	80072ce <__sflush_r+0x62>
 80072c0:	6829      	ldr	r1, [r5, #0]
 80072c2:	291d      	cmp	r1, #29
 80072c4:	d82b      	bhi.n	800731e <__sflush_r+0xb2>
 80072c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007370 <__sflush_r+0x104>)
 80072c8:	40ca      	lsrs	r2, r1
 80072ca:	07d6      	lsls	r6, r2, #31
 80072cc:	d527      	bpl.n	800731e <__sflush_r+0xb2>
 80072ce:	2200      	movs	r2, #0
 80072d0:	6062      	str	r2, [r4, #4]
 80072d2:	04d9      	lsls	r1, r3, #19
 80072d4:	6922      	ldr	r2, [r4, #16]
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	d504      	bpl.n	80072e4 <__sflush_r+0x78>
 80072da:	1c42      	adds	r2, r0, #1
 80072dc:	d101      	bne.n	80072e2 <__sflush_r+0x76>
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	b903      	cbnz	r3, 80072e4 <__sflush_r+0x78>
 80072e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80072e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072e6:	602f      	str	r7, [r5, #0]
 80072e8:	b1b9      	cbz	r1, 800731a <__sflush_r+0xae>
 80072ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072ee:	4299      	cmp	r1, r3
 80072f0:	d002      	beq.n	80072f8 <__sflush_r+0x8c>
 80072f2:	4628      	mov	r0, r5
 80072f4:	f7ff f9e8 	bl	80066c8 <_free_r>
 80072f8:	2300      	movs	r3, #0
 80072fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80072fc:	e00d      	b.n	800731a <__sflush_r+0xae>
 80072fe:	2301      	movs	r3, #1
 8007300:	4628      	mov	r0, r5
 8007302:	47b0      	blx	r6
 8007304:	4602      	mov	r2, r0
 8007306:	1c50      	adds	r0, r2, #1
 8007308:	d1c9      	bne.n	800729e <__sflush_r+0x32>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0c6      	beq.n	800729e <__sflush_r+0x32>
 8007310:	2b1d      	cmp	r3, #29
 8007312:	d001      	beq.n	8007318 <__sflush_r+0xac>
 8007314:	2b16      	cmp	r3, #22
 8007316:	d11e      	bne.n	8007356 <__sflush_r+0xea>
 8007318:	602f      	str	r7, [r5, #0]
 800731a:	2000      	movs	r0, #0
 800731c:	e022      	b.n	8007364 <__sflush_r+0xf8>
 800731e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007322:	b21b      	sxth	r3, r3
 8007324:	e01b      	b.n	800735e <__sflush_r+0xf2>
 8007326:	690f      	ldr	r7, [r1, #16]
 8007328:	2f00      	cmp	r7, #0
 800732a:	d0f6      	beq.n	800731a <__sflush_r+0xae>
 800732c:	0793      	lsls	r3, r2, #30
 800732e:	680e      	ldr	r6, [r1, #0]
 8007330:	bf08      	it	eq
 8007332:	694b      	ldreq	r3, [r1, #20]
 8007334:	600f      	str	r7, [r1, #0]
 8007336:	bf18      	it	ne
 8007338:	2300      	movne	r3, #0
 800733a:	eba6 0807 	sub.w	r8, r6, r7
 800733e:	608b      	str	r3, [r1, #8]
 8007340:	f1b8 0f00 	cmp.w	r8, #0
 8007344:	dde9      	ble.n	800731a <__sflush_r+0xae>
 8007346:	6a21      	ldr	r1, [r4, #32]
 8007348:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800734a:	4643      	mov	r3, r8
 800734c:	463a      	mov	r2, r7
 800734e:	4628      	mov	r0, r5
 8007350:	47b0      	blx	r6
 8007352:	2800      	cmp	r0, #0
 8007354:	dc08      	bgt.n	8007368 <__sflush_r+0xfc>
 8007356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007368:	4407      	add	r7, r0
 800736a:	eba8 0800 	sub.w	r8, r8, r0
 800736e:	e7e7      	b.n	8007340 <__sflush_r+0xd4>
 8007370:	20400001 	.word	0x20400001

08007374 <_fflush_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	690b      	ldr	r3, [r1, #16]
 8007378:	4605      	mov	r5, r0
 800737a:	460c      	mov	r4, r1
 800737c:	b913      	cbnz	r3, 8007384 <_fflush_r+0x10>
 800737e:	2500      	movs	r5, #0
 8007380:	4628      	mov	r0, r5
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	b118      	cbz	r0, 800738e <_fflush_r+0x1a>
 8007386:	6a03      	ldr	r3, [r0, #32]
 8007388:	b90b      	cbnz	r3, 800738e <_fflush_r+0x1a>
 800738a:	f7fe fa27 	bl	80057dc <__sinit>
 800738e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f3      	beq.n	800737e <_fflush_r+0xa>
 8007396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007398:	07d0      	lsls	r0, r2, #31
 800739a:	d404      	bmi.n	80073a6 <_fflush_r+0x32>
 800739c:	0599      	lsls	r1, r3, #22
 800739e:	d402      	bmi.n	80073a6 <_fflush_r+0x32>
 80073a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073a2:	f7fe fb34 	bl	8005a0e <__retarget_lock_acquire_recursive>
 80073a6:	4628      	mov	r0, r5
 80073a8:	4621      	mov	r1, r4
 80073aa:	f7ff ff5f 	bl	800726c <__sflush_r>
 80073ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073b0:	07da      	lsls	r2, r3, #31
 80073b2:	4605      	mov	r5, r0
 80073b4:	d4e4      	bmi.n	8007380 <_fflush_r+0xc>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	059b      	lsls	r3, r3, #22
 80073ba:	d4e1      	bmi.n	8007380 <_fflush_r+0xc>
 80073bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073be:	f7fe fb27 	bl	8005a10 <__retarget_lock_release_recursive>
 80073c2:	e7dd      	b.n	8007380 <_fflush_r+0xc>

080073c4 <memmove>:
 80073c4:	4288      	cmp	r0, r1
 80073c6:	b510      	push	{r4, lr}
 80073c8:	eb01 0402 	add.w	r4, r1, r2
 80073cc:	d902      	bls.n	80073d4 <memmove+0x10>
 80073ce:	4284      	cmp	r4, r0
 80073d0:	4623      	mov	r3, r4
 80073d2:	d807      	bhi.n	80073e4 <memmove+0x20>
 80073d4:	1e43      	subs	r3, r0, #1
 80073d6:	42a1      	cmp	r1, r4
 80073d8:	d008      	beq.n	80073ec <memmove+0x28>
 80073da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073e2:	e7f8      	b.n	80073d6 <memmove+0x12>
 80073e4:	4402      	add	r2, r0
 80073e6:	4601      	mov	r1, r0
 80073e8:	428a      	cmp	r2, r1
 80073ea:	d100      	bne.n	80073ee <memmove+0x2a>
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073f6:	e7f7      	b.n	80073e8 <memmove+0x24>

080073f8 <_sbrk_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4d06      	ldr	r5, [pc, #24]	@ (8007414 <_sbrk_r+0x1c>)
 80073fc:	2300      	movs	r3, #0
 80073fe:	4604      	mov	r4, r0
 8007400:	4608      	mov	r0, r1
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	f7fa fa34 	bl	8001870 <_sbrk>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_sbrk_r+0x1a>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_sbrk_r+0x1a>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000460 	.word	0x20000460

08007418 <memcpy>:
 8007418:	440a      	add	r2, r1
 800741a:	4291      	cmp	r1, r2
 800741c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007420:	d100      	bne.n	8007424 <memcpy+0xc>
 8007422:	4770      	bx	lr
 8007424:	b510      	push	{r4, lr}
 8007426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800742a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800742e:	4291      	cmp	r1, r2
 8007430:	d1f9      	bne.n	8007426 <memcpy+0xe>
 8007432:	bd10      	pop	{r4, pc}

08007434 <__assert_func>:
 8007434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007436:	4614      	mov	r4, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4b09      	ldr	r3, [pc, #36]	@ (8007460 <__assert_func+0x2c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4605      	mov	r5, r0
 8007440:	68d8      	ldr	r0, [r3, #12]
 8007442:	b14c      	cbz	r4, 8007458 <__assert_func+0x24>
 8007444:	4b07      	ldr	r3, [pc, #28]	@ (8007464 <__assert_func+0x30>)
 8007446:	9100      	str	r1, [sp, #0]
 8007448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800744c:	4906      	ldr	r1, [pc, #24]	@ (8007468 <__assert_func+0x34>)
 800744e:	462b      	mov	r3, r5
 8007450:	f000 f870 	bl	8007534 <fiprintf>
 8007454:	f000 f880 	bl	8007558 <abort>
 8007458:	4b04      	ldr	r3, [pc, #16]	@ (800746c <__assert_func+0x38>)
 800745a:	461c      	mov	r4, r3
 800745c:	e7f3      	b.n	8007446 <__assert_func+0x12>
 800745e:	bf00      	nop
 8007460:	20000018 	.word	0x20000018
 8007464:	08007c45 	.word	0x08007c45
 8007468:	08007c52 	.word	0x08007c52
 800746c:	08007c80 	.word	0x08007c80

08007470 <_calloc_r>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	fba1 5402 	umull	r5, r4, r1, r2
 8007476:	b934      	cbnz	r4, 8007486 <_calloc_r+0x16>
 8007478:	4629      	mov	r1, r5
 800747a:	f7ff f999 	bl	80067b0 <_malloc_r>
 800747e:	4606      	mov	r6, r0
 8007480:	b928      	cbnz	r0, 800748e <_calloc_r+0x1e>
 8007482:	4630      	mov	r0, r6
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	220c      	movs	r2, #12
 8007488:	6002      	str	r2, [r0, #0]
 800748a:	2600      	movs	r6, #0
 800748c:	e7f9      	b.n	8007482 <_calloc_r+0x12>
 800748e:	462a      	mov	r2, r5
 8007490:	4621      	mov	r1, r4
 8007492:	f7fe fa3e 	bl	8005912 <memset>
 8007496:	e7f4      	b.n	8007482 <_calloc_r+0x12>

08007498 <__ascii_mbtowc>:
 8007498:	b082      	sub	sp, #8
 800749a:	b901      	cbnz	r1, 800749e <__ascii_mbtowc+0x6>
 800749c:	a901      	add	r1, sp, #4
 800749e:	b142      	cbz	r2, 80074b2 <__ascii_mbtowc+0x1a>
 80074a0:	b14b      	cbz	r3, 80074b6 <__ascii_mbtowc+0x1e>
 80074a2:	7813      	ldrb	r3, [r2, #0]
 80074a4:	600b      	str	r3, [r1, #0]
 80074a6:	7812      	ldrb	r2, [r2, #0]
 80074a8:	1e10      	subs	r0, r2, #0
 80074aa:	bf18      	it	ne
 80074ac:	2001      	movne	r0, #1
 80074ae:	b002      	add	sp, #8
 80074b0:	4770      	bx	lr
 80074b2:	4610      	mov	r0, r2
 80074b4:	e7fb      	b.n	80074ae <__ascii_mbtowc+0x16>
 80074b6:	f06f 0001 	mvn.w	r0, #1
 80074ba:	e7f8      	b.n	80074ae <__ascii_mbtowc+0x16>

080074bc <_realloc_r>:
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	4607      	mov	r7, r0
 80074c2:	4614      	mov	r4, r2
 80074c4:	460d      	mov	r5, r1
 80074c6:	b921      	cbnz	r1, 80074d2 <_realloc_r+0x16>
 80074c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074cc:	4611      	mov	r1, r2
 80074ce:	f7ff b96f 	b.w	80067b0 <_malloc_r>
 80074d2:	b92a      	cbnz	r2, 80074e0 <_realloc_r+0x24>
 80074d4:	f7ff f8f8 	bl	80066c8 <_free_r>
 80074d8:	4625      	mov	r5, r4
 80074da:	4628      	mov	r0, r5
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e0:	f000 f841 	bl	8007566 <_malloc_usable_size_r>
 80074e4:	4284      	cmp	r4, r0
 80074e6:	4606      	mov	r6, r0
 80074e8:	d802      	bhi.n	80074f0 <_realloc_r+0x34>
 80074ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074ee:	d8f4      	bhi.n	80074da <_realloc_r+0x1e>
 80074f0:	4621      	mov	r1, r4
 80074f2:	4638      	mov	r0, r7
 80074f4:	f7ff f95c 	bl	80067b0 <_malloc_r>
 80074f8:	4680      	mov	r8, r0
 80074fa:	b908      	cbnz	r0, 8007500 <_realloc_r+0x44>
 80074fc:	4645      	mov	r5, r8
 80074fe:	e7ec      	b.n	80074da <_realloc_r+0x1e>
 8007500:	42b4      	cmp	r4, r6
 8007502:	4622      	mov	r2, r4
 8007504:	4629      	mov	r1, r5
 8007506:	bf28      	it	cs
 8007508:	4632      	movcs	r2, r6
 800750a:	f7ff ff85 	bl	8007418 <memcpy>
 800750e:	4629      	mov	r1, r5
 8007510:	4638      	mov	r0, r7
 8007512:	f7ff f8d9 	bl	80066c8 <_free_r>
 8007516:	e7f1      	b.n	80074fc <_realloc_r+0x40>

08007518 <__ascii_wctomb>:
 8007518:	4603      	mov	r3, r0
 800751a:	4608      	mov	r0, r1
 800751c:	b141      	cbz	r1, 8007530 <__ascii_wctomb+0x18>
 800751e:	2aff      	cmp	r2, #255	@ 0xff
 8007520:	d904      	bls.n	800752c <__ascii_wctomb+0x14>
 8007522:	228a      	movs	r2, #138	@ 0x8a
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f04f 30ff 	mov.w	r0, #4294967295
 800752a:	4770      	bx	lr
 800752c:	700a      	strb	r2, [r1, #0]
 800752e:	2001      	movs	r0, #1
 8007530:	4770      	bx	lr
	...

08007534 <fiprintf>:
 8007534:	b40e      	push	{r1, r2, r3}
 8007536:	b503      	push	{r0, r1, lr}
 8007538:	4601      	mov	r1, r0
 800753a:	ab03      	add	r3, sp, #12
 800753c:	4805      	ldr	r0, [pc, #20]	@ (8007554 <fiprintf+0x20>)
 800753e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007542:	6800      	ldr	r0, [r0, #0]
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	f000 f83f 	bl	80075c8 <_vfiprintf_r>
 800754a:	b002      	add	sp, #8
 800754c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007550:	b003      	add	sp, #12
 8007552:	4770      	bx	lr
 8007554:	20000018 	.word	0x20000018

08007558 <abort>:
 8007558:	b508      	push	{r3, lr}
 800755a:	2006      	movs	r0, #6
 800755c:	f000 fa08 	bl	8007970 <raise>
 8007560:	2001      	movs	r0, #1
 8007562:	f7fa f90d 	bl	8001780 <_exit>

08007566 <_malloc_usable_size_r>:
 8007566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756a:	1f18      	subs	r0, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfbc      	itt	lt
 8007570:	580b      	ldrlt	r3, [r1, r0]
 8007572:	18c0      	addlt	r0, r0, r3
 8007574:	4770      	bx	lr

08007576 <__sfputc_r>:
 8007576:	6893      	ldr	r3, [r2, #8]
 8007578:	3b01      	subs	r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	b410      	push	{r4}
 800757e:	6093      	str	r3, [r2, #8]
 8007580:	da08      	bge.n	8007594 <__sfputc_r+0x1e>
 8007582:	6994      	ldr	r4, [r2, #24]
 8007584:	42a3      	cmp	r3, r4
 8007586:	db01      	blt.n	800758c <__sfputc_r+0x16>
 8007588:	290a      	cmp	r1, #10
 800758a:	d103      	bne.n	8007594 <__sfputc_r+0x1e>
 800758c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007590:	f000 b932 	b.w	80077f8 <__swbuf_r>
 8007594:	6813      	ldr	r3, [r2, #0]
 8007596:	1c58      	adds	r0, r3, #1
 8007598:	6010      	str	r0, [r2, #0]
 800759a:	7019      	strb	r1, [r3, #0]
 800759c:	4608      	mov	r0, r1
 800759e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <__sfputs_r>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	4606      	mov	r6, r0
 80075a8:	460f      	mov	r7, r1
 80075aa:	4614      	mov	r4, r2
 80075ac:	18d5      	adds	r5, r2, r3
 80075ae:	42ac      	cmp	r4, r5
 80075b0:	d101      	bne.n	80075b6 <__sfputs_r+0x12>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e007      	b.n	80075c6 <__sfputs_r+0x22>
 80075b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ba:	463a      	mov	r2, r7
 80075bc:	4630      	mov	r0, r6
 80075be:	f7ff ffda 	bl	8007576 <__sfputc_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d1f3      	bne.n	80075ae <__sfputs_r+0xa>
 80075c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075c8 <_vfiprintf_r>:
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	460d      	mov	r5, r1
 80075ce:	b09d      	sub	sp, #116	@ 0x74
 80075d0:	4614      	mov	r4, r2
 80075d2:	4698      	mov	r8, r3
 80075d4:	4606      	mov	r6, r0
 80075d6:	b118      	cbz	r0, 80075e0 <_vfiprintf_r+0x18>
 80075d8:	6a03      	ldr	r3, [r0, #32]
 80075da:	b90b      	cbnz	r3, 80075e0 <_vfiprintf_r+0x18>
 80075dc:	f7fe f8fe 	bl	80057dc <__sinit>
 80075e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075e2:	07d9      	lsls	r1, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_vfiprintf_r+0x2a>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	059a      	lsls	r2, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_vfiprintf_r+0x2a>
 80075ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ee:	f7fe fa0e 	bl	8005a0e <__retarget_lock_acquire_recursive>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	071b      	lsls	r3, r3, #28
 80075f6:	d501      	bpl.n	80075fc <_vfiprintf_r+0x34>
 80075f8:	692b      	ldr	r3, [r5, #16]
 80075fa:	b99b      	cbnz	r3, 8007624 <_vfiprintf_r+0x5c>
 80075fc:	4629      	mov	r1, r5
 80075fe:	4630      	mov	r0, r6
 8007600:	f000 f938 	bl	8007874 <__swsetup_r>
 8007604:	b170      	cbz	r0, 8007624 <_vfiprintf_r+0x5c>
 8007606:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007608:	07dc      	lsls	r4, r3, #31
 800760a:	d504      	bpl.n	8007616 <_vfiprintf_r+0x4e>
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	b01d      	add	sp, #116	@ 0x74
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	0598      	lsls	r0, r3, #22
 800761a:	d4f7      	bmi.n	800760c <_vfiprintf_r+0x44>
 800761c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800761e:	f7fe f9f7 	bl	8005a10 <__retarget_lock_release_recursive>
 8007622:	e7f3      	b.n	800760c <_vfiprintf_r+0x44>
 8007624:	2300      	movs	r3, #0
 8007626:	9309      	str	r3, [sp, #36]	@ 0x24
 8007628:	2320      	movs	r3, #32
 800762a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800762e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007632:	2330      	movs	r3, #48	@ 0x30
 8007634:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077e4 <_vfiprintf_r+0x21c>
 8007638:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800763c:	f04f 0901 	mov.w	r9, #1
 8007640:	4623      	mov	r3, r4
 8007642:	469a      	mov	sl, r3
 8007644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007648:	b10a      	cbz	r2, 800764e <_vfiprintf_r+0x86>
 800764a:	2a25      	cmp	r2, #37	@ 0x25
 800764c:	d1f9      	bne.n	8007642 <_vfiprintf_r+0x7a>
 800764e:	ebba 0b04 	subs.w	fp, sl, r4
 8007652:	d00b      	beq.n	800766c <_vfiprintf_r+0xa4>
 8007654:	465b      	mov	r3, fp
 8007656:	4622      	mov	r2, r4
 8007658:	4629      	mov	r1, r5
 800765a:	4630      	mov	r0, r6
 800765c:	f7ff ffa2 	bl	80075a4 <__sfputs_r>
 8007660:	3001      	adds	r0, #1
 8007662:	f000 80a7 	beq.w	80077b4 <_vfiprintf_r+0x1ec>
 8007666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007668:	445a      	add	r2, fp
 800766a:	9209      	str	r2, [sp, #36]	@ 0x24
 800766c:	f89a 3000 	ldrb.w	r3, [sl]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 809f 	beq.w	80077b4 <_vfiprintf_r+0x1ec>
 8007676:	2300      	movs	r3, #0
 8007678:	f04f 32ff 	mov.w	r2, #4294967295
 800767c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007680:	f10a 0a01 	add.w	sl, sl, #1
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	9307      	str	r3, [sp, #28]
 8007688:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800768c:	931a      	str	r3, [sp, #104]	@ 0x68
 800768e:	4654      	mov	r4, sl
 8007690:	2205      	movs	r2, #5
 8007692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007696:	4853      	ldr	r0, [pc, #332]	@ (80077e4 <_vfiprintf_r+0x21c>)
 8007698:	f7f8 fdba 	bl	8000210 <memchr>
 800769c:	9a04      	ldr	r2, [sp, #16]
 800769e:	b9d8      	cbnz	r0, 80076d8 <_vfiprintf_r+0x110>
 80076a0:	06d1      	lsls	r1, r2, #27
 80076a2:	bf44      	itt	mi
 80076a4:	2320      	movmi	r3, #32
 80076a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076aa:	0713      	lsls	r3, r2, #28
 80076ac:	bf44      	itt	mi
 80076ae:	232b      	movmi	r3, #43	@ 0x2b
 80076b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b4:	f89a 3000 	ldrb.w	r3, [sl]
 80076b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ba:	d015      	beq.n	80076e8 <_vfiprintf_r+0x120>
 80076bc:	9a07      	ldr	r2, [sp, #28]
 80076be:	4654      	mov	r4, sl
 80076c0:	2000      	movs	r0, #0
 80076c2:	f04f 0c0a 	mov.w	ip, #10
 80076c6:	4621      	mov	r1, r4
 80076c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076cc:	3b30      	subs	r3, #48	@ 0x30
 80076ce:	2b09      	cmp	r3, #9
 80076d0:	d94b      	bls.n	800776a <_vfiprintf_r+0x1a2>
 80076d2:	b1b0      	cbz	r0, 8007702 <_vfiprintf_r+0x13a>
 80076d4:	9207      	str	r2, [sp, #28]
 80076d6:	e014      	b.n	8007702 <_vfiprintf_r+0x13a>
 80076d8:	eba0 0308 	sub.w	r3, r0, r8
 80076dc:	fa09 f303 	lsl.w	r3, r9, r3
 80076e0:	4313      	orrs	r3, r2
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	46a2      	mov	sl, r4
 80076e6:	e7d2      	b.n	800768e <_vfiprintf_r+0xc6>
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	1d19      	adds	r1, r3, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	9103      	str	r1, [sp, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bfbb      	ittet	lt
 80076f4:	425b      	neglt	r3, r3
 80076f6:	f042 0202 	orrlt.w	r2, r2, #2
 80076fa:	9307      	strge	r3, [sp, #28]
 80076fc:	9307      	strlt	r3, [sp, #28]
 80076fe:	bfb8      	it	lt
 8007700:	9204      	strlt	r2, [sp, #16]
 8007702:	7823      	ldrb	r3, [r4, #0]
 8007704:	2b2e      	cmp	r3, #46	@ 0x2e
 8007706:	d10a      	bne.n	800771e <_vfiprintf_r+0x156>
 8007708:	7863      	ldrb	r3, [r4, #1]
 800770a:	2b2a      	cmp	r3, #42	@ 0x2a
 800770c:	d132      	bne.n	8007774 <_vfiprintf_r+0x1ac>
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	9203      	str	r2, [sp, #12]
 8007716:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800771a:	3402      	adds	r4, #2
 800771c:	9305      	str	r3, [sp, #20]
 800771e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077f4 <_vfiprintf_r+0x22c>
 8007722:	7821      	ldrb	r1, [r4, #0]
 8007724:	2203      	movs	r2, #3
 8007726:	4650      	mov	r0, sl
 8007728:	f7f8 fd72 	bl	8000210 <memchr>
 800772c:	b138      	cbz	r0, 800773e <_vfiprintf_r+0x176>
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	eba0 000a 	sub.w	r0, r0, sl
 8007734:	2240      	movs	r2, #64	@ 0x40
 8007736:	4082      	lsls	r2, r0
 8007738:	4313      	orrs	r3, r2
 800773a:	3401      	adds	r4, #1
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007742:	4829      	ldr	r0, [pc, #164]	@ (80077e8 <_vfiprintf_r+0x220>)
 8007744:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007748:	2206      	movs	r2, #6
 800774a:	f7f8 fd61 	bl	8000210 <memchr>
 800774e:	2800      	cmp	r0, #0
 8007750:	d03f      	beq.n	80077d2 <_vfiprintf_r+0x20a>
 8007752:	4b26      	ldr	r3, [pc, #152]	@ (80077ec <_vfiprintf_r+0x224>)
 8007754:	bb1b      	cbnz	r3, 800779e <_vfiprintf_r+0x1d6>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	3307      	adds	r3, #7
 800775a:	f023 0307 	bic.w	r3, r3, #7
 800775e:	3308      	adds	r3, #8
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007764:	443b      	add	r3, r7
 8007766:	9309      	str	r3, [sp, #36]	@ 0x24
 8007768:	e76a      	b.n	8007640 <_vfiprintf_r+0x78>
 800776a:	fb0c 3202 	mla	r2, ip, r2, r3
 800776e:	460c      	mov	r4, r1
 8007770:	2001      	movs	r0, #1
 8007772:	e7a8      	b.n	80076c6 <_vfiprintf_r+0xfe>
 8007774:	2300      	movs	r3, #0
 8007776:	3401      	adds	r4, #1
 8007778:	9305      	str	r3, [sp, #20]
 800777a:	4619      	mov	r1, r3
 800777c:	f04f 0c0a 	mov.w	ip, #10
 8007780:	4620      	mov	r0, r4
 8007782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007786:	3a30      	subs	r2, #48	@ 0x30
 8007788:	2a09      	cmp	r2, #9
 800778a:	d903      	bls.n	8007794 <_vfiprintf_r+0x1cc>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0c6      	beq.n	800771e <_vfiprintf_r+0x156>
 8007790:	9105      	str	r1, [sp, #20]
 8007792:	e7c4      	b.n	800771e <_vfiprintf_r+0x156>
 8007794:	fb0c 2101 	mla	r1, ip, r1, r2
 8007798:	4604      	mov	r4, r0
 800779a:	2301      	movs	r3, #1
 800779c:	e7f0      	b.n	8007780 <_vfiprintf_r+0x1b8>
 800779e:	ab03      	add	r3, sp, #12
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	462a      	mov	r2, r5
 80077a4:	4b12      	ldr	r3, [pc, #72]	@ (80077f0 <_vfiprintf_r+0x228>)
 80077a6:	a904      	add	r1, sp, #16
 80077a8:	4630      	mov	r0, r6
 80077aa:	f7fd fbd5 	bl	8004f58 <_printf_float>
 80077ae:	4607      	mov	r7, r0
 80077b0:	1c78      	adds	r0, r7, #1
 80077b2:	d1d6      	bne.n	8007762 <_vfiprintf_r+0x19a>
 80077b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077b6:	07d9      	lsls	r1, r3, #31
 80077b8:	d405      	bmi.n	80077c6 <_vfiprintf_r+0x1fe>
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	059a      	lsls	r2, r3, #22
 80077be:	d402      	bmi.n	80077c6 <_vfiprintf_r+0x1fe>
 80077c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077c2:	f7fe f925 	bl	8005a10 <__retarget_lock_release_recursive>
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	065b      	lsls	r3, r3, #25
 80077ca:	f53f af1f 	bmi.w	800760c <_vfiprintf_r+0x44>
 80077ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077d0:	e71e      	b.n	8007610 <_vfiprintf_r+0x48>
 80077d2:	ab03      	add	r3, sp, #12
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	462a      	mov	r2, r5
 80077d8:	4b05      	ldr	r3, [pc, #20]	@ (80077f0 <_vfiprintf_r+0x228>)
 80077da:	a904      	add	r1, sp, #16
 80077dc:	4630      	mov	r0, r6
 80077de:	f7fd fe53 	bl	8005488 <_printf_i>
 80077e2:	e7e4      	b.n	80077ae <_vfiprintf_r+0x1e6>
 80077e4:	08007c2a 	.word	0x08007c2a
 80077e8:	08007c34 	.word	0x08007c34
 80077ec:	08004f59 	.word	0x08004f59
 80077f0:	080075a5 	.word	0x080075a5
 80077f4:	08007c30 	.word	0x08007c30

080077f8 <__swbuf_r>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	460e      	mov	r6, r1
 80077fc:	4614      	mov	r4, r2
 80077fe:	4605      	mov	r5, r0
 8007800:	b118      	cbz	r0, 800780a <__swbuf_r+0x12>
 8007802:	6a03      	ldr	r3, [r0, #32]
 8007804:	b90b      	cbnz	r3, 800780a <__swbuf_r+0x12>
 8007806:	f7fd ffe9 	bl	80057dc <__sinit>
 800780a:	69a3      	ldr	r3, [r4, #24]
 800780c:	60a3      	str	r3, [r4, #8]
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	071a      	lsls	r2, r3, #28
 8007812:	d501      	bpl.n	8007818 <__swbuf_r+0x20>
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	b943      	cbnz	r3, 800782a <__swbuf_r+0x32>
 8007818:	4621      	mov	r1, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f82a 	bl	8007874 <__swsetup_r>
 8007820:	b118      	cbz	r0, 800782a <__swbuf_r+0x32>
 8007822:	f04f 37ff 	mov.w	r7, #4294967295
 8007826:	4638      	mov	r0, r7
 8007828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	6922      	ldr	r2, [r4, #16]
 800782e:	1a98      	subs	r0, r3, r2
 8007830:	6963      	ldr	r3, [r4, #20]
 8007832:	b2f6      	uxtb	r6, r6
 8007834:	4283      	cmp	r3, r0
 8007836:	4637      	mov	r7, r6
 8007838:	dc05      	bgt.n	8007846 <__swbuf_r+0x4e>
 800783a:	4621      	mov	r1, r4
 800783c:	4628      	mov	r0, r5
 800783e:	f7ff fd99 	bl	8007374 <_fflush_r>
 8007842:	2800      	cmp	r0, #0
 8007844:	d1ed      	bne.n	8007822 <__swbuf_r+0x2a>
 8007846:	68a3      	ldr	r3, [r4, #8]
 8007848:	3b01      	subs	r3, #1
 800784a:	60a3      	str	r3, [r4, #8]
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	6022      	str	r2, [r4, #0]
 8007852:	701e      	strb	r6, [r3, #0]
 8007854:	6962      	ldr	r2, [r4, #20]
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	429a      	cmp	r2, r3
 800785a:	d004      	beq.n	8007866 <__swbuf_r+0x6e>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	07db      	lsls	r3, r3, #31
 8007860:	d5e1      	bpl.n	8007826 <__swbuf_r+0x2e>
 8007862:	2e0a      	cmp	r6, #10
 8007864:	d1df      	bne.n	8007826 <__swbuf_r+0x2e>
 8007866:	4621      	mov	r1, r4
 8007868:	4628      	mov	r0, r5
 800786a:	f7ff fd83 	bl	8007374 <_fflush_r>
 800786e:	2800      	cmp	r0, #0
 8007870:	d0d9      	beq.n	8007826 <__swbuf_r+0x2e>
 8007872:	e7d6      	b.n	8007822 <__swbuf_r+0x2a>

08007874 <__swsetup_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4b29      	ldr	r3, [pc, #164]	@ (800791c <__swsetup_r+0xa8>)
 8007878:	4605      	mov	r5, r0
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	460c      	mov	r4, r1
 800787e:	b118      	cbz	r0, 8007888 <__swsetup_r+0x14>
 8007880:	6a03      	ldr	r3, [r0, #32]
 8007882:	b90b      	cbnz	r3, 8007888 <__swsetup_r+0x14>
 8007884:	f7fd ffaa 	bl	80057dc <__sinit>
 8007888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788c:	0719      	lsls	r1, r3, #28
 800788e:	d422      	bmi.n	80078d6 <__swsetup_r+0x62>
 8007890:	06da      	lsls	r2, r3, #27
 8007892:	d407      	bmi.n	80078a4 <__swsetup_r+0x30>
 8007894:	2209      	movs	r2, #9
 8007896:	602a      	str	r2, [r5, #0]
 8007898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	e033      	b.n	800790c <__swsetup_r+0x98>
 80078a4:	0758      	lsls	r0, r3, #29
 80078a6:	d512      	bpl.n	80078ce <__swsetup_r+0x5a>
 80078a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078aa:	b141      	cbz	r1, 80078be <__swsetup_r+0x4a>
 80078ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d002      	beq.n	80078ba <__swsetup_r+0x46>
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7fe ff07 	bl	80066c8 <_free_r>
 80078ba:	2300      	movs	r3, #0
 80078bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	2300      	movs	r3, #0
 80078c8:	6063      	str	r3, [r4, #4]
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f043 0308 	orr.w	r3, r3, #8
 80078d4:	81a3      	strh	r3, [r4, #12]
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	b94b      	cbnz	r3, 80078ee <__swsetup_r+0x7a>
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078e4:	d003      	beq.n	80078ee <__swsetup_r+0x7a>
 80078e6:	4621      	mov	r1, r4
 80078e8:	4628      	mov	r0, r5
 80078ea:	f000 f883 	bl	80079f4 <__smakebuf_r>
 80078ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f2:	f013 0201 	ands.w	r2, r3, #1
 80078f6:	d00a      	beq.n	800790e <__swsetup_r+0x9a>
 80078f8:	2200      	movs	r2, #0
 80078fa:	60a2      	str	r2, [r4, #8]
 80078fc:	6962      	ldr	r2, [r4, #20]
 80078fe:	4252      	negs	r2, r2
 8007900:	61a2      	str	r2, [r4, #24]
 8007902:	6922      	ldr	r2, [r4, #16]
 8007904:	b942      	cbnz	r2, 8007918 <__swsetup_r+0xa4>
 8007906:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800790a:	d1c5      	bne.n	8007898 <__swsetup_r+0x24>
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	0799      	lsls	r1, r3, #30
 8007910:	bf58      	it	pl
 8007912:	6962      	ldrpl	r2, [r4, #20]
 8007914:	60a2      	str	r2, [r4, #8]
 8007916:	e7f4      	b.n	8007902 <__swsetup_r+0x8e>
 8007918:	2000      	movs	r0, #0
 800791a:	e7f7      	b.n	800790c <__swsetup_r+0x98>
 800791c:	20000018 	.word	0x20000018

08007920 <_raise_r>:
 8007920:	291f      	cmp	r1, #31
 8007922:	b538      	push	{r3, r4, r5, lr}
 8007924:	4605      	mov	r5, r0
 8007926:	460c      	mov	r4, r1
 8007928:	d904      	bls.n	8007934 <_raise_r+0x14>
 800792a:	2316      	movs	r3, #22
 800792c:	6003      	str	r3, [r0, #0]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007936:	b112      	cbz	r2, 800793e <_raise_r+0x1e>
 8007938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800793c:	b94b      	cbnz	r3, 8007952 <_raise_r+0x32>
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f830 	bl	80079a4 <_getpid_r>
 8007944:	4622      	mov	r2, r4
 8007946:	4601      	mov	r1, r0
 8007948:	4628      	mov	r0, r5
 800794a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800794e:	f000 b817 	b.w	8007980 <_kill_r>
 8007952:	2b01      	cmp	r3, #1
 8007954:	d00a      	beq.n	800796c <_raise_r+0x4c>
 8007956:	1c59      	adds	r1, r3, #1
 8007958:	d103      	bne.n	8007962 <_raise_r+0x42>
 800795a:	2316      	movs	r3, #22
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	2001      	movs	r0, #1
 8007960:	e7e7      	b.n	8007932 <_raise_r+0x12>
 8007962:	2100      	movs	r1, #0
 8007964:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007968:	4620      	mov	r0, r4
 800796a:	4798      	blx	r3
 800796c:	2000      	movs	r0, #0
 800796e:	e7e0      	b.n	8007932 <_raise_r+0x12>

08007970 <raise>:
 8007970:	4b02      	ldr	r3, [pc, #8]	@ (800797c <raise+0xc>)
 8007972:	4601      	mov	r1, r0
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f7ff bfd3 	b.w	8007920 <_raise_r>
 800797a:	bf00      	nop
 800797c:	20000018 	.word	0x20000018

08007980 <_kill_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d07      	ldr	r5, [pc, #28]	@ (80079a0 <_kill_r+0x20>)
 8007984:	2300      	movs	r3, #0
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	4611      	mov	r1, r2
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	f7f9 fee7 	bl	8001760 <_kill>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	d102      	bne.n	800799c <_kill_r+0x1c>
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	b103      	cbz	r3, 800799c <_kill_r+0x1c>
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	bd38      	pop	{r3, r4, r5, pc}
 800799e:	bf00      	nop
 80079a0:	20000460 	.word	0x20000460

080079a4 <_getpid_r>:
 80079a4:	f7f9 bed4 	b.w	8001750 <_getpid>

080079a8 <__swhatbuf_r>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	460c      	mov	r4, r1
 80079ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b0:	2900      	cmp	r1, #0
 80079b2:	b096      	sub	sp, #88	@ 0x58
 80079b4:	4615      	mov	r5, r2
 80079b6:	461e      	mov	r6, r3
 80079b8:	da0d      	bge.n	80079d6 <__swhatbuf_r+0x2e>
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079c0:	f04f 0100 	mov.w	r1, #0
 80079c4:	bf14      	ite	ne
 80079c6:	2340      	movne	r3, #64	@ 0x40
 80079c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079cc:	2000      	movs	r0, #0
 80079ce:	6031      	str	r1, [r6, #0]
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	b016      	add	sp, #88	@ 0x58
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	466a      	mov	r2, sp
 80079d8:	f000 f848 	bl	8007a6c <_fstat_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	dbec      	blt.n	80079ba <__swhatbuf_r+0x12>
 80079e0:	9901      	ldr	r1, [sp, #4]
 80079e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079ea:	4259      	negs	r1, r3
 80079ec:	4159      	adcs	r1, r3
 80079ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079f2:	e7eb      	b.n	80079cc <__swhatbuf_r+0x24>

080079f4 <__smakebuf_r>:
 80079f4:	898b      	ldrh	r3, [r1, #12]
 80079f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f8:	079d      	lsls	r5, r3, #30
 80079fa:	4606      	mov	r6, r0
 80079fc:	460c      	mov	r4, r1
 80079fe:	d507      	bpl.n	8007a10 <__smakebuf_r+0x1c>
 8007a00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	6123      	str	r3, [r4, #16]
 8007a08:	2301      	movs	r3, #1
 8007a0a:	6163      	str	r3, [r4, #20]
 8007a0c:	b003      	add	sp, #12
 8007a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a10:	ab01      	add	r3, sp, #4
 8007a12:	466a      	mov	r2, sp
 8007a14:	f7ff ffc8 	bl	80079a8 <__swhatbuf_r>
 8007a18:	9f00      	ldr	r7, [sp, #0]
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7fe fec6 	bl	80067b0 <_malloc_r>
 8007a24:	b948      	cbnz	r0, 8007a3a <__smakebuf_r+0x46>
 8007a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a2a:	059a      	lsls	r2, r3, #22
 8007a2c:	d4ee      	bmi.n	8007a0c <__smakebuf_r+0x18>
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	f043 0302 	orr.w	r3, r3, #2
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	e7e2      	b.n	8007a00 <__smakebuf_r+0xc>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	6020      	str	r0, [r4, #0]
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a4a:	b15b      	cbz	r3, 8007a64 <__smakebuf_r+0x70>
 8007a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a50:	4630      	mov	r0, r6
 8007a52:	f000 f81d 	bl	8007a90 <_isatty_r>
 8007a56:	b128      	cbz	r0, 8007a64 <__smakebuf_r+0x70>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	f043 0301 	orr.w	r3, r3, #1
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	431d      	orrs	r5, r3
 8007a68:	81a5      	strh	r5, [r4, #12]
 8007a6a:	e7cf      	b.n	8007a0c <__smakebuf_r+0x18>

08007a6c <_fstat_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	@ (8007a8c <_fstat_r+0x20>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	602b      	str	r3, [r5, #0]
 8007a7a:	f7f9 fed1 	bl	8001820 <_fstat>
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	d102      	bne.n	8007a88 <_fstat_r+0x1c>
 8007a82:	682b      	ldr	r3, [r5, #0]
 8007a84:	b103      	cbz	r3, 8007a88 <_fstat_r+0x1c>
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	bd38      	pop	{r3, r4, r5, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000460 	.word	0x20000460

08007a90 <_isatty_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d06      	ldr	r5, [pc, #24]	@ (8007aac <_isatty_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7f9 fed0 	bl	8001840 <_isatty>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_isatty_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_isatty_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20000460 	.word	0x20000460

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
